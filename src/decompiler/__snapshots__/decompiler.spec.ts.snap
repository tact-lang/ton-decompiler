// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`decompiler should decompile a simple contract 1`] = `
[
  {
    "hash": "a0cfc2c48aee16a271f2cfc0b7382d81756cecb1017d077faaab3bb602f6868c",
    "length": 16,
    "offset": 0,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "display_hints": [],
              "max_value": 239,
              "min_value": 0,
              "name": "n",
              "size": 8,
              "type": "uint",
            },
          ],
          "operands_range_check": {
            "from": 0,
            "length": 8,
            "to": 239,
          },
          "prefix": "FF",
          "tlb": "#FF nn:(#<= 239)",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "codepage",
          "description": "Selects TVM codepage \`0 <= nn < 240\`. If the codepage is not supported, throws an invalid opcode exception.",
          "fift": "[nn] SETCP",
          "fift_examples": [],
          "gas": "26",
          "opcode": "FFnn",
          "stack": "-",
        },
        "mnemonic": "SETCP",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [],
          },
          "outputs": {
            "registers": [],
            "stack": [],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "display_hints": [],
            "max_value": 239,
            "min_value": 0,
            "name": "n",
            "size": 8,
            "type": "uint",
          },
          "type": "numeric",
          "value": 0,
        },
      ],
    },
  },
  {
    "hash": "a0cfc2c48aee16a271f2cfc0b7382d81756cecb1017d077faaab3bb602f6868c",
    "length": 8,
    "offset": 16,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "display_hints": [
                {
                  "type": "stack",
                },
              ],
              "max_value": 15,
              "min_value": 0,
              "name": "i",
              "size": 4,
              "type": "uint",
            },
          ],
          "prefix": "2",
          "tlb": "#2 i:uint4",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "stack_basic",
          "description": "Pushes a copy of the old \`s[i]\` into the stack.",
          "fift": "s[i] PUSH",
          "fift_examples": [],
          "gas": "18",
          "opcode": "2i",
          "stack": "",
        },
        "mnemonic": "PUSH",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
          },
          "outputs": {
            "registers": [],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "display_hints": [
              {
                "type": "stack",
              },
            ],
            "max_value": 15,
            "min_value": 0,
            "name": "i",
            "size": 4,
            "type": "uint",
          },
          "type": "numeric",
          "value": 0,
        },
      ],
    },
  },
  {
    "hash": "a0cfc2c48aee16a271f2cfc0b7382d81756cecb1017d077faaab3bb602f6868c",
    "length": 8,
    "offset": 24,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [],
          "prefix": "DD",
          "tlb": "#DD",
        },
        "control_flow": {
          "branches": [
            {
              "index": 0,
              "type": "register",
            },
          ],
          "nobranch": true,
        },
        "doc": {
          "category": "cont_conditional",
          "description": "Performs a \`RET\`, but only if integer \`f\` is zero.",
          "fift": "IFNOTRET
IF:",
          "fift_examples": [],
          "gas": "18",
          "opcode": "DD",
          "stack": "f - ",
        },
        "mnemonic": "IFNOTRET",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "f",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [],
          },
        },
      },
      "operands": [],
    },
  },
  {
    "hash": "a0cfc2c48aee16a271f2cfc0b7382d81756cecb1017d077faaab3bb602f6868c",
    "length": 8,
    "offset": 32,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [],
          "prefix": "A4",
          "tlb": "#A4",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "arithm_basic",
          "description": "Equivalent to \`1 ADDCONST\`.",
          "fift": "INC",
          "fift_examples": [],
          "gas": "18",
          "opcode": "A4",
          "stack": "x - x+1",
        },
        "mnemonic": "INC",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "x",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [
              {
                "name": "result",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
            ],
          },
        },
      },
      "operands": [],
    },
  },
  {
    "hash": "a0cfc2c48aee16a271f2cfc0b7382d81756cecb1017d077faaab3bb602f6868c",
    "length": 16,
    "offset": 40,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "display_hints": [],
              "max_value": 63,
              "min_value": 0,
              "name": "n",
              "size": 6,
              "type": "uint",
            },
          ],
          "prefix": "F26_",
          "tlb": "#F26_ n:uint6",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "exceptions",
          "description": "Throws exception \`0 <= n <= 63\` with  parameter zero only if integer \`f!=0\`.",
          "fift": "[n] THROWIF",
          "fift_examples": [],
          "gas": "26/76",
          "opcode": "F26_n",
          "stack": "f - ",
        },
        "mnemonic": "THROWIF_SHORT",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "f",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "display_hints": [],
            "max_value": 63,
            "min_value": 0,
            "name": "n",
            "size": 6,
            "type": "uint",
          },
          "type": "numeric",
          "value": 32,
        },
      ],
    },
  },
  {
    "hash": "a0cfc2c48aee16a271f2cfc0b7382d81756cecb1017d077faaab3bb602f6868c",
    "length": 24,
    "offset": 56,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "display_hints": [],
              "max_value": 32767,
              "min_value": -32768,
              "name": "x",
              "size": 16,
              "type": "int",
            },
          ],
          "prefix": "81",
          "tlb": "#81 xxxx:int16",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "const_int",
          "description": "Pushes integer \`xxxx\`. \`-2^15 <= xx < 2^15\`.",
          "fift": "[xxxx] PUSHINT
[xxxx] INT",
          "fift_examples": [],
          "gas": "34",
          "opcode": "81xxxx",
          "stack": "- xxxx",
        },
        "mnemonic": "PUSHINT_16",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [],
          },
          "outputs": {
            "registers": [],
            "stack": [
              {
                "name": "x",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
            ],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "display_hints": [],
            "max_value": 32767,
            "min_value": -32768,
            "name": "x",
            "size": 16,
            "type": "int",
          },
          "type": "numeric",
          "value": 512,
        },
      ],
    },
  },
  {
    "hash": "a0cfc2c48aee16a271f2cfc0b7382d81756cecb1017d077faaab3bb602f6868c",
    "length": 16,
    "offset": 80,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [],
          "prefix": "D718",
          "tlb": "#D718",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "cell_parse",
          "description": "Loads the first \`0 <= l <= 1023\` bits from _Slice_ \`s\` into a separate _Slice_ \`s''\`, returning the remainder of \`s\` as \`s'\`.",
          "fift": "LDSLICEX",
          "fift_examples": [],
          "gas": "26",
          "opcode": "D718",
          "stack": "s l - s'' s'",
        },
        "mnemonic": "LDSLICEX",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "s",
                "type": "simple",
                "value_types": [
                  "Slice",
                ],
              },
              {
                "name": "l",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [
              {
                "name": "s3",
                "type": "simple",
                "value_types": [
                  "Slice",
                ],
              },
              {
                "name": "s2",
                "type": "simple",
                "value_types": [
                  "Slice",
                ],
              },
            ],
          },
        },
      },
      "operands": [],
    },
  },
  {
    "hash": "a0cfc2c48aee16a271f2cfc0b7382d81756cecb1017d077faaab3bb602f6868c",
    "length": 8,
    "offset": 96,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "display_hints": [
                {
                  "type": "stack",
                },
              ],
              "max_value": 15,
              "min_value": 0,
              "name": "i",
              "size": 4,
              "type": "uint",
            },
          ],
          "prefix": "2",
          "tlb": "#2 i:uint4",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "stack_basic",
          "description": "Pushes a copy of the old \`s[i]\` into the stack.",
          "fift": "s[i] PUSH",
          "fift_examples": [],
          "gas": "18",
          "opcode": "2i",
          "stack": "",
        },
        "mnemonic": "PUSH",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
          },
          "outputs": {
            "registers": [],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "display_hints": [
              {
                "type": "stack",
              },
            ],
            "max_value": 15,
            "min_value": 0,
            "name": "i",
            "size": 4,
            "type": "uint",
          },
          "type": "numeric",
          "value": 0,
        },
      ],
    },
  },
  {
    "hash": "a0cfc2c48aee16a271f2cfc0b7382d81756cecb1017d077faaab3bb602f6868c",
    "length": 24,
    "offset": 104,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "display_hints": [
                {
                  "type": "add",
                  "value": 1,
                },
              ],
              "max_value": 255,
              "min_value": 0,
              "name": "c",
              "size": 8,
              "type": "uint",
            },
          ],
          "prefix": "D70B",
          "tlb": "#D70B cc:uint8",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "cell_parse",
          "description": "Preloads an unsigned \`cc+1\`-bit integer from \`s\`.",
          "fift": "[cc+1] PLDU",
          "fift_examples": [],
          "gas": "34",
          "opcode": "D70Bcc",
          "stack": "s - x",
        },
        "mnemonic": "PLDU",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "s",
                "type": "simple",
                "value_types": [
                  "Slice",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [
              {
                "name": "x",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
            ],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "display_hints": [
              {
                "type": "add",
                "value": 1,
              },
            ],
            "max_value": 255,
            "min_value": 0,
            "name": "c",
            "size": 8,
            "type": "uint",
          },
          "type": "numeric",
          "value": 31,
        },
      ],
    },
  },
  {
    "hash": "a0cfc2c48aee16a271f2cfc0b7382d81756cecb1017d077faaab3bb602f6868c",
    "length": 16,
    "offset": 128,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "display_hints": [
                {
                  "type": "register",
                },
              ],
              "max_value": 15,
              "min_value": 0,
              "name": "i",
              "size": 4,
              "type": "uint",
            },
          ],
          "prefix": "ED4",
          "tlb": "#ED4 i:uint4",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "cont_registers",
          "description": "Pushes the current value of control register \`c(i)\`. If the control register is not supported in the current codepage, or if it does not have a value, an exception is triggered.",
          "fift": "c[i] PUSHCTR
c[i] PUSH",
          "fift_examples": [],
          "gas": "26",
          "opcode": "ED4i",
          "stack": "- x",
        },
        "mnemonic": "PUSHCTR",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [
              {
                "type": "variable",
                "var_name": "i",
              },
            ],
            "stack": [],
          },
          "outputs": {
            "registers": [],
            "stack": [
              {
                "name": "x",
                "type": "simple",
              },
            ],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "display_hints": [
              {
                "type": "register",
              },
            ],
            "max_value": 15,
            "min_value": 0,
            "name": "i",
            "size": 4,
            "type": "uint",
          },
          "type": "numeric",
          "value": 4,
        },
      ],
    },
  },
  {
    "hash": "a0cfc2c48aee16a271f2cfc0b7382d81756cecb1017d077faaab3bb602f6868c",
    "length": 8,
    "offset": 144,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [],
          "prefix": "D0",
          "tlb": "#D0",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "cell_parse",
          "description": "Converts a _Cell_ into a _Slice_. Notice that \`c\` must be either an ordinary cell, or an exotic cell which is automatically _loaded_ to yield an ordinary cell \`c'\`, converted into a _Slice_ afterwards.",
          "fift": "CTOS",
          "fift_examples": [],
          "gas": "118/43",
          "opcode": "D0",
          "stack": "c - s",
        },
        "mnemonic": "CTOS",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "c",
                "type": "simple",
                "value_types": [
                  "Cell",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [
              {
                "name": "s",
                "type": "simple",
                "value_types": [
                  "Slice",
                ],
              },
            ],
          },
        },
      },
      "operands": [],
    },
  },
  {
    "hash": "a0cfc2c48aee16a271f2cfc0b7382d81756cecb1017d077faaab3bb602f6868c",
    "length": 16,
    "offset": 152,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "display_hints": [
                {
                  "type": "add",
                  "value": 1,
                },
              ],
              "max_value": 255,
              "min_value": 0,
              "name": "c",
              "size": 8,
              "type": "uint",
            },
          ],
          "prefix": "D3",
          "tlb": "#D3 cc:uint8",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "cell_parse",
          "description": "Loads an unsigned \`cc+1\`-bit integer \`x\` from _Slice_ \`s\`.",
          "fift": "[cc+1] LDU",
          "fift_examples": [],
          "gas": "26",
          "opcode": "D3cc",
          "stack": "s - x s'",
        },
        "mnemonic": "LDU",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "s",
                "type": "simple",
                "value_types": [
                  "Slice",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [
              {
                "name": "x",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
              {
                "name": "s2",
                "type": "simple",
                "value_types": [
                  "Slice",
                ],
              },
            ],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "display_hints": [
              {
                "type": "add",
                "value": 1,
              },
            ],
            "max_value": 255,
            "min_value": 0,
            "name": "c",
            "size": 8,
            "type": "uint",
          },
          "type": "numeric",
          "value": 31,
        },
      ],
    },
  },
  {
    "hash": "a0cfc2c48aee16a271f2cfc0b7382d81756cecb1017d077faaab3bb602f6868c",
    "length": 16,
    "offset": 168,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "display_hints": [
                {
                  "type": "add",
                  "value": 1,
                },
              ],
              "max_value": 255,
              "min_value": 0,
              "name": "c",
              "size": 8,
              "type": "uint",
            },
          ],
          "prefix": "D3",
          "tlb": "#D3 cc:uint8",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "cell_parse",
          "description": "Loads an unsigned \`cc+1\`-bit integer \`x\` from _Slice_ \`s\`.",
          "fift": "[cc+1] LDU",
          "fift_examples": [],
          "gas": "26",
          "opcode": "D3cc",
          "stack": "s - x s'",
        },
        "mnemonic": "LDU",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "s",
                "type": "simple",
                "value_types": [
                  "Slice",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [
              {
                "name": "x",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
              {
                "name": "s2",
                "type": "simple",
                "value_types": [
                  "Slice",
                ],
              },
            ],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "display_hints": [
              {
                "type": "add",
                "value": 1,
              },
            ],
            "max_value": 255,
            "min_value": 0,
            "name": "c",
            "size": 8,
            "type": "uint",
          },
          "type": "numeric",
          "value": 255,
        },
      ],
    },
  },
  {
    "hash": "a0cfc2c48aee16a271f2cfc0b7382d81756cecb1017d077faaab3bb602f6868c",
    "length": 8,
    "offset": 184,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [],
          "prefix": "D1",
          "tlb": "#D1",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "cell_parse",
          "description": "Removes a _Slice_ \`s\` from the stack, and throws an exception if it is not empty.",
          "fift": "ENDS",
          "fift_examples": [],
          "gas": "18/68",
          "opcode": "D1",
          "stack": "s - ",
        },
        "mnemonic": "ENDS",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "s",
                "type": "simple",
                "value_types": [
                  "Slice",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [],
          },
        },
      },
      "operands": [],
    },
  },
  {
    "hash": "a0cfc2c48aee16a271f2cfc0b7382d81756cecb1017d077faaab3bb602f6868c",
    "length": 16,
    "offset": 192,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "display_hints": [
                {
                  "type": "stack",
                },
              ],
              "max_value": 15,
              "min_value": 0,
              "name": "i",
              "size": 4,
              "type": "uint",
            },
            {
              "display_hints": [
                {
                  "type": "stack",
                },
              ],
              "max_value": 15,
              "min_value": 0,
              "name": "j",
              "size": 4,
              "type": "uint",
            },
          ],
          "prefix": "51",
          "tlb": "#51 i:uint4 j:uint4",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "stack_complex",
          "description": "Equivalent to \`s[i] XCHG0\` \`s[j] PUSH\`.",
          "fift": "s[i] s[j] XCPU",
          "fift_examples": [],
          "gas": "26",
          "opcode": "51ij",
          "stack": "",
        },
        "mnemonic": "XCPU",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
          },
          "outputs": {
            "registers": [],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "display_hints": [
              {
                "type": "stack",
              },
            ],
            "max_value": 15,
            "min_value": 0,
            "name": "i",
            "size": 4,
            "type": "uint",
          },
          "type": "numeric",
          "value": 1,
        },
        {
          "definition": {
            "display_hints": [
              {
                "type": "stack",
              },
            ],
            "max_value": 15,
            "min_value": 0,
            "name": "j",
            "size": 4,
            "type": "uint",
          },
          "type": "numeric",
          "value": 2,
        },
      ],
    },
  },
  {
    "hash": "a0cfc2c48aee16a271f2cfc0b7382d81756cecb1017d077faaab3bb602f6868c",
    "length": 8,
    "offset": 208,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [],
          "prefix": "BA",
          "tlb": "#BA",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "compare_int",
          "description": "Returns \`-1\` if \`x=y\`, \`0\` otherwise.",
          "fift": "EQUAL",
          "fift_examples": [],
          "gas": "18",
          "opcode": "BA",
          "stack": "x y - x=y",
        },
        "mnemonic": "EQUAL",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "x",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
              {
                "name": "y",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [
              {
                "name": "result",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
            ],
          },
        },
      },
      "operands": [],
    },
  },
  {
    "hash": "a0cfc2c48aee16a271f2cfc0b7382d81756cecb1017d077faaab3bb602f6868c",
    "length": 16,
    "offset": 216,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "display_hints": [],
              "max_value": 63,
              "min_value": 0,
              "name": "n",
              "size": 6,
              "type": "uint",
            },
          ],
          "prefix": "F2A_",
          "tlb": "#F2A_ n:uint6",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "exceptions",
          "description": "Throws exception \`0 <= n <= 63\` with parameter zero only if integer \`f=0\`.",
          "fift": "[n] THROWIFNOT",
          "fift_examples": [],
          "gas": "26/76",
          "opcode": "F2A_n",
          "stack": "f - ",
        },
        "mnemonic": "THROWIFNOT_SHORT",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "f",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "display_hints": [],
            "max_value": 63,
            "min_value": 0,
            "name": "n",
            "size": 6,
            "type": "uint",
          },
          "type": "numeric",
          "value": 33,
        },
      ],
    },
  },
  {
    "hash": "a0cfc2c48aee16a271f2cfc0b7382d81756cecb1017d077faaab3bb602f6868c",
    "length": 8,
    "offset": 232,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "display_hints": [
                {
                  "type": "stack",
                },
              ],
              "max_value": 15,
              "min_value": 0,
              "name": "i",
              "size": 4,
              "type": "uint",
            },
          ],
          "prefix": "2",
          "tlb": "#2 i:uint4",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "stack_basic",
          "description": "Pushes a copy of the old \`s[i]\` into the stack.",
          "fift": "s[i] PUSH",
          "fift_examples": [],
          "gas": "18",
          "opcode": "2i",
          "stack": "",
        },
        "mnemonic": "PUSH",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
          },
          "outputs": {
            "registers": [],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "display_hints": [
              {
                "type": "stack",
              },
            ],
            "max_value": 15,
            "min_value": 0,
            "name": "i",
            "size": 4,
            "type": "uint",
          },
          "type": "numeric",
          "value": 2,
        },
      ],
    },
  },
  {
    "hash": "a0cfc2c48aee16a271f2cfc0b7382d81756cecb1017d077faaab3bb602f6868c",
    "length": 16,
    "offset": 240,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [],
          "prefix": "F901",
          "tlb": "#F901",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "app_crypto",
          "description": "Computes the hash of a _Slice_ \`s\` and returns it as a 256-bit unsigned integer \`x\`. The result is the same as if an ordinary cell containing only data and references from \`s\` had been created and its hash computed by \`HASHCU\`.",
          "fift": "HASHSU",
          "fift_examples": [],
          "gas": "526",
          "opcode": "F901",
          "stack": "s - x",
        },
        "mnemonic": "HASHSU",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "s",
                "type": "simple",
                "value_types": [
                  "Slice",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [
              {
                "name": "x",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
            ],
          },
        },
      },
      "operands": [],
    },
  },
  {
    "hash": "a0cfc2c48aee16a271f2cfc0b7382d81756cecb1017d077faaab3bb602f6868c",
    "length": 24,
    "offset": 256,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "display_hints": [
                {
                  "type": "stack",
                },
              ],
              "max_value": 15,
              "min_value": 0,
              "name": "i",
              "size": 4,
              "type": "uint",
            },
            {
              "display_hints": [
                {
                  "type": "stack",
                },
              ],
              "max_value": 15,
              "min_value": 0,
              "name": "j",
              "size": 4,
              "type": "uint",
            },
            {
              "display_hints": [
                {
                  "type": "stack",
                },
              ],
              "max_value": 15,
              "min_value": 0,
              "name": "k",
              "size": 4,
              "type": "uint",
            },
          ],
          "prefix": "541",
          "tlb": "#541 i:uint4 j:uint4 k:uint4",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "stack_complex",
          "description": "Equivalent to \`s[i] s[j] XCHG2\` \`s[k] PUSH\`.",
          "fift": "s[i] s[j] s[k] XC2PU",
          "fift_examples": [],
          "gas": "34",
          "opcode": "541ijk",
          "stack": "",
        },
        "mnemonic": "XC2PU",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
          },
          "outputs": {
            "registers": [],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "display_hints": [
              {
                "type": "stack",
              },
            ],
            "max_value": 15,
            "min_value": 0,
            "name": "i",
            "size": 4,
            "type": "uint",
          },
          "type": "numeric",
          "value": 0,
        },
        {
          "definition": {
            "display_hints": [
              {
                "type": "stack",
              },
            ],
            "max_value": 15,
            "min_value": 0,
            "name": "j",
            "size": 4,
            "type": "uint",
          },
          "type": "numeric",
          "value": 4,
        },
        {
          "definition": {
            "display_hints": [
              {
                "type": "stack",
              },
            ],
            "max_value": 15,
            "min_value": 0,
            "name": "k",
            "size": 4,
            "type": "uint",
          },
          "type": "numeric",
          "value": 4,
        },
      ],
    },
  },
  {
    "hash": "a0cfc2c48aee16a271f2cfc0b7382d81756cecb1017d077faaab3bb602f6868c",
    "length": 16,
    "offset": 280,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [],
          "prefix": "F910",
          "tlb": "#F910",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "app_crypto",
          "description": "Checks the Ed25519-signature \`s\` of a hash \`h\` (a 256-bit unsigned integer, usually computed as the hash of some data) using public key \`k\` (also represented by a 256-bit unsigned integer).
The signature \`s\` must be a _Slice_ containing at least 512 data bits; only the first 512 bits are used. The result is \`-1\` if the signature is valid, \`0\` otherwise.
Notice that \`CHKSIGNU\` is equivalent to \`ROT\` \`NEWC\` \`256 STU\` \`ENDC\` \`ROTREV\` \`CHKSIGNS\`, i.e., to \`CHKSIGNS\` with the first argument \`d\` set to 256-bit _Slice_ containing \`h\`. Therefore, if \`h\` is computed as the hash of some data, these data are hashed _twice_, the second hashing occurring inside \`CHKSIGNS\`.",
          "fift": "CHKSIGNU",
          "fift_examples": [],
          "gas": "26",
          "opcode": "F910",
          "stack": "h s k - ?",
        },
        "mnemonic": "CHKSIGNU",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "h",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
              {
                "name": "s",
                "type": "simple",
                "value_types": [
                  "Slice",
                ],
              },
              {
                "name": "k",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [
              {
                "name": "result",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
            ],
          },
        },
      },
      "operands": [],
    },
  },
  {
    "hash": "a0cfc2c48aee16a271f2cfc0b7382d81756cecb1017d077faaab3bb602f6868c",
    "length": 16,
    "offset": 296,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "display_hints": [],
              "max_value": 63,
              "min_value": 0,
              "name": "n",
              "size": 6,
              "type": "uint",
            },
          ],
          "prefix": "F2A_",
          "tlb": "#F2A_ n:uint6",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "exceptions",
          "description": "Throws exception \`0 <= n <= 63\` with parameter zero only if integer \`f=0\`.",
          "fift": "[n] THROWIFNOT",
          "fift_examples": [],
          "gas": "26/76",
          "opcode": "F2A_n",
          "stack": "f - ",
        },
        "mnemonic": "THROWIFNOT_SHORT",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "f",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "display_hints": [],
            "max_value": 63,
            "min_value": 0,
            "name": "n",
            "size": 6,
            "type": "uint",
          },
          "type": "numeric",
          "value": 34,
        },
      ],
    },
  },
  {
    "hash": "a0cfc2c48aee16a271f2cfc0b7382d81756cecb1017d077faaab3bb602f6868c",
    "length": 16,
    "offset": 312,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [],
          "prefix": "F800",
          "tlb": "#F800",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "app_gas",
          "description": "Sets current gas limit \`g_l\` to its maximal allowed value \`g_m\`, and resets the gas credit \`g_c\` to zero, decreasing the value of \`g_r\` by \`g_c\` in the process.
In other words, the current smart contract agrees to buy some gas to finish the current transaction. This action is required to process external messages, which bring no value (hence no gas) with themselves.",
          "fift": "ACCEPT",
          "fift_examples": [],
          "gas": "26",
          "opcode": "F800",
          "stack": "-",
        },
        "mnemonic": "ACCEPT",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [
              {
                "name": "gas",
                "type": "special",
              },
            ],
            "stack": [],
          },
          "outputs": {
            "registers": [
              {
                "name": "gas",
                "type": "special",
              },
            ],
            "stack": [],
          },
        },
      },
      "operands": [],
    },
  },
  {
    "hash": "a0cfc2c48aee16a271f2cfc0b7382d81756cecb1017d077faaab3bb602f6868c",
    "length": 8,
    "offset": 328,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "display_hints": [
                {
                  "type": "stack",
                },
              ],
              "max_value": 15,
              "min_value": 1,
              "name": "i",
              "size": 4,
              "type": "uint",
            },
          ],
          "operands_range_check": {
            "from": 1,
            "length": 4,
            "to": 15,
          },
          "prefix": "0",
          "tlb": "#0 i:(## 4) {1 <= i}",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "stack_basic",
          "description": "Interchanges \`s0\` with \`s[i]\`, \`1 <= i <= 15\`.",
          "fift": "s[i] XCHG0",
          "fift_examples": [],
          "gas": "18",
          "opcode": "0i",
          "stack": "",
        },
        "mnemonic": "XCHG_0I",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
          },
          "outputs": {
            "registers": [],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "display_hints": [
              {
                "type": "stack",
              },
            ],
            "max_value": 15,
            "min_value": 1,
            "name": "i",
            "size": 4,
            "type": "uint",
          },
          "type": "numeric",
          "value": 1,
        },
      ],
    },
  },
  {
    "hash": "a0cfc2c48aee16a271f2cfc0b7382d81756cecb1017d077faaab3bb602f6868c",
    "length": 16,
    "offset": 336,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "display_hints": [
                {
                  "type": "add",
                  "value": 1,
                },
              ],
              "max_value": 255,
              "min_value": 0,
              "name": "c",
              "size": 8,
              "type": "uint",
            },
          ],
          "prefix": "D3",
          "tlb": "#D3 cc:uint8",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "cell_parse",
          "description": "Loads an unsigned \`cc+1\`-bit integer \`x\` from _Slice_ \`s\`.",
          "fift": "[cc+1] LDU",
          "fift_examples": [],
          "gas": "26",
          "opcode": "D3cc",
          "stack": "s - x s'",
        },
        "mnemonic": "LDU",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "s",
                "type": "simple",
                "value_types": [
                  "Slice",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [
              {
                "name": "x",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
              {
                "name": "s2",
                "type": "simple",
                "value_types": [
                  "Slice",
                ],
              },
            ],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "display_hints": [
              {
                "type": "add",
                "value": 1,
              },
            ],
            "max_value": 255,
            "min_value": 0,
            "name": "c",
            "size": 8,
            "type": "uint",
          },
          "type": "numeric",
          "value": 31,
        },
      ],
    },
  },
  {
    "hash": "a0cfc2c48aee16a271f2cfc0b7382d81756cecb1017d077faaab3bb602f6868c",
    "length": 8,
    "offset": 352,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "display_hints": [
                {
                  "type": "stack",
                },
              ],
              "max_value": 15,
              "min_value": 0,
              "name": "i",
              "size": 4,
              "type": "uint",
            },
          ],
          "prefix": "3",
          "tlb": "#3 i:uint4",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "stack_basic",
          "description": "Pops the old \`s0\` value into the old \`s[i]\`.",
          "fift": "s[i] POP",
          "fift_examples": [],
          "gas": "18",
          "opcode": "3i",
          "stack": "",
        },
        "mnemonic": "POP",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
          },
          "outputs": {
            "registers": [],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "display_hints": [
              {
                "type": "stack",
              },
            ],
            "max_value": 15,
            "min_value": 0,
            "name": "i",
            "size": 4,
            "type": "uint",
          },
          "type": "numeric",
          "value": 1,
        },
      ],
    },
  },
  {
    "hash": "a0cfc2c48aee16a271f2cfc0b7382d81756cecb1017d077faaab3bb602f6868c",
    "length": 8,
    "offset": 360,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "display_hints": [
                {
                  "type": "stack",
                },
              ],
              "max_value": 15,
              "min_value": 0,
              "name": "i",
              "size": 4,
              "type": "uint",
            },
          ],
          "prefix": "2",
          "tlb": "#2 i:uint4",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "stack_basic",
          "description": "Pushes a copy of the old \`s[i]\` into the stack.",
          "fift": "s[i] PUSH",
          "fift_examples": [],
          "gas": "18",
          "opcode": "2i",
          "stack": "",
        },
        "mnemonic": "PUSH",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
          },
          "outputs": {
            "registers": [],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "display_hints": [
              {
                "type": "stack",
              },
            ],
            "max_value": 15,
            "min_value": 0,
            "name": "i",
            "size": 4,
            "type": "uint",
          },
          "type": "numeric",
          "value": 0,
        },
      ],
    },
  },
  {
    "hash": "a0cfc2c48aee16a271f2cfc0b7382d81756cecb1017d077faaab3bb602f6868c",
    "length": 16,
    "offset": 368,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [],
          "prefix": "D74A",
          "tlb": "#D74A",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "cell_parse",
          "description": "Returns the number of references in _Slice_ \`s\`.",
          "fift": "SREFS",
          "fift_examples": [],
          "gas": "26",
          "opcode": "D74A",
          "stack": "s - r",
        },
        "mnemonic": "SREFS",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "s",
                "type": "simple",
                "value_types": [
                  "Slice",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [
              {
                "name": "r",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
            ],
          },
        },
      },
      "operands": [],
    },
  },
  {
    "hash": "a0cfc2c48aee16a271f2cfc0b7382d81756cecb1017d077faaab3bb602f6868c",
    "length": 56,
    "offset": 384,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "bits_length_var_size": 4,
              "bits_padding": 0,
              "completion_tag": false,
              "display_hints": [
                {
                  "type": "continuation",
                },
              ],
              "max_bits": 120,
              "max_refs": 0,
              "min_bits": 0,
              "min_refs": 0,
              "name": "s",
              "type": "subslice",
            },
          ],
          "prefix": "9",
          "tlb": "#9 x:(## 4) ssss:((8 * x) * Bit)",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "const_data",
          "description": "Pushes a continuation made from \`builder\`.
_Details:_ Pushes an \`x\`-byte continuation for \`0 <= x <= 15\`.",
          "fift": "[builder] PUSHCONT
[builder] CONT",
          "fift_examples": [
            {
              "description": "Pushes a continuation with code \`code\`. Note that the assembler can replace \`PUSHCONT\` with \`PUSHREFCONT\` in certain situations (e.g. if there's not enough space in the current continuation).",
              "fift": "<{ code }> PUSHCONT <{ code }> CONT CONT:<{ code }>",
            },
          ],
          "gas": "18",
          "opcode": "9xccc",
          "stack": "- c",
        },
        "mnemonic": "PUSHCONT_SHORT",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [],
          },
          "outputs": {
            "registers": [],
            "stack": [
              {
                "name": "c",
                "type": "simple",
                "value_types": [
                  "Continuation",
                ],
              },
            ],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "bits_length_var_size": 4,
            "bits_padding": 0,
            "completion_tag": false,
            "display_hints": [
              {
                "type": "continuation",
              },
            ],
            "max_bits": 120,
            "max_refs": 0,
            "min_bits": 0,
            "min_refs": 0,
            "name": "s",
            "type": "subslice",
          },
          "limitBits": 48,
          "limitRefs": 0,
          "offsetBits": 392,
          "offsetRefs": 0,
          "source": Cell {
            "_depths": [
              0,
              0,
              0,
              0,
            ],
            "_hashes": [
              {
                "data": [
                  160,
                  207,
                  194,
                  196,
                  138,
                  238,
                  22,
                  162,
                  113,
                  242,
                  207,
                  192,
                  183,
                  56,
                  45,
                  129,
                  117,
                  108,
                  236,
                  177,
                  1,
                  125,
                  7,
                  127,
                  170,
                  171,
                  59,
                  182,
                  2,
                  246,
                  134,
                  140,
                ],
                "type": "Buffer",
              },
              {
                "data": [
                  160,
                  207,
                  194,
                  196,
                  138,
                  238,
                  22,
                  162,
                  113,
                  242,
                  207,
                  192,
                  183,
                  56,
                  45,
                  129,
                  117,
                  108,
                  236,
                  177,
                  1,
                  125,
                  7,
                  127,
                  170,
                  171,
                  59,
                  182,
                  2,
                  246,
                  134,
                  140,
                ],
                "type": "Buffer",
              },
              {
                "data": [
                  160,
                  207,
                  194,
                  196,
                  138,
                  238,
                  22,
                  162,
                  113,
                  242,
                  207,
                  192,
                  183,
                  56,
                  45,
                  129,
                  117,
                  108,
                  236,
                  177,
                  1,
                  125,
                  7,
                  127,
                  170,
                  171,
                  59,
                  182,
                  2,
                  246,
                  134,
                  140,
                ],
                "type": "Buffer",
              },
              {
                "data": [
                  160,
                  207,
                  194,
                  196,
                  138,
                  238,
                  22,
                  162,
                  113,
                  242,
                  207,
                  192,
                  183,
                  56,
                  45,
                  129,
                  117,
                  108,
                  236,
                  177,
                  1,
                  125,
                  7,
                  127,
                  170,
                  171,
                  59,
                  182,
                  2,
                  246,
                  134,
                  140,
                ],
                "type": "Buffer",
              },
            ],
            "beginParse": [Function],
            "bits": BitString {
              "_data": {
                "data": [
                  0,
                  132,
                  255,
                  0,
                  32,
                  221,
                  164,
                  242,
                  96,
                  129,
                  2,
                  0,
                  215,
                  24,
                  32,
                  215,
                  11,
                  31,
                  237,
                  68,
                  208,
                  211,
                  31,
                  211,
                  255,
                  209,
                  81,
                  18,
                  186,
                  242,
                  161,
                  34,
                  249,
                  1,
                  84,
                  16,
                  68,
                  249,
                  16,
                  242,
                  162,
                  248,
                  0,
                  1,
                  211,
                  31,
                  49,
                  32,
                  215,
                  74,
                  150,
                  211,
                  7,
                  212,
                  2,
                  251,
                  0,
                  222,
                  209,
                  164,
                  200,
                  203,
                  31,
                  203,
                  255,
                  201,
                  237,
                  84,
                ],
                "type": "Buffer",
              },
              "_length": 528,
              "_offset": 16,
              Symbol(nodejs.util.inspect.custom): [Function],
            },
            "depth": [Function],
            "equals": [Function],
            "hash": [Function],
            "level": [Function],
            "mask": LevelMask {
              "_hashCount": 1,
              "_hashIndex": 0,
              "_mask": 0,
            },
            "refs": [],
            "type": -1,
            Symbol(nodejs.util.inspect.custom): [Function],
          },
          "type": "subslice",
          "value": Cell {
            "_depths": [
              0,
              0,
              0,
              0,
            ],
            "_hashes": [
              {
                "data": [
                  201,
                  205,
                  146,
                  164,
                  137,
                  234,
                  45,
                  255,
                  227,
                  41,
                  235,
                  253,
                  131,
                  99,
                  251,
                  105,
                  11,
                  159,
                  159,
                  102,
                  189,
                  83,
                  186,
                  82,
                  108,
                  134,
                  46,
                  238,
                  227,
                  84,
                  192,
                  24,
                ],
                "type": "Buffer",
              },
              {
                "data": [
                  201,
                  205,
                  146,
                  164,
                  137,
                  234,
                  45,
                  255,
                  227,
                  41,
                  235,
                  253,
                  131,
                  99,
                  251,
                  105,
                  11,
                  159,
                  159,
                  102,
                  189,
                  83,
                  186,
                  82,
                  108,
                  134,
                  46,
                  238,
                  227,
                  84,
                  192,
                  24,
                ],
                "type": "Buffer",
              },
              {
                "data": [
                  201,
                  205,
                  146,
                  164,
                  137,
                  234,
                  45,
                  255,
                  227,
                  41,
                  235,
                  253,
                  131,
                  99,
                  251,
                  105,
                  11,
                  159,
                  159,
                  102,
                  189,
                  83,
                  186,
                  82,
                  108,
                  134,
                  46,
                  238,
                  227,
                  84,
                  192,
                  24,
                ],
                "type": "Buffer",
              },
              {
                "data": [
                  201,
                  205,
                  146,
                  164,
                  137,
                  234,
                  45,
                  255,
                  227,
                  41,
                  235,
                  253,
                  131,
                  99,
                  251,
                  105,
                  11,
                  159,
                  159,
                  102,
                  189,
                  83,
                  186,
                  82,
                  108,
                  134,
                  46,
                  238,
                  227,
                  84,
                  192,
                  24,
                ],
                "type": "Buffer",
              },
            ],
            "beginParse": [Function],
            "bits": BitString {
              "_data": {
                "data": [
                  211,
                  7,
                  212,
                  2,
                  251,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                ],
                "type": "Buffer",
              },
              "_length": 48,
              "_offset": 0,
              Symbol(nodejs.util.inspect.custom): [Function],
            },
            "depth": [Function],
            "equals": [Function],
            "hash": [Function],
            "level": [Function],
            "mask": LevelMask {
              "_hashCount": 1,
              "_hashIndex": 0,
              "_mask": 0,
            },
            "refs": [],
            "type": -1,
            Symbol(nodejs.util.inspect.custom): [Function],
          },
        },
      ],
    },
  },
  {
    "hash": "a0cfc2c48aee16a271f2cfc0b7382d81756cecb1017d077faaab3bb602f6868c",
    "length": 8,
    "offset": 440,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [],
          "prefix": "DE",
          "tlb": "#DE",
        },
        "control_flow": {
          "branches": [
            {
              "save": {
                "c0": {
                  "save": {
                    "c0": {
                      "index": 0,
                      "type": "register",
                    },
                  },
                  "type": "cc",
                },
              },
              "type": "variable",
              "var_name": "c",
            },
          ],
          "nobranch": true,
        },
        "doc": {
          "category": "cont_conditional",
          "description": "Performs \`EXECUTE\` for \`c\` (i.e., _executes_ \`c\`), but only if integer \`f\` is non-zero. Otherwise simply discards both values.",
          "fift": "IF",
          "fift_examples": [
            {
              "description": "Equivalent to \`<{ code }> CONT\` \`IF\`.",
              "fift": "IF:<{ code }> <{ code }>IF",
            },
          ],
          "gas": "18",
          "opcode": "DE",
          "stack": "f c - ",
        },
        "mnemonic": "IF",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "f",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
              {
                "name": "c",
                "type": "simple",
                "value_types": [
                  "Continuation",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [],
          },
        },
      },
      "operands": [],
    },
  },
  {
    "hash": "a0cfc2c48aee16a271f2cfc0b7382d81756cecb1017d077faaab3bb602f6868c",
    "length": 8,
    "offset": 448,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [],
          "prefix": "D1",
          "tlb": "#D1",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "cell_parse",
          "description": "Removes a _Slice_ \`s\` from the stack, and throws an exception if it is not empty.",
          "fift": "ENDS",
          "fift_examples": [],
          "gas": "18/68",
          "opcode": "D1",
          "stack": "s - ",
        },
        "mnemonic": "ENDS",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "s",
                "type": "simple",
                "value_types": [
                  "Slice",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [],
          },
        },
      },
      "operands": [],
    },
  },
  {
    "hash": "a0cfc2c48aee16a271f2cfc0b7382d81756cecb1017d077faaab3bb602f6868c",
    "length": 8,
    "offset": 456,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [],
          "prefix": "A4",
          "tlb": "#A4",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "arithm_basic",
          "description": "Equivalent to \`1 ADDCONST\`.",
          "fift": "INC",
          "fift_examples": [],
          "gas": "18",
          "opcode": "A4",
          "stack": "x - x+1",
        },
        "mnemonic": "INC",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "x",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [
              {
                "name": "result",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
            ],
          },
        },
      },
      "operands": [],
    },
  },
  {
    "hash": "a0cfc2c48aee16a271f2cfc0b7382d81756cecb1017d077faaab3bb602f6868c",
    "length": 8,
    "offset": 464,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [],
          "prefix": "C8",
          "tlb": "#C8",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "cell_build",
          "description": "Creates a new empty _Builder_.",
          "fift": "NEWC",
          "fift_examples": [],
          "gas": "18",
          "opcode": "C8",
          "stack": "- b",
        },
        "mnemonic": "NEWC",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [],
          },
          "outputs": {
            "registers": [],
            "stack": [
              {
                "name": "b",
                "type": "simple",
                "value_types": [
                  "Builder",
                ],
              },
            ],
          },
        },
      },
      "operands": [],
    },
  },
  {
    "hash": "a0cfc2c48aee16a271f2cfc0b7382d81756cecb1017d077faaab3bb602f6868c",
    "length": 16,
    "offset": 472,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "display_hints": [
                {
                  "type": "add",
                  "value": 1,
                },
              ],
              "max_value": 255,
              "min_value": 0,
              "name": "c",
              "size": 8,
              "type": "uint",
            },
          ],
          "prefix": "CB",
          "tlb": "#CB cc:uint8",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "cell_build",
          "description": "Stores an unsigned \`cc+1\`-bit integer \`x\` into _Builder_ \`b\`. In all other respects it is similar to \`STI\`.",
          "fift": "[cc+1] STU",
          "fift_examples": [],
          "gas": "26",
          "opcode": "CBcc",
          "stack": "x b - b'",
        },
        "mnemonic": "STU",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "x",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
              {
                "name": "b",
                "type": "simple",
                "value_types": [
                  "Builder",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [
              {
                "name": "b2",
                "type": "simple",
                "value_types": [
                  "Builder",
                ],
              },
            ],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "display_hints": [
              {
                "type": "add",
                "value": 1,
              },
            ],
            "max_value": 255,
            "min_value": 0,
            "name": "c",
            "size": 8,
            "type": "uint",
          },
          "type": "numeric",
          "value": 31,
        },
      ],
    },
  },
  {
    "hash": "a0cfc2c48aee16a271f2cfc0b7382d81756cecb1017d077faaab3bb602f6868c",
    "length": 16,
    "offset": 488,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "display_hints": [
                {
                  "type": "add",
                  "value": 1,
                },
              ],
              "max_value": 255,
              "min_value": 0,
              "name": "c",
              "size": 8,
              "type": "uint",
            },
          ],
          "prefix": "CB",
          "tlb": "#CB cc:uint8",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "cell_build",
          "description": "Stores an unsigned \`cc+1\`-bit integer \`x\` into _Builder_ \`b\`. In all other respects it is similar to \`STI\`.",
          "fift": "[cc+1] STU",
          "fift_examples": [],
          "gas": "26",
          "opcode": "CBcc",
          "stack": "x b - b'",
        },
        "mnemonic": "STU",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "x",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
              {
                "name": "b",
                "type": "simple",
                "value_types": [
                  "Builder",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [
              {
                "name": "b2",
                "type": "simple",
                "value_types": [
                  "Builder",
                ],
              },
            ],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "display_hints": [
              {
                "type": "add",
                "value": 1,
              },
            ],
            "max_value": 255,
            "min_value": 0,
            "name": "c",
            "size": 8,
            "type": "uint",
          },
          "type": "numeric",
          "value": 255,
        },
      ],
    },
  },
  {
    "hash": "a0cfc2c48aee16a271f2cfc0b7382d81756cecb1017d077faaab3bb602f6868c",
    "length": 8,
    "offset": 504,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [],
          "prefix": "C9",
          "tlb": "#C9",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "cell_build",
          "description": "Converts a _Builder_ into an ordinary _Cell_.",
          "fift": "ENDC",
          "fift_examples": [],
          "gas": "518",
          "opcode": "C9",
          "stack": "b - c",
        },
        "mnemonic": "ENDC",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "b",
                "type": "simple",
                "value_types": [
                  "Builder",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [
              {
                "name": "c",
                "type": "simple",
                "value_types": [
                  "Cell",
                ],
              },
            ],
          },
        },
      },
      "operands": [],
    },
  },
  {
    "hash": "a0cfc2c48aee16a271f2cfc0b7382d81756cecb1017d077faaab3bb602f6868c",
    "length": 16,
    "offset": 512,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "display_hints": [
                {
                  "type": "register",
                },
              ],
              "max_value": 15,
              "min_value": 0,
              "name": "i",
              "size": 4,
              "type": "uint",
            },
          ],
          "prefix": "ED5",
          "tlb": "#ED5 i:uint4",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "cont_registers",
          "description": "Pops a value \`x\` from the stack and stores it into control register \`c(i)\`, if supported in the current codepage. Notice that if a control register accepts only values of a specific type, a type-checking exception may occur.",
          "fift": "c[i] POPCTR
c[i] POP",
          "fift_examples": [],
          "gas": "26",
          "opcode": "ED5i",
          "stack": "x - ",
        },
        "mnemonic": "POPCTR",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "x",
                "type": "simple",
              },
            ],
          },
          "outputs": {
            "registers": [
              {
                "type": "variable",
                "var_name": "i",
              },
            ],
            "stack": [],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "display_hints": [
              {
                "type": "register",
              },
            ],
            "max_value": 15,
            "min_value": 0,
            "name": "i",
            "size": 4,
            "type": "uint",
          },
          "type": "numeric",
          "value": 4,
        },
      ],
    },
  },
]
`;

exports[`decompiler should decompile a simple contract 2`] = `
[
  {
    "hash": "d4902fcc9fad74698fa8e353220a68da0dcf72e32bcb2eb9ee04217c17d3062c",
    "length": 16,
    "offset": 0,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "display_hints": [],
              "max_value": 239,
              "min_value": 0,
              "name": "n",
              "size": 8,
              "type": "uint",
            },
          ],
          "operands_range_check": {
            "from": 0,
            "length": 8,
            "to": 239,
          },
          "prefix": "FF",
          "tlb": "#FF nn:(#<= 239)",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "codepage",
          "description": "Selects TVM codepage \`0 <= nn < 240\`. If the codepage is not supported, throws an invalid opcode exception.",
          "fift": "[nn] SETCP",
          "fift_examples": [],
          "gas": "26",
          "opcode": "FFnn",
          "stack": "-",
        },
        "mnemonic": "SETCP",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [],
          },
          "outputs": {
            "registers": [],
            "stack": [],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "display_hints": [],
            "max_value": 239,
            "min_value": 0,
            "name": "n",
            "size": 8,
            "type": "uint",
          },
          "type": "numeric",
          "value": 0,
        },
      ],
    },
  },
  {
    "hash": "d4902fcc9fad74698fa8e353220a68da0dcf72e32bcb2eb9ee04217c17d3062c",
    "length": 8,
    "offset": 16,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "display_hints": [
                {
                  "type": "stack",
                },
              ],
              "max_value": 15,
              "min_value": 0,
              "name": "i",
              "size": 4,
              "type": "uint",
            },
          ],
          "prefix": "2",
          "tlb": "#2 i:uint4",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "stack_basic",
          "description": "Pushes a copy of the old \`s[i]\` into the stack.",
          "fift": "s[i] PUSH",
          "fift_examples": [],
          "gas": "18",
          "opcode": "2i",
          "stack": "",
        },
        "mnemonic": "PUSH",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
          },
          "outputs": {
            "registers": [],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "display_hints": [
              {
                "type": "stack",
              },
            ],
            "max_value": 15,
            "min_value": 0,
            "name": "i",
            "size": 4,
            "type": "uint",
          },
          "type": "numeric",
          "value": 0,
        },
      ],
    },
  },
  {
    "hash": "d4902fcc9fad74698fa8e353220a68da0dcf72e32bcb2eb9ee04217c17d3062c",
    "length": 8,
    "offset": 24,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [],
          "prefix": "DD",
          "tlb": "#DD",
        },
        "control_flow": {
          "branches": [
            {
              "index": 0,
              "type": "register",
            },
          ],
          "nobranch": true,
        },
        "doc": {
          "category": "cont_conditional",
          "description": "Performs a \`RET\`, but only if integer \`f\` is zero.",
          "fift": "IFNOTRET
IF:",
          "fift_examples": [],
          "gas": "18",
          "opcode": "DD",
          "stack": "f - ",
        },
        "mnemonic": "IFNOTRET",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "f",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [],
          },
        },
      },
      "operands": [],
    },
  },
  {
    "hash": "d4902fcc9fad74698fa8e353220a68da0dcf72e32bcb2eb9ee04217c17d3062c",
    "length": 8,
    "offset": 32,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "display_hints": [
                {
                  "type": "stack",
                },
              ],
              "max_value": 15,
              "min_value": 0,
              "name": "i",
              "size": 4,
              "type": "uint",
            },
          ],
          "prefix": "2",
          "tlb": "#2 i:uint4",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "stack_basic",
          "description": "Pushes a copy of the old \`s[i]\` into the stack.",
          "fift": "s[i] PUSH",
          "fift_examples": [],
          "gas": "18",
          "opcode": "2i",
          "stack": "",
        },
        "mnemonic": "PUSH",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
          },
          "outputs": {
            "registers": [],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "display_hints": [
              {
                "type": "stack",
              },
            ],
            "max_value": 15,
            "min_value": 0,
            "name": "i",
            "size": 4,
            "type": "uint",
          },
          "type": "numeric",
          "value": 0,
        },
      ],
    },
  },
  {
    "hash": "d4902fcc9fad74698fa8e353220a68da0dcf72e32bcb2eb9ee04217c17d3062c",
    "length": 32,
    "offset": 40,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "name": "x",
              "type": "pushint_long",
            },
          ],
          "operands_range_check": {
            "from": 0,
            "length": 5,
            "to": 30,
          },
          "prefix": "82",
          "tlb": "#82 l:(## 5) xxx:(int (8 * l + 19))",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "const_int",
          "description": "Pushes integer \`xxx\`.
_Details:_ 5-bit \`0 <= l <= 30\` determines the length \`n=8l+19\` of signed big-endian integer \`xxx\`.
The total length of this instruction is \`l+4\` bytes or \`n+13=8l+32\` bits.",
          "fift": "[xxx] PUSHINT
[xxx] INT",
          "fift_examples": [],
          "gas": "23",
          "opcode": "82lxxx",
          "stack": "- xxx",
        },
        "mnemonic": "PUSHINT_LONG",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [],
          },
          "outputs": {
            "registers": [],
            "stack": [
              {
                "name": "x",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
            ],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "name": "x",
            "type": "pushint_long",
          },
          "type": "bigint",
          "value": 85143n,
        },
      ],
    },
  },
  {
    "hash": "d4902fcc9fad74698fa8e353220a68da0dcf72e32bcb2eb9ee04217c17d3062c",
    "length": 8,
    "offset": 72,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [],
          "prefix": "BA",
          "tlb": "#BA",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "compare_int",
          "description": "Returns \`-1\` if \`x=y\`, \`0\` otherwise.",
          "fift": "EQUAL",
          "fift_examples": [],
          "gas": "18",
          "opcode": "BA",
          "stack": "x y - x=y",
        },
        "mnemonic": "EQUAL",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "x",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
              {
                "name": "y",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [
              {
                "name": "result",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
            ],
          },
        },
      },
      "operands": [],
    },
  },
  {
    "hash": "d4902fcc9fad74698fa8e353220a68da0dcf72e32bcb2eb9ee04217c17d3062c",
    "length": 64,
    "offset": 80,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "bits_length_var_size": 4,
              "bits_padding": 0,
              "completion_tag": false,
              "display_hints": [
                {
                  "type": "continuation",
                },
              ],
              "max_bits": 120,
              "max_refs": 0,
              "min_bits": 0,
              "min_refs": 0,
              "name": "s",
              "type": "subslice",
            },
          ],
          "prefix": "9",
          "tlb": "#9 x:(## 4) ssss:((8 * x) * Bit)",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "const_data",
          "description": "Pushes a continuation made from \`builder\`.
_Details:_ Pushes an \`x\`-byte continuation for \`0 <= x <= 15\`.",
          "fift": "[builder] PUSHCONT
[builder] CONT",
          "fift_examples": [
            {
              "description": "Pushes a continuation with code \`code\`. Note that the assembler can replace \`PUSHCONT\` with \`PUSHREFCONT\` in certain situations (e.g. if there's not enough space in the current continuation).",
              "fift": "<{ code }> PUSHCONT <{ code }> CONT CONT:<{ code }>",
            },
          ],
          "gas": "18",
          "opcode": "9xccc",
          "stack": "- c",
        },
        "mnemonic": "PUSHCONT_SHORT",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [],
          },
          "outputs": {
            "registers": [],
            "stack": [
              {
                "name": "c",
                "type": "simple",
                "value_types": [
                  "Continuation",
                ],
              },
            ],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "bits_length_var_size": 4,
            "bits_padding": 0,
            "completion_tag": false,
            "display_hints": [
              {
                "type": "continuation",
              },
            ],
            "max_bits": 120,
            "max_refs": 0,
            "min_bits": 0,
            "min_refs": 0,
            "name": "s",
            "type": "subslice",
          },
          "limitBits": 56,
          "limitRefs": 0,
          "offsetBits": 88,
          "offsetRefs": 0,
          "source": Cell {
            "_depths": [
              0,
              0,
              0,
              0,
            ],
            "_hashes": [
              {
                "data": [
                  212,
                  144,
                  47,
                  204,
                  159,
                  173,
                  116,
                  105,
                  143,
                  168,
                  227,
                  83,
                  34,
                  10,
                  104,
                  218,
                  13,
                  207,
                  114,
                  227,
                  43,
                  203,
                  46,
                  185,
                  238,
                  4,
                  33,
                  124,
                  23,
                  211,
                  6,
                  44,
                ],
                "type": "Buffer",
              },
              {
                "data": [
                  212,
                  144,
                  47,
                  204,
                  159,
                  173,
                  116,
                  105,
                  143,
                  168,
                  227,
                  83,
                  34,
                  10,
                  104,
                  218,
                  13,
                  207,
                  114,
                  227,
                  43,
                  203,
                  46,
                  185,
                  238,
                  4,
                  33,
                  124,
                  23,
                  211,
                  6,
                  44,
                ],
                "type": "Buffer",
              },
              {
                "data": [
                  212,
                  144,
                  47,
                  204,
                  159,
                  173,
                  116,
                  105,
                  143,
                  168,
                  227,
                  83,
                  34,
                  10,
                  104,
                  218,
                  13,
                  207,
                  114,
                  227,
                  43,
                  203,
                  46,
                  185,
                  238,
                  4,
                  33,
                  124,
                  23,
                  211,
                  6,
                  44,
                ],
                "type": "Buffer",
              },
              {
                "data": [
                  212,
                  144,
                  47,
                  204,
                  159,
                  173,
                  116,
                  105,
                  143,
                  168,
                  227,
                  83,
                  34,
                  10,
                  104,
                  218,
                  13,
                  207,
                  114,
                  227,
                  43,
                  203,
                  46,
                  185,
                  238,
                  4,
                  33,
                  124,
                  23,
                  211,
                  6,
                  44,
                ],
                "type": "Buffer",
              },
            ],
            "beginParse": [Function],
            "bits": BitString {
              "_data": {
                "data": [
                  0,
                  162,
                  255,
                  0,
                  32,
                  221,
                  32,
                  130,
                  1,
                  76,
                  151,
                  186,
                  151,
                  48,
                  237,
                  68,
                  208,
                  215,
                  11,
                  31,
                  224,
                  164,
                  242,
                  96,
                  129,
                  2,
                  0,
                  215,
                  24,
                  32,
                  215,
                  11,
                  31,
                  237,
                  68,
                  208,
                  211,
                  31,
                  211,
                  255,
                  209,
                  81,
                  18,
                  186,
                  242,
                  161,
                  34,
                  249,
                  1,
                  84,
                  16,
                  68,
                  249,
                  16,
                  242,
                  162,
                  248,
                  0,
                  1,
                  211,
                  31,
                  49,
                  32,
                  215,
                  74,
                  150,
                  211,
                  7,
                  212,
                  2,
                  251,
                  0,
                  222,
                  209,
                  164,
                  200,
                  203,
                  31,
                  203,
                  255,
                  201,
                  237,
                  84,
                ],
                "type": "Buffer",
              },
              "_length": 648,
              "_offset": 16,
              Symbol(nodejs.util.inspect.custom): [Function],
            },
            "depth": [Function],
            "equals": [Function],
            "hash": [Function],
            "level": [Function],
            "mask": LevelMask {
              "_hashCount": 1,
              "_hashIndex": 0,
              "_mask": 0,
            },
            "refs": [],
            "type": -1,
            Symbol(nodejs.util.inspect.custom): [Function],
          },
          "type": "subslice",
          "value": Cell {
            "_depths": [
              0,
              0,
              0,
              0,
            ],
            "_hashes": [
              {
                "data": [
                  146,
                  248,
                  50,
                  13,
                  116,
                  175,
                  128,
                  184,
                  139,
                  28,
                  143,
                  253,
                  28,
                  131,
                  113,
                  132,
                  54,
                  195,
                  69,
                  224,
                  22,
                  141,
                  255,
                  225,
                  160,
                  13,
                  49,
                  130,
                  97,
                  193,
                  233,
                  54,
                ],
                "type": "Buffer",
              },
              {
                "data": [
                  146,
                  248,
                  50,
                  13,
                  116,
                  175,
                  128,
                  184,
                  139,
                  28,
                  143,
                  253,
                  28,
                  131,
                  113,
                  132,
                  54,
                  195,
                  69,
                  224,
                  22,
                  141,
                  255,
                  225,
                  160,
                  13,
                  49,
                  130,
                  97,
                  193,
                  233,
                  54,
                ],
                "type": "Buffer",
              },
              {
                "data": [
                  146,
                  248,
                  50,
                  13,
                  116,
                  175,
                  128,
                  184,
                  139,
                  28,
                  143,
                  253,
                  28,
                  131,
                  113,
                  132,
                  54,
                  195,
                  69,
                  224,
                  22,
                  141,
                  255,
                  225,
                  160,
                  13,
                  49,
                  130,
                  97,
                  193,
                  233,
                  54,
                ],
                "type": "Buffer",
              },
              {
                "data": [
                  146,
                  248,
                  50,
                  13,
                  116,
                  175,
                  128,
                  184,
                  139,
                  28,
                  143,
                  253,
                  28,
                  131,
                  113,
                  132,
                  54,
                  195,
                  69,
                  224,
                  22,
                  141,
                  255,
                  225,
                  160,
                  13,
                  49,
                  130,
                  97,
                  193,
                  233,
                  54,
                ],
                "type": "Buffer",
              },
            ],
            "beginParse": [Function],
            "bits": BitString {
              "_data": {
                "data": [
                  48,
                  237,
                  68,
                  208,
                  215,
                  11,
                  31,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                ],
                "type": "Buffer",
              },
              "_length": 56,
              "_offset": 0,
              Symbol(nodejs.util.inspect.custom): [Function],
            },
            "depth": [Function],
            "equals": [Function],
            "hash": [Function],
            "level": [Function],
            "mask": LevelMask {
              "_hashCount": 1,
              "_hashIndex": 0,
              "_mask": 0,
            },
            "refs": [],
            "type": -1,
            Symbol(nodejs.util.inspect.custom): [Function],
          },
        },
      ],
    },
  },
  {
    "hash": "d4902fcc9fad74698fa8e353220a68da0dcf72e32bcb2eb9ee04217c17d3062c",
    "length": 8,
    "offset": 144,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [],
          "prefix": "E0",
          "tlb": "#E0",
        },
        "control_flow": {
          "branches": [
            {
              "type": "variable",
              "var_name": "c",
            },
          ],
          "nobranch": true,
        },
        "doc": {
          "category": "cont_conditional",
          "description": "Jumps to \`c\` (similarly to \`JMPX\`), but only if \`f\` is non-zero.",
          "fift": "IFJMP",
          "fift_examples": [
            {
              "description": "Equivalent to \`<{ code }> CONT\` \`IFJMP\`.",
              "fift": "IFJMP:<{ code }>",
            },
          ],
          "gas": "18",
          "opcode": "E0",
          "stack": "f c - ",
        },
        "mnemonic": "IFJMP",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "f",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
              {
                "name": "c",
                "type": "simple",
                "value_types": [
                  "Continuation",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [],
          },
        },
      },
      "operands": [],
    },
  },
  {
    "hash": "d4902fcc9fad74698fa8e353220a68da0dcf72e32bcb2eb9ee04217c17d3062c",
    "length": 8,
    "offset": 152,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [],
          "prefix": "A4",
          "tlb": "#A4",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "arithm_basic",
          "description": "Equivalent to \`1 ADDCONST\`.",
          "fift": "INC",
          "fift_examples": [],
          "gas": "18",
          "opcode": "A4",
          "stack": "x - x+1",
        },
        "mnemonic": "INC",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "x",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [
              {
                "name": "result",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
            ],
          },
        },
      },
      "operands": [],
    },
  },
  {
    "hash": "d4902fcc9fad74698fa8e353220a68da0dcf72e32bcb2eb9ee04217c17d3062c",
    "length": 16,
    "offset": 160,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "display_hints": [],
              "max_value": 63,
              "min_value": 0,
              "name": "n",
              "size": 6,
              "type": "uint",
            },
          ],
          "prefix": "F26_",
          "tlb": "#F26_ n:uint6",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "exceptions",
          "description": "Throws exception \`0 <= n <= 63\` with  parameter zero only if integer \`f!=0\`.",
          "fift": "[n] THROWIF",
          "fift_examples": [],
          "gas": "26/76",
          "opcode": "F26_n",
          "stack": "f - ",
        },
        "mnemonic": "THROWIF_SHORT",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "f",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "display_hints": [],
            "max_value": 63,
            "min_value": 0,
            "name": "n",
            "size": 6,
            "type": "uint",
          },
          "type": "numeric",
          "value": 32,
        },
      ],
    },
  },
  {
    "hash": "d4902fcc9fad74698fa8e353220a68da0dcf72e32bcb2eb9ee04217c17d3062c",
    "length": 24,
    "offset": 176,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "display_hints": [],
              "max_value": 32767,
              "min_value": -32768,
              "name": "x",
              "size": 16,
              "type": "int",
            },
          ],
          "prefix": "81",
          "tlb": "#81 xxxx:int16",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "const_int",
          "description": "Pushes integer \`xxxx\`. \`-2^15 <= xx < 2^15\`.",
          "fift": "[xxxx] PUSHINT
[xxxx] INT",
          "fift_examples": [],
          "gas": "34",
          "opcode": "81xxxx",
          "stack": "- xxxx",
        },
        "mnemonic": "PUSHINT_16",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [],
          },
          "outputs": {
            "registers": [],
            "stack": [
              {
                "name": "x",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
            ],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "display_hints": [],
            "max_value": 32767,
            "min_value": -32768,
            "name": "x",
            "size": 16,
            "type": "int",
          },
          "type": "numeric",
          "value": 512,
        },
      ],
    },
  },
  {
    "hash": "d4902fcc9fad74698fa8e353220a68da0dcf72e32bcb2eb9ee04217c17d3062c",
    "length": 16,
    "offset": 200,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [],
          "prefix": "D718",
          "tlb": "#D718",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "cell_parse",
          "description": "Loads the first \`0 <= l <= 1023\` bits from _Slice_ \`s\` into a separate _Slice_ \`s''\`, returning the remainder of \`s\` as \`s'\`.",
          "fift": "LDSLICEX",
          "fift_examples": [],
          "gas": "26",
          "opcode": "D718",
          "stack": "s l - s'' s'",
        },
        "mnemonic": "LDSLICEX",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "s",
                "type": "simple",
                "value_types": [
                  "Slice",
                ],
              },
              {
                "name": "l",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [
              {
                "name": "s3",
                "type": "simple",
                "value_types": [
                  "Slice",
                ],
              },
              {
                "name": "s2",
                "type": "simple",
                "value_types": [
                  "Slice",
                ],
              },
            ],
          },
        },
      },
      "operands": [],
    },
  },
  {
    "hash": "d4902fcc9fad74698fa8e353220a68da0dcf72e32bcb2eb9ee04217c17d3062c",
    "length": 8,
    "offset": 216,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "display_hints": [
                {
                  "type": "stack",
                },
              ],
              "max_value": 15,
              "min_value": 0,
              "name": "i",
              "size": 4,
              "type": "uint",
            },
          ],
          "prefix": "2",
          "tlb": "#2 i:uint4",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "stack_basic",
          "description": "Pushes a copy of the old \`s[i]\` into the stack.",
          "fift": "s[i] PUSH",
          "fift_examples": [],
          "gas": "18",
          "opcode": "2i",
          "stack": "",
        },
        "mnemonic": "PUSH",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
          },
          "outputs": {
            "registers": [],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "display_hints": [
              {
                "type": "stack",
              },
            ],
            "max_value": 15,
            "min_value": 0,
            "name": "i",
            "size": 4,
            "type": "uint",
          },
          "type": "numeric",
          "value": 0,
        },
      ],
    },
  },
  {
    "hash": "d4902fcc9fad74698fa8e353220a68da0dcf72e32bcb2eb9ee04217c17d3062c",
    "length": 24,
    "offset": 224,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "display_hints": [
                {
                  "type": "add",
                  "value": 1,
                },
              ],
              "max_value": 255,
              "min_value": 0,
              "name": "c",
              "size": 8,
              "type": "uint",
            },
          ],
          "prefix": "D70B",
          "tlb": "#D70B cc:uint8",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "cell_parse",
          "description": "Preloads an unsigned \`cc+1\`-bit integer from \`s\`.",
          "fift": "[cc+1] PLDU",
          "fift_examples": [],
          "gas": "34",
          "opcode": "D70Bcc",
          "stack": "s - x",
        },
        "mnemonic": "PLDU",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "s",
                "type": "simple",
                "value_types": [
                  "Slice",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [
              {
                "name": "x",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
            ],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "display_hints": [
              {
                "type": "add",
                "value": 1,
              },
            ],
            "max_value": 255,
            "min_value": 0,
            "name": "c",
            "size": 8,
            "type": "uint",
          },
          "type": "numeric",
          "value": 31,
        },
      ],
    },
  },
  {
    "hash": "d4902fcc9fad74698fa8e353220a68da0dcf72e32bcb2eb9ee04217c17d3062c",
    "length": 16,
    "offset": 248,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "display_hints": [
                {
                  "type": "register",
                },
              ],
              "max_value": 15,
              "min_value": 0,
              "name": "i",
              "size": 4,
              "type": "uint",
            },
          ],
          "prefix": "ED4",
          "tlb": "#ED4 i:uint4",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "cont_registers",
          "description": "Pushes the current value of control register \`c(i)\`. If the control register is not supported in the current codepage, or if it does not have a value, an exception is triggered.",
          "fift": "c[i] PUSHCTR
c[i] PUSH",
          "fift_examples": [],
          "gas": "26",
          "opcode": "ED4i",
          "stack": "- x",
        },
        "mnemonic": "PUSHCTR",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [
              {
                "type": "variable",
                "var_name": "i",
              },
            ],
            "stack": [],
          },
          "outputs": {
            "registers": [],
            "stack": [
              {
                "name": "x",
                "type": "simple",
              },
            ],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "display_hints": [
              {
                "type": "register",
              },
            ],
            "max_value": 15,
            "min_value": 0,
            "name": "i",
            "size": 4,
            "type": "uint",
          },
          "type": "numeric",
          "value": 4,
        },
      ],
    },
  },
  {
    "hash": "d4902fcc9fad74698fa8e353220a68da0dcf72e32bcb2eb9ee04217c17d3062c",
    "length": 8,
    "offset": 264,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [],
          "prefix": "D0",
          "tlb": "#D0",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "cell_parse",
          "description": "Converts a _Cell_ into a _Slice_. Notice that \`c\` must be either an ordinary cell, or an exotic cell which is automatically _loaded_ to yield an ordinary cell \`c'\`, converted into a _Slice_ afterwards.",
          "fift": "CTOS",
          "fift_examples": [],
          "gas": "118/43",
          "opcode": "D0",
          "stack": "c - s",
        },
        "mnemonic": "CTOS",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "c",
                "type": "simple",
                "value_types": [
                  "Cell",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [
              {
                "name": "s",
                "type": "simple",
                "value_types": [
                  "Slice",
                ],
              },
            ],
          },
        },
      },
      "operands": [],
    },
  },
  {
    "hash": "d4902fcc9fad74698fa8e353220a68da0dcf72e32bcb2eb9ee04217c17d3062c",
    "length": 16,
    "offset": 272,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "display_hints": [
                {
                  "type": "add",
                  "value": 1,
                },
              ],
              "max_value": 255,
              "min_value": 0,
              "name": "c",
              "size": 8,
              "type": "uint",
            },
          ],
          "prefix": "D3",
          "tlb": "#D3 cc:uint8",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "cell_parse",
          "description": "Loads an unsigned \`cc+1\`-bit integer \`x\` from _Slice_ \`s\`.",
          "fift": "[cc+1] LDU",
          "fift_examples": [],
          "gas": "26",
          "opcode": "D3cc",
          "stack": "s - x s'",
        },
        "mnemonic": "LDU",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "s",
                "type": "simple",
                "value_types": [
                  "Slice",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [
              {
                "name": "x",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
              {
                "name": "s2",
                "type": "simple",
                "value_types": [
                  "Slice",
                ],
              },
            ],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "display_hints": [
              {
                "type": "add",
                "value": 1,
              },
            ],
            "max_value": 255,
            "min_value": 0,
            "name": "c",
            "size": 8,
            "type": "uint",
          },
          "type": "numeric",
          "value": 31,
        },
      ],
    },
  },
  {
    "hash": "d4902fcc9fad74698fa8e353220a68da0dcf72e32bcb2eb9ee04217c17d3062c",
    "length": 16,
    "offset": 288,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "display_hints": [
                {
                  "type": "add",
                  "value": 1,
                },
              ],
              "max_value": 255,
              "min_value": 0,
              "name": "c",
              "size": 8,
              "type": "uint",
            },
          ],
          "prefix": "D3",
          "tlb": "#D3 cc:uint8",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "cell_parse",
          "description": "Loads an unsigned \`cc+1\`-bit integer \`x\` from _Slice_ \`s\`.",
          "fift": "[cc+1] LDU",
          "fift_examples": [],
          "gas": "26",
          "opcode": "D3cc",
          "stack": "s - x s'",
        },
        "mnemonic": "LDU",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "s",
                "type": "simple",
                "value_types": [
                  "Slice",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [
              {
                "name": "x",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
              {
                "name": "s2",
                "type": "simple",
                "value_types": [
                  "Slice",
                ],
              },
            ],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "display_hints": [
              {
                "type": "add",
                "value": 1,
              },
            ],
            "max_value": 255,
            "min_value": 0,
            "name": "c",
            "size": 8,
            "type": "uint",
          },
          "type": "numeric",
          "value": 255,
        },
      ],
    },
  },
  {
    "hash": "d4902fcc9fad74698fa8e353220a68da0dcf72e32bcb2eb9ee04217c17d3062c",
    "length": 8,
    "offset": 304,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [],
          "prefix": "D1",
          "tlb": "#D1",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "cell_parse",
          "description": "Removes a _Slice_ \`s\` from the stack, and throws an exception if it is not empty.",
          "fift": "ENDS",
          "fift_examples": [],
          "gas": "18/68",
          "opcode": "D1",
          "stack": "s - ",
        },
        "mnemonic": "ENDS",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "s",
                "type": "simple",
                "value_types": [
                  "Slice",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [],
          },
        },
      },
      "operands": [],
    },
  },
  {
    "hash": "d4902fcc9fad74698fa8e353220a68da0dcf72e32bcb2eb9ee04217c17d3062c",
    "length": 16,
    "offset": 312,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "display_hints": [
                {
                  "type": "stack",
                },
              ],
              "max_value": 15,
              "min_value": 0,
              "name": "i",
              "size": 4,
              "type": "uint",
            },
            {
              "display_hints": [
                {
                  "type": "stack",
                },
              ],
              "max_value": 15,
              "min_value": 0,
              "name": "j",
              "size": 4,
              "type": "uint",
            },
          ],
          "prefix": "51",
          "tlb": "#51 i:uint4 j:uint4",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "stack_complex",
          "description": "Equivalent to \`s[i] XCHG0\` \`s[j] PUSH\`.",
          "fift": "s[i] s[j] XCPU",
          "fift_examples": [],
          "gas": "26",
          "opcode": "51ij",
          "stack": "",
        },
        "mnemonic": "XCPU",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
          },
          "outputs": {
            "registers": [],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "display_hints": [
              {
                "type": "stack",
              },
            ],
            "max_value": 15,
            "min_value": 0,
            "name": "i",
            "size": 4,
            "type": "uint",
          },
          "type": "numeric",
          "value": 1,
        },
        {
          "definition": {
            "display_hints": [
              {
                "type": "stack",
              },
            ],
            "max_value": 15,
            "min_value": 0,
            "name": "j",
            "size": 4,
            "type": "uint",
          },
          "type": "numeric",
          "value": 2,
        },
      ],
    },
  },
  {
    "hash": "d4902fcc9fad74698fa8e353220a68da0dcf72e32bcb2eb9ee04217c17d3062c",
    "length": 8,
    "offset": 328,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [],
          "prefix": "BA",
          "tlb": "#BA",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "compare_int",
          "description": "Returns \`-1\` if \`x=y\`, \`0\` otherwise.",
          "fift": "EQUAL",
          "fift_examples": [],
          "gas": "18",
          "opcode": "BA",
          "stack": "x y - x=y",
        },
        "mnemonic": "EQUAL",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "x",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
              {
                "name": "y",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [
              {
                "name": "result",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
            ],
          },
        },
      },
      "operands": [],
    },
  },
  {
    "hash": "d4902fcc9fad74698fa8e353220a68da0dcf72e32bcb2eb9ee04217c17d3062c",
    "length": 16,
    "offset": 336,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "display_hints": [],
              "max_value": 63,
              "min_value": 0,
              "name": "n",
              "size": 6,
              "type": "uint",
            },
          ],
          "prefix": "F2A_",
          "tlb": "#F2A_ n:uint6",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "exceptions",
          "description": "Throws exception \`0 <= n <= 63\` with parameter zero only if integer \`f=0\`.",
          "fift": "[n] THROWIFNOT",
          "fift_examples": [],
          "gas": "26/76",
          "opcode": "F2A_n",
          "stack": "f - ",
        },
        "mnemonic": "THROWIFNOT_SHORT",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "f",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "display_hints": [],
            "max_value": 63,
            "min_value": 0,
            "name": "n",
            "size": 6,
            "type": "uint",
          },
          "type": "numeric",
          "value": 33,
        },
      ],
    },
  },
  {
    "hash": "d4902fcc9fad74698fa8e353220a68da0dcf72e32bcb2eb9ee04217c17d3062c",
    "length": 8,
    "offset": 352,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "display_hints": [
                {
                  "type": "stack",
                },
              ],
              "max_value": 15,
              "min_value": 0,
              "name": "i",
              "size": 4,
              "type": "uint",
            },
          ],
          "prefix": "2",
          "tlb": "#2 i:uint4",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "stack_basic",
          "description": "Pushes a copy of the old \`s[i]\` into the stack.",
          "fift": "s[i] PUSH",
          "fift_examples": [],
          "gas": "18",
          "opcode": "2i",
          "stack": "",
        },
        "mnemonic": "PUSH",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
          },
          "outputs": {
            "registers": [],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "display_hints": [
              {
                "type": "stack",
              },
            ],
            "max_value": 15,
            "min_value": 0,
            "name": "i",
            "size": 4,
            "type": "uint",
          },
          "type": "numeric",
          "value": 2,
        },
      ],
    },
  },
  {
    "hash": "d4902fcc9fad74698fa8e353220a68da0dcf72e32bcb2eb9ee04217c17d3062c",
    "length": 16,
    "offset": 360,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [],
          "prefix": "F901",
          "tlb": "#F901",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "app_crypto",
          "description": "Computes the hash of a _Slice_ \`s\` and returns it as a 256-bit unsigned integer \`x\`. The result is the same as if an ordinary cell containing only data and references from \`s\` had been created and its hash computed by \`HASHCU\`.",
          "fift": "HASHSU",
          "fift_examples": [],
          "gas": "526",
          "opcode": "F901",
          "stack": "s - x",
        },
        "mnemonic": "HASHSU",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "s",
                "type": "simple",
                "value_types": [
                  "Slice",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [
              {
                "name": "x",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
            ],
          },
        },
      },
      "operands": [],
    },
  },
  {
    "hash": "d4902fcc9fad74698fa8e353220a68da0dcf72e32bcb2eb9ee04217c17d3062c",
    "length": 24,
    "offset": 376,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "display_hints": [
                {
                  "type": "stack",
                },
              ],
              "max_value": 15,
              "min_value": 0,
              "name": "i",
              "size": 4,
              "type": "uint",
            },
            {
              "display_hints": [
                {
                  "type": "stack",
                },
              ],
              "max_value": 15,
              "min_value": 0,
              "name": "j",
              "size": 4,
              "type": "uint",
            },
            {
              "display_hints": [
                {
                  "type": "stack",
                },
              ],
              "max_value": 15,
              "min_value": 0,
              "name": "k",
              "size": 4,
              "type": "uint",
            },
          ],
          "prefix": "541",
          "tlb": "#541 i:uint4 j:uint4 k:uint4",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "stack_complex",
          "description": "Equivalent to \`s[i] s[j] XCHG2\` \`s[k] PUSH\`.",
          "fift": "s[i] s[j] s[k] XC2PU",
          "fift_examples": [],
          "gas": "34",
          "opcode": "541ijk",
          "stack": "",
        },
        "mnemonic": "XC2PU",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
          },
          "outputs": {
            "registers": [],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "display_hints": [
              {
                "type": "stack",
              },
            ],
            "max_value": 15,
            "min_value": 0,
            "name": "i",
            "size": 4,
            "type": "uint",
          },
          "type": "numeric",
          "value": 0,
        },
        {
          "definition": {
            "display_hints": [
              {
                "type": "stack",
              },
            ],
            "max_value": 15,
            "min_value": 0,
            "name": "j",
            "size": 4,
            "type": "uint",
          },
          "type": "numeric",
          "value": 4,
        },
        {
          "definition": {
            "display_hints": [
              {
                "type": "stack",
              },
            ],
            "max_value": 15,
            "min_value": 0,
            "name": "k",
            "size": 4,
            "type": "uint",
          },
          "type": "numeric",
          "value": 4,
        },
      ],
    },
  },
  {
    "hash": "d4902fcc9fad74698fa8e353220a68da0dcf72e32bcb2eb9ee04217c17d3062c",
    "length": 16,
    "offset": 400,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [],
          "prefix": "F910",
          "tlb": "#F910",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "app_crypto",
          "description": "Checks the Ed25519-signature \`s\` of a hash \`h\` (a 256-bit unsigned integer, usually computed as the hash of some data) using public key \`k\` (also represented by a 256-bit unsigned integer).
The signature \`s\` must be a _Slice_ containing at least 512 data bits; only the first 512 bits are used. The result is \`-1\` if the signature is valid, \`0\` otherwise.
Notice that \`CHKSIGNU\` is equivalent to \`ROT\` \`NEWC\` \`256 STU\` \`ENDC\` \`ROTREV\` \`CHKSIGNS\`, i.e., to \`CHKSIGNS\` with the first argument \`d\` set to 256-bit _Slice_ containing \`h\`. Therefore, if \`h\` is computed as the hash of some data, these data are hashed _twice_, the second hashing occurring inside \`CHKSIGNS\`.",
          "fift": "CHKSIGNU",
          "fift_examples": [],
          "gas": "26",
          "opcode": "F910",
          "stack": "h s k - ?",
        },
        "mnemonic": "CHKSIGNU",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "h",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
              {
                "name": "s",
                "type": "simple",
                "value_types": [
                  "Slice",
                ],
              },
              {
                "name": "k",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [
              {
                "name": "result",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
            ],
          },
        },
      },
      "operands": [],
    },
  },
  {
    "hash": "d4902fcc9fad74698fa8e353220a68da0dcf72e32bcb2eb9ee04217c17d3062c",
    "length": 16,
    "offset": 416,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "display_hints": [],
              "max_value": 63,
              "min_value": 0,
              "name": "n",
              "size": 6,
              "type": "uint",
            },
          ],
          "prefix": "F2A_",
          "tlb": "#F2A_ n:uint6",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "exceptions",
          "description": "Throws exception \`0 <= n <= 63\` with parameter zero only if integer \`f=0\`.",
          "fift": "[n] THROWIFNOT",
          "fift_examples": [],
          "gas": "26/76",
          "opcode": "F2A_n",
          "stack": "f - ",
        },
        "mnemonic": "THROWIFNOT_SHORT",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "f",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "display_hints": [],
            "max_value": 63,
            "min_value": 0,
            "name": "n",
            "size": 6,
            "type": "uint",
          },
          "type": "numeric",
          "value": 34,
        },
      ],
    },
  },
  {
    "hash": "d4902fcc9fad74698fa8e353220a68da0dcf72e32bcb2eb9ee04217c17d3062c",
    "length": 16,
    "offset": 432,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [],
          "prefix": "F800",
          "tlb": "#F800",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "app_gas",
          "description": "Sets current gas limit \`g_l\` to its maximal allowed value \`g_m\`, and resets the gas credit \`g_c\` to zero, decreasing the value of \`g_r\` by \`g_c\` in the process.
In other words, the current smart contract agrees to buy some gas to finish the current transaction. This action is required to process external messages, which bring no value (hence no gas) with themselves.",
          "fift": "ACCEPT",
          "fift_examples": [],
          "gas": "26",
          "opcode": "F800",
          "stack": "-",
        },
        "mnemonic": "ACCEPT",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [
              {
                "name": "gas",
                "type": "special",
              },
            ],
            "stack": [],
          },
          "outputs": {
            "registers": [
              {
                "name": "gas",
                "type": "special",
              },
            ],
            "stack": [],
          },
        },
      },
      "operands": [],
    },
  },
  {
    "hash": "d4902fcc9fad74698fa8e353220a68da0dcf72e32bcb2eb9ee04217c17d3062c",
    "length": 8,
    "offset": 448,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "display_hints": [
                {
                  "type": "stack",
                },
              ],
              "max_value": 15,
              "min_value": 1,
              "name": "i",
              "size": 4,
              "type": "uint",
            },
          ],
          "operands_range_check": {
            "from": 1,
            "length": 4,
            "to": 15,
          },
          "prefix": "0",
          "tlb": "#0 i:(## 4) {1 <= i}",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "stack_basic",
          "description": "Interchanges \`s0\` with \`s[i]\`, \`1 <= i <= 15\`.",
          "fift": "s[i] XCHG0",
          "fift_examples": [],
          "gas": "18",
          "opcode": "0i",
          "stack": "",
        },
        "mnemonic": "XCHG_0I",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
          },
          "outputs": {
            "registers": [],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "display_hints": [
              {
                "type": "stack",
              },
            ],
            "max_value": 15,
            "min_value": 1,
            "name": "i",
            "size": 4,
            "type": "uint",
          },
          "type": "numeric",
          "value": 1,
        },
      ],
    },
  },
  {
    "hash": "d4902fcc9fad74698fa8e353220a68da0dcf72e32bcb2eb9ee04217c17d3062c",
    "length": 16,
    "offset": 456,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "display_hints": [
                {
                  "type": "add",
                  "value": 1,
                },
              ],
              "max_value": 255,
              "min_value": 0,
              "name": "c",
              "size": 8,
              "type": "uint",
            },
          ],
          "prefix": "D3",
          "tlb": "#D3 cc:uint8",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "cell_parse",
          "description": "Loads an unsigned \`cc+1\`-bit integer \`x\` from _Slice_ \`s\`.",
          "fift": "[cc+1] LDU",
          "fift_examples": [],
          "gas": "26",
          "opcode": "D3cc",
          "stack": "s - x s'",
        },
        "mnemonic": "LDU",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "s",
                "type": "simple",
                "value_types": [
                  "Slice",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [
              {
                "name": "x",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
              {
                "name": "s2",
                "type": "simple",
                "value_types": [
                  "Slice",
                ],
              },
            ],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "display_hints": [
              {
                "type": "add",
                "value": 1,
              },
            ],
            "max_value": 255,
            "min_value": 0,
            "name": "c",
            "size": 8,
            "type": "uint",
          },
          "type": "numeric",
          "value": 31,
        },
      ],
    },
  },
  {
    "hash": "d4902fcc9fad74698fa8e353220a68da0dcf72e32bcb2eb9ee04217c17d3062c",
    "length": 8,
    "offset": 472,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "display_hints": [
                {
                  "type": "stack",
                },
              ],
              "max_value": 15,
              "min_value": 0,
              "name": "i",
              "size": 4,
              "type": "uint",
            },
          ],
          "prefix": "3",
          "tlb": "#3 i:uint4",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "stack_basic",
          "description": "Pops the old \`s0\` value into the old \`s[i]\`.",
          "fift": "s[i] POP",
          "fift_examples": [],
          "gas": "18",
          "opcode": "3i",
          "stack": "",
        },
        "mnemonic": "POP",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
          },
          "outputs": {
            "registers": [],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "display_hints": [
              {
                "type": "stack",
              },
            ],
            "max_value": 15,
            "min_value": 0,
            "name": "i",
            "size": 4,
            "type": "uint",
          },
          "type": "numeric",
          "value": 1,
        },
      ],
    },
  },
  {
    "hash": "d4902fcc9fad74698fa8e353220a68da0dcf72e32bcb2eb9ee04217c17d3062c",
    "length": 8,
    "offset": 480,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "display_hints": [
                {
                  "type": "stack",
                },
              ],
              "max_value": 15,
              "min_value": 0,
              "name": "i",
              "size": 4,
              "type": "uint",
            },
          ],
          "prefix": "2",
          "tlb": "#2 i:uint4",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "stack_basic",
          "description": "Pushes a copy of the old \`s[i]\` into the stack.",
          "fift": "s[i] PUSH",
          "fift_examples": [],
          "gas": "18",
          "opcode": "2i",
          "stack": "",
        },
        "mnemonic": "PUSH",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
          },
          "outputs": {
            "registers": [],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "display_hints": [
              {
                "type": "stack",
              },
            ],
            "max_value": 15,
            "min_value": 0,
            "name": "i",
            "size": 4,
            "type": "uint",
          },
          "type": "numeric",
          "value": 0,
        },
      ],
    },
  },
  {
    "hash": "d4902fcc9fad74698fa8e353220a68da0dcf72e32bcb2eb9ee04217c17d3062c",
    "length": 16,
    "offset": 488,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [],
          "prefix": "D74A",
          "tlb": "#D74A",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "cell_parse",
          "description": "Returns the number of references in _Slice_ \`s\`.",
          "fift": "SREFS",
          "fift_examples": [],
          "gas": "26",
          "opcode": "D74A",
          "stack": "s - r",
        },
        "mnemonic": "SREFS",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "s",
                "type": "simple",
                "value_types": [
                  "Slice",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [
              {
                "name": "r",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
            ],
          },
        },
      },
      "operands": [],
    },
  },
  {
    "hash": "d4902fcc9fad74698fa8e353220a68da0dcf72e32bcb2eb9ee04217c17d3062c",
    "length": 56,
    "offset": 504,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "bits_length_var_size": 4,
              "bits_padding": 0,
              "completion_tag": false,
              "display_hints": [
                {
                  "type": "continuation",
                },
              ],
              "max_bits": 120,
              "max_refs": 0,
              "min_bits": 0,
              "min_refs": 0,
              "name": "s",
              "type": "subslice",
            },
          ],
          "prefix": "9",
          "tlb": "#9 x:(## 4) ssss:((8 * x) * Bit)",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "const_data",
          "description": "Pushes a continuation made from \`builder\`.
_Details:_ Pushes an \`x\`-byte continuation for \`0 <= x <= 15\`.",
          "fift": "[builder] PUSHCONT
[builder] CONT",
          "fift_examples": [
            {
              "description": "Pushes a continuation with code \`code\`. Note that the assembler can replace \`PUSHCONT\` with \`PUSHREFCONT\` in certain situations (e.g. if there's not enough space in the current continuation).",
              "fift": "<{ code }> PUSHCONT <{ code }> CONT CONT:<{ code }>",
            },
          ],
          "gas": "18",
          "opcode": "9xccc",
          "stack": "- c",
        },
        "mnemonic": "PUSHCONT_SHORT",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [],
          },
          "outputs": {
            "registers": [],
            "stack": [
              {
                "name": "c",
                "type": "simple",
                "value_types": [
                  "Continuation",
                ],
              },
            ],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "bits_length_var_size": 4,
            "bits_padding": 0,
            "completion_tag": false,
            "display_hints": [
              {
                "type": "continuation",
              },
            ],
            "max_bits": 120,
            "max_refs": 0,
            "min_bits": 0,
            "min_refs": 0,
            "name": "s",
            "type": "subslice",
          },
          "limitBits": 48,
          "limitRefs": 0,
          "offsetBits": 512,
          "offsetRefs": 0,
          "source": Cell {
            "_depths": [
              0,
              0,
              0,
              0,
            ],
            "_hashes": [
              {
                "data": [
                  212,
                  144,
                  47,
                  204,
                  159,
                  173,
                  116,
                  105,
                  143,
                  168,
                  227,
                  83,
                  34,
                  10,
                  104,
                  218,
                  13,
                  207,
                  114,
                  227,
                  43,
                  203,
                  46,
                  185,
                  238,
                  4,
                  33,
                  124,
                  23,
                  211,
                  6,
                  44,
                ],
                "type": "Buffer",
              },
              {
                "data": [
                  212,
                  144,
                  47,
                  204,
                  159,
                  173,
                  116,
                  105,
                  143,
                  168,
                  227,
                  83,
                  34,
                  10,
                  104,
                  218,
                  13,
                  207,
                  114,
                  227,
                  43,
                  203,
                  46,
                  185,
                  238,
                  4,
                  33,
                  124,
                  23,
                  211,
                  6,
                  44,
                ],
                "type": "Buffer",
              },
              {
                "data": [
                  212,
                  144,
                  47,
                  204,
                  159,
                  173,
                  116,
                  105,
                  143,
                  168,
                  227,
                  83,
                  34,
                  10,
                  104,
                  218,
                  13,
                  207,
                  114,
                  227,
                  43,
                  203,
                  46,
                  185,
                  238,
                  4,
                  33,
                  124,
                  23,
                  211,
                  6,
                  44,
                ],
                "type": "Buffer",
              },
              {
                "data": [
                  212,
                  144,
                  47,
                  204,
                  159,
                  173,
                  116,
                  105,
                  143,
                  168,
                  227,
                  83,
                  34,
                  10,
                  104,
                  218,
                  13,
                  207,
                  114,
                  227,
                  43,
                  203,
                  46,
                  185,
                  238,
                  4,
                  33,
                  124,
                  23,
                  211,
                  6,
                  44,
                ],
                "type": "Buffer",
              },
            ],
            "beginParse": [Function],
            "bits": BitString {
              "_data": {
                "data": [
                  0,
                  162,
                  255,
                  0,
                  32,
                  221,
                  32,
                  130,
                  1,
                  76,
                  151,
                  186,
                  151,
                  48,
                  237,
                  68,
                  208,
                  215,
                  11,
                  31,
                  224,
                  164,
                  242,
                  96,
                  129,
                  2,
                  0,
                  215,
                  24,
                  32,
                  215,
                  11,
                  31,
                  237,
                  68,
                  208,
                  211,
                  31,
                  211,
                  255,
                  209,
                  81,
                  18,
                  186,
                  242,
                  161,
                  34,
                  249,
                  1,
                  84,
                  16,
                  68,
                  249,
                  16,
                  242,
                  162,
                  248,
                  0,
                  1,
                  211,
                  31,
                  49,
                  32,
                  215,
                  74,
                  150,
                  211,
                  7,
                  212,
                  2,
                  251,
                  0,
                  222,
                  209,
                  164,
                  200,
                  203,
                  31,
                  203,
                  255,
                  201,
                  237,
                  84,
                ],
                "type": "Buffer",
              },
              "_length": 648,
              "_offset": 16,
              Symbol(nodejs.util.inspect.custom): [Function],
            },
            "depth": [Function],
            "equals": [Function],
            "hash": [Function],
            "level": [Function],
            "mask": LevelMask {
              "_hashCount": 1,
              "_hashIndex": 0,
              "_mask": 0,
            },
            "refs": [],
            "type": -1,
            Symbol(nodejs.util.inspect.custom): [Function],
          },
          "type": "subslice",
          "value": Cell {
            "_depths": [
              0,
              0,
              0,
              0,
            ],
            "_hashes": [
              {
                "data": [
                  201,
                  205,
                  146,
                  164,
                  137,
                  234,
                  45,
                  255,
                  227,
                  41,
                  235,
                  253,
                  131,
                  99,
                  251,
                  105,
                  11,
                  159,
                  159,
                  102,
                  189,
                  83,
                  186,
                  82,
                  108,
                  134,
                  46,
                  238,
                  227,
                  84,
                  192,
                  24,
                ],
                "type": "Buffer",
              },
              {
                "data": [
                  201,
                  205,
                  146,
                  164,
                  137,
                  234,
                  45,
                  255,
                  227,
                  41,
                  235,
                  253,
                  131,
                  99,
                  251,
                  105,
                  11,
                  159,
                  159,
                  102,
                  189,
                  83,
                  186,
                  82,
                  108,
                  134,
                  46,
                  238,
                  227,
                  84,
                  192,
                  24,
                ],
                "type": "Buffer",
              },
              {
                "data": [
                  201,
                  205,
                  146,
                  164,
                  137,
                  234,
                  45,
                  255,
                  227,
                  41,
                  235,
                  253,
                  131,
                  99,
                  251,
                  105,
                  11,
                  159,
                  159,
                  102,
                  189,
                  83,
                  186,
                  82,
                  108,
                  134,
                  46,
                  238,
                  227,
                  84,
                  192,
                  24,
                ],
                "type": "Buffer",
              },
              {
                "data": [
                  201,
                  205,
                  146,
                  164,
                  137,
                  234,
                  45,
                  255,
                  227,
                  41,
                  235,
                  253,
                  131,
                  99,
                  251,
                  105,
                  11,
                  159,
                  159,
                  102,
                  189,
                  83,
                  186,
                  82,
                  108,
                  134,
                  46,
                  238,
                  227,
                  84,
                  192,
                  24,
                ],
                "type": "Buffer",
              },
            ],
            "beginParse": [Function],
            "bits": BitString {
              "_data": {
                "data": [
                  211,
                  7,
                  212,
                  2,
                  251,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                ],
                "type": "Buffer",
              },
              "_length": 48,
              "_offset": 0,
              Symbol(nodejs.util.inspect.custom): [Function],
            },
            "depth": [Function],
            "equals": [Function],
            "hash": [Function],
            "level": [Function],
            "mask": LevelMask {
              "_hashCount": 1,
              "_hashIndex": 0,
              "_mask": 0,
            },
            "refs": [],
            "type": -1,
            Symbol(nodejs.util.inspect.custom): [Function],
          },
        },
      ],
    },
  },
  {
    "hash": "d4902fcc9fad74698fa8e353220a68da0dcf72e32bcb2eb9ee04217c17d3062c",
    "length": 8,
    "offset": 560,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [],
          "prefix": "DE",
          "tlb": "#DE",
        },
        "control_flow": {
          "branches": [
            {
              "save": {
                "c0": {
                  "save": {
                    "c0": {
                      "index": 0,
                      "type": "register",
                    },
                  },
                  "type": "cc",
                },
              },
              "type": "variable",
              "var_name": "c",
            },
          ],
          "nobranch": true,
        },
        "doc": {
          "category": "cont_conditional",
          "description": "Performs \`EXECUTE\` for \`c\` (i.e., _executes_ \`c\`), but only if integer \`f\` is non-zero. Otherwise simply discards both values.",
          "fift": "IF",
          "fift_examples": [
            {
              "description": "Equivalent to \`<{ code }> CONT\` \`IF\`.",
              "fift": "IF:<{ code }> <{ code }>IF",
            },
          ],
          "gas": "18",
          "opcode": "DE",
          "stack": "f c - ",
        },
        "mnemonic": "IF",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "f",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
              {
                "name": "c",
                "type": "simple",
                "value_types": [
                  "Continuation",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [],
          },
        },
      },
      "operands": [],
    },
  },
  {
    "hash": "d4902fcc9fad74698fa8e353220a68da0dcf72e32bcb2eb9ee04217c17d3062c",
    "length": 8,
    "offset": 568,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [],
          "prefix": "D1",
          "tlb": "#D1",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "cell_parse",
          "description": "Removes a _Slice_ \`s\` from the stack, and throws an exception if it is not empty.",
          "fift": "ENDS",
          "fift_examples": [],
          "gas": "18/68",
          "opcode": "D1",
          "stack": "s - ",
        },
        "mnemonic": "ENDS",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "s",
                "type": "simple",
                "value_types": [
                  "Slice",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [],
          },
        },
      },
      "operands": [],
    },
  },
  {
    "hash": "d4902fcc9fad74698fa8e353220a68da0dcf72e32bcb2eb9ee04217c17d3062c",
    "length": 8,
    "offset": 576,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [],
          "prefix": "A4",
          "tlb": "#A4",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "arithm_basic",
          "description": "Equivalent to \`1 ADDCONST\`.",
          "fift": "INC",
          "fift_examples": [],
          "gas": "18",
          "opcode": "A4",
          "stack": "x - x+1",
        },
        "mnemonic": "INC",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "x",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [
              {
                "name": "result",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
            ],
          },
        },
      },
      "operands": [],
    },
  },
  {
    "hash": "d4902fcc9fad74698fa8e353220a68da0dcf72e32bcb2eb9ee04217c17d3062c",
    "length": 8,
    "offset": 584,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [],
          "prefix": "C8",
          "tlb": "#C8",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "cell_build",
          "description": "Creates a new empty _Builder_.",
          "fift": "NEWC",
          "fift_examples": [],
          "gas": "18",
          "opcode": "C8",
          "stack": "- b",
        },
        "mnemonic": "NEWC",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [],
          },
          "outputs": {
            "registers": [],
            "stack": [
              {
                "name": "b",
                "type": "simple",
                "value_types": [
                  "Builder",
                ],
              },
            ],
          },
        },
      },
      "operands": [],
    },
  },
  {
    "hash": "d4902fcc9fad74698fa8e353220a68da0dcf72e32bcb2eb9ee04217c17d3062c",
    "length": 16,
    "offset": 592,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "display_hints": [
                {
                  "type": "add",
                  "value": 1,
                },
              ],
              "max_value": 255,
              "min_value": 0,
              "name": "c",
              "size": 8,
              "type": "uint",
            },
          ],
          "prefix": "CB",
          "tlb": "#CB cc:uint8",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "cell_build",
          "description": "Stores an unsigned \`cc+1\`-bit integer \`x\` into _Builder_ \`b\`. In all other respects it is similar to \`STI\`.",
          "fift": "[cc+1] STU",
          "fift_examples": [],
          "gas": "26",
          "opcode": "CBcc",
          "stack": "x b - b'",
        },
        "mnemonic": "STU",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "x",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
              {
                "name": "b",
                "type": "simple",
                "value_types": [
                  "Builder",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [
              {
                "name": "b2",
                "type": "simple",
                "value_types": [
                  "Builder",
                ],
              },
            ],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "display_hints": [
              {
                "type": "add",
                "value": 1,
              },
            ],
            "max_value": 255,
            "min_value": 0,
            "name": "c",
            "size": 8,
            "type": "uint",
          },
          "type": "numeric",
          "value": 31,
        },
      ],
    },
  },
  {
    "hash": "d4902fcc9fad74698fa8e353220a68da0dcf72e32bcb2eb9ee04217c17d3062c",
    "length": 16,
    "offset": 608,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "display_hints": [
                {
                  "type": "add",
                  "value": 1,
                },
              ],
              "max_value": 255,
              "min_value": 0,
              "name": "c",
              "size": 8,
              "type": "uint",
            },
          ],
          "prefix": "CB",
          "tlb": "#CB cc:uint8",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "cell_build",
          "description": "Stores an unsigned \`cc+1\`-bit integer \`x\` into _Builder_ \`b\`. In all other respects it is similar to \`STI\`.",
          "fift": "[cc+1] STU",
          "fift_examples": [],
          "gas": "26",
          "opcode": "CBcc",
          "stack": "x b - b'",
        },
        "mnemonic": "STU",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "x",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
              {
                "name": "b",
                "type": "simple",
                "value_types": [
                  "Builder",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [
              {
                "name": "b2",
                "type": "simple",
                "value_types": [
                  "Builder",
                ],
              },
            ],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "display_hints": [
              {
                "type": "add",
                "value": 1,
              },
            ],
            "max_value": 255,
            "min_value": 0,
            "name": "c",
            "size": 8,
            "type": "uint",
          },
          "type": "numeric",
          "value": 255,
        },
      ],
    },
  },
  {
    "hash": "d4902fcc9fad74698fa8e353220a68da0dcf72e32bcb2eb9ee04217c17d3062c",
    "length": 8,
    "offset": 624,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [],
          "prefix": "C9",
          "tlb": "#C9",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "cell_build",
          "description": "Converts a _Builder_ into an ordinary _Cell_.",
          "fift": "ENDC",
          "fift_examples": [],
          "gas": "518",
          "opcode": "C9",
          "stack": "b - c",
        },
        "mnemonic": "ENDC",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "b",
                "type": "simple",
                "value_types": [
                  "Builder",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [
              {
                "name": "c",
                "type": "simple",
                "value_types": [
                  "Cell",
                ],
              },
            ],
          },
        },
      },
      "operands": [],
    },
  },
  {
    "hash": "d4902fcc9fad74698fa8e353220a68da0dcf72e32bcb2eb9ee04217c17d3062c",
    "length": 16,
    "offset": 632,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "display_hints": [
                {
                  "type": "register",
                },
              ],
              "max_value": 15,
              "min_value": 0,
              "name": "i",
              "size": 4,
              "type": "uint",
            },
          ],
          "prefix": "ED5",
          "tlb": "#ED5 i:uint4",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "cont_registers",
          "description": "Pops a value \`x\` from the stack and stores it into control register \`c(i)\`, if supported in the current codepage. Notice that if a control register accepts only values of a specific type, a type-checking exception may occur.",
          "fift": "c[i] POPCTR
c[i] POP",
          "fift_examples": [],
          "gas": "26",
          "opcode": "ED5i",
          "stack": "x - ",
        },
        "mnemonic": "POPCTR",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "x",
                "type": "simple",
              },
            ],
          },
          "outputs": {
            "registers": [
              {
                "type": "variable",
                "var_name": "i",
              },
            ],
            "stack": [],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "display_hints": [
              {
                "type": "register",
              },
            ],
            "max_value": 15,
            "min_value": 0,
            "name": "i",
            "size": 4,
            "type": "uint",
          },
          "type": "numeric",
          "value": 4,
        },
      ],
    },
  },
]
`;

exports[`decompiler should decompile a simple contract 3`] = `
[
  {
    "hash": "587cc789eff1c84f46ec3797e45fc809a14ff5ae24f1e0c7a6a99cc9dc9061ff",
    "length": 16,
    "offset": 0,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "display_hints": [],
              "max_value": 239,
              "min_value": 0,
              "name": "n",
              "size": 8,
              "type": "uint",
            },
          ],
          "operands_range_check": {
            "from": 0,
            "length": 8,
            "to": 239,
          },
          "prefix": "FF",
          "tlb": "#FF nn:(#<= 239)",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "codepage",
          "description": "Selects TVM codepage \`0 <= nn < 240\`. If the codepage is not supported, throws an invalid opcode exception.",
          "fift": "[nn] SETCP",
          "fift_examples": [],
          "gas": "26",
          "opcode": "FFnn",
          "stack": "-",
        },
        "mnemonic": "SETCP",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [],
          },
          "outputs": {
            "registers": [],
            "stack": [],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "display_hints": [],
            "max_value": 239,
            "min_value": 0,
            "name": "n",
            "size": 8,
            "type": "uint",
          },
          "type": "numeric",
          "value": 0,
        },
      ],
    },
  },
  {
    "hash": "587cc789eff1c84f46ec3797e45fc809a14ff5ae24f1e0c7a6a99cc9dc9061ff",
    "length": 8,
    "offset": 16,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "display_hints": [
                {
                  "type": "stack",
                },
              ],
              "max_value": 15,
              "min_value": 0,
              "name": "i",
              "size": 4,
              "type": "uint",
            },
          ],
          "prefix": "2",
          "tlb": "#2 i:uint4",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "stack_basic",
          "description": "Pushes a copy of the old \`s[i]\` into the stack.",
          "fift": "s[i] PUSH",
          "fift_examples": [],
          "gas": "18",
          "opcode": "2i",
          "stack": "",
        },
        "mnemonic": "PUSH",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
          },
          "outputs": {
            "registers": [],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "display_hints": [
              {
                "type": "stack",
              },
            ],
            "max_value": 15,
            "min_value": 0,
            "name": "i",
            "size": 4,
            "type": "uint",
          },
          "type": "numeric",
          "value": 0,
        },
      ],
    },
  },
  {
    "hash": "587cc789eff1c84f46ec3797e45fc809a14ff5ae24f1e0c7a6a99cc9dc9061ff",
    "length": 8,
    "offset": 24,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [],
          "prefix": "DD",
          "tlb": "#DD",
        },
        "control_flow": {
          "branches": [
            {
              "index": 0,
              "type": "register",
            },
          ],
          "nobranch": true,
        },
        "doc": {
          "category": "cont_conditional",
          "description": "Performs a \`RET\`, but only if integer \`f\` is zero.",
          "fift": "IFNOTRET
IF:",
          "fift_examples": [],
          "gas": "18",
          "opcode": "DD",
          "stack": "f - ",
        },
        "mnemonic": "IFNOTRET",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "f",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [],
          },
        },
      },
      "operands": [],
    },
  },
  {
    "hash": "587cc789eff1c84f46ec3797e45fc809a14ff5ae24f1e0c7a6a99cc9dc9061ff",
    "length": 8,
    "offset": 32,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "display_hints": [
                {
                  "type": "stack",
                },
              ],
              "max_value": 15,
              "min_value": 0,
              "name": "i",
              "size": 4,
              "type": "uint",
            },
          ],
          "prefix": "2",
          "tlb": "#2 i:uint4",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "stack_basic",
          "description": "Pushes a copy of the old \`s[i]\` into the stack.",
          "fift": "s[i] PUSH",
          "fift_examples": [],
          "gas": "18",
          "opcode": "2i",
          "stack": "",
        },
        "mnemonic": "PUSH",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
          },
          "outputs": {
            "registers": [],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "display_hints": [
              {
                "type": "stack",
              },
            ],
            "max_value": 15,
            "min_value": 0,
            "name": "i",
            "size": 4,
            "type": "uint",
          },
          "type": "numeric",
          "value": 0,
        },
      ],
    },
  },
  {
    "hash": "587cc789eff1c84f46ec3797e45fc809a14ff5ae24f1e0c7a6a99cc9dc9061ff",
    "length": 32,
    "offset": 40,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "name": "x",
              "type": "pushint_long",
            },
          ],
          "operands_range_check": {
            "from": 0,
            "length": 5,
            "to": 30,
          },
          "prefix": "82",
          "tlb": "#82 l:(## 5) xxx:(int (8 * l + 19))",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "const_int",
          "description": "Pushes integer \`xxx\`.
_Details:_ 5-bit \`0 <= l <= 30\` determines the length \`n=8l+19\` of signed big-endian integer \`xxx\`.
The total length of this instruction is \`l+4\` bytes or \`n+13=8l+32\` bits.",
          "fift": "[xxx] PUSHINT
[xxx] INT",
          "fift_examples": [],
          "gas": "23",
          "opcode": "82lxxx",
          "stack": "- xxx",
        },
        "mnemonic": "PUSHINT_LONG",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [],
          },
          "outputs": {
            "registers": [],
            "stack": [
              {
                "name": "x",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
            ],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "name": "x",
            "type": "pushint_long",
          },
          "type": "bigint",
          "value": 85143n,
        },
      ],
    },
  },
  {
    "hash": "587cc789eff1c84f46ec3797e45fc809a14ff5ae24f1e0c7a6a99cc9dc9061ff",
    "length": 8,
    "offset": 72,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [],
          "prefix": "BA",
          "tlb": "#BA",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "compare_int",
          "description": "Returns \`-1\` if \`x=y\`, \`0\` otherwise.",
          "fift": "EQUAL",
          "fift_examples": [],
          "gas": "18",
          "opcode": "BA",
          "stack": "x y - x=y",
        },
        "mnemonic": "EQUAL",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "x",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
              {
                "name": "y",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [
              {
                "name": "result",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
            ],
          },
        },
      },
      "operands": [],
    },
  },
  {
    "hash": "587cc789eff1c84f46ec3797e45fc809a14ff5ae24f1e0c7a6a99cc9dc9061ff",
    "length": 8,
    "offset": 80,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "display_hints": [
                {
                  "type": "stack",
                },
              ],
              "max_value": 15,
              "min_value": 0,
              "name": "i",
              "size": 4,
              "type": "uint",
            },
          ],
          "prefix": "2",
          "tlb": "#2 i:uint4",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "stack_basic",
          "description": "Pushes a copy of the old \`s[i]\` into the stack.",
          "fift": "s[i] PUSH",
          "fift_examples": [],
          "gas": "18",
          "opcode": "2i",
          "stack": "",
        },
        "mnemonic": "PUSH",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
          },
          "outputs": {
            "registers": [],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "display_hints": [
              {
                "type": "stack",
              },
            ],
            "max_value": 15,
            "min_value": 0,
            "name": "i",
            "size": 4,
            "type": "uint",
          },
          "type": "numeric",
          "value": 1,
        },
      ],
    },
  },
  {
    "hash": "587cc789eff1c84f46ec3797e45fc809a14ff5ae24f1e0c7a6a99cc9dc9061ff",
    "length": 32,
    "offset": 88,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "name": "x",
              "type": "pushint_long",
            },
          ],
          "operands_range_check": {
            "from": 0,
            "length": 5,
            "to": 30,
          },
          "prefix": "82",
          "tlb": "#82 l:(## 5) xxx:(int (8 * l + 19))",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "const_int",
          "description": "Pushes integer \`xxx\`.
_Details:_ 5-bit \`0 <= l <= 30\` determines the length \`n=8l+19\` of signed big-endian integer \`xxx\`.
The total length of this instruction is \`l+4\` bytes or \`n+13=8l+32\` bits.",
          "fift": "[xxx] PUSHINT
[xxx] INT",
          "fift_examples": [],
          "gas": "23",
          "opcode": "82lxxx",
          "stack": "- xxx",
        },
        "mnemonic": "PUSHINT_LONG",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [],
          },
          "outputs": {
            "registers": [],
            "stack": [
              {
                "name": "x",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
            ],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "name": "x",
            "type": "pushint_long",
          },
          "type": "bigint",
          "value": 78748n,
        },
      ],
    },
  },
  {
    "hash": "587cc789eff1c84f46ec3797e45fc809a14ff5ae24f1e0c7a6a99cc9dc9061ff",
    "length": 8,
    "offset": 120,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [],
          "prefix": "BA",
          "tlb": "#BA",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "compare_int",
          "description": "Returns \`-1\` if \`x=y\`, \`0\` otherwise.",
          "fift": "EQUAL",
          "fift_examples": [],
          "gas": "18",
          "opcode": "BA",
          "stack": "x y - x=y",
        },
        "mnemonic": "EQUAL",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "x",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
              {
                "name": "y",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [
              {
                "name": "result",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
            ],
          },
        },
      },
      "operands": [],
    },
  },
  {
    "hash": "587cc789eff1c84f46ec3797e45fc809a14ff5ae24f1e0c7a6a99cc9dc9061ff",
    "length": 8,
    "offset": 128,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [],
          "prefix": "B1",
          "tlb": "#B1",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "arithm_logical",
          "description": "Bitwise or of two integers.",
          "fift": "OR",
          "fift_examples": [],
          "gas": "18",
          "opcode": "B1",
          "stack": "x y - x|y",
        },
        "mnemonic": "OR",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "x",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
              {
                "name": "y",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [
              {
                "name": "result",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
            ],
          },
        },
      },
      "operands": [],
    },
  },
  {
    "hash": "587cc789eff1c84f46ec3797e45fc809a14ff5ae24f1e0c7a6a99cc9dc9061ff",
    "length": 104,
    "offset": 136,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "bits_length_var_size": 4,
              "bits_padding": 0,
              "completion_tag": false,
              "display_hints": [
                {
                  "type": "continuation",
                },
              ],
              "max_bits": 120,
              "max_refs": 0,
              "min_bits": 0,
              "min_refs": 0,
              "name": "s",
              "type": "subslice",
            },
          ],
          "prefix": "9",
          "tlb": "#9 x:(## 4) ssss:((8 * x) * Bit)",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "const_data",
          "description": "Pushes a continuation made from \`builder\`.
_Details:_ Pushes an \`x\`-byte continuation for \`0 <= x <= 15\`.",
          "fift": "[builder] PUSHCONT
[builder] CONT",
          "fift_examples": [
            {
              "description": "Pushes a continuation with code \`code\`. Note that the assembler can replace \`PUSHCONT\` with \`PUSHREFCONT\` in certain situations (e.g. if there's not enough space in the current continuation).",
              "fift": "<{ code }> PUSHCONT <{ code }> CONT CONT:<{ code }>",
            },
          ],
          "gas": "18",
          "opcode": "9xccc",
          "stack": "- c",
        },
        "mnemonic": "PUSHCONT_SHORT",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [],
          },
          "outputs": {
            "registers": [],
            "stack": [
              {
                "name": "c",
                "type": "simple",
                "value_types": [
                  "Continuation",
                ],
              },
            ],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "bits_length_var_size": 4,
            "bits_padding": 0,
            "completion_tag": false,
            "display_hints": [
              {
                "type": "continuation",
              },
            ],
            "max_bits": 120,
            "max_refs": 0,
            "min_bits": 0,
            "min_refs": 0,
            "name": "s",
            "type": "subslice",
          },
          "limitBits": 96,
          "limitRefs": 0,
          "offsetBits": 144,
          "offsetRefs": 0,
          "source": Cell {
            "_depths": [
              0,
              0,
              0,
              0,
            ],
            "_hashes": [
              {
                "data": [
                  88,
                  124,
                  199,
                  137,
                  239,
                  241,
                  200,
                  79,
                  70,
                  236,
                  55,
                  151,
                  228,
                  95,
                  200,
                  9,
                  161,
                  79,
                  245,
                  174,
                  36,
                  241,
                  224,
                  199,
                  166,
                  169,
                  156,
                  201,
                  220,
                  144,
                  97,
                  255,
                ],
                "type": "Buffer",
              },
              {
                "data": [
                  88,
                  124,
                  199,
                  137,
                  239,
                  241,
                  200,
                  79,
                  70,
                  236,
                  55,
                  151,
                  228,
                  95,
                  200,
                  9,
                  161,
                  79,
                  245,
                  174,
                  36,
                  241,
                  224,
                  199,
                  166,
                  169,
                  156,
                  201,
                  220,
                  144,
                  97,
                  255,
                ],
                "type": "Buffer",
              },
              {
                "data": [
                  88,
                  124,
                  199,
                  137,
                  239,
                  241,
                  200,
                  79,
                  70,
                  236,
                  55,
                  151,
                  228,
                  95,
                  200,
                  9,
                  161,
                  79,
                  245,
                  174,
                  36,
                  241,
                  224,
                  199,
                  166,
                  169,
                  156,
                  201,
                  220,
                  144,
                  97,
                  255,
                ],
                "type": "Buffer",
              },
              {
                "data": [
                  88,
                  124,
                  199,
                  137,
                  239,
                  241,
                  200,
                  79,
                  70,
                  236,
                  55,
                  151,
                  228,
                  95,
                  200,
                  9,
                  161,
                  79,
                  245,
                  174,
                  36,
                  241,
                  224,
                  199,
                  166,
                  169,
                  156,
                  201,
                  220,
                  144,
                  97,
                  255,
                ],
                "type": "Buffer",
              },
            ],
            "beginParse": [Function],
            "bits": BitString {
              "_data": {
                "data": [
                  0,
                  186,
                  255,
                  0,
                  32,
                  221,
                  32,
                  130,
                  1,
                  76,
                  151,
                  186,
                  33,
                  130,
                  1,
                  51,
                  156,
                  186,
                  177,
                  156,
                  113,
                  176,
                  237,
                  68,
                  208,
                  211,
                  31,
                  215,
                  11,
                  255,
                  227,
                  4,
                  224,
                  164,
                  242,
                  96,
                  129,
                  2,
                  0,
                  215,
                  24,
                  32,
                  215,
                  11,
                  31,
                  237,
                  68,
                  208,
                  211,
                  31,
                  211,
                  255,
                  209,
                  81,
                  18,
                  186,
                  242,
                  161,
                  34,
                  249,
                  1,
                  84,
                  16,
                  68,
                  249,
                  16,
                  242,
                  162,
                  248,
                  0,
                  1,
                  211,
                  31,
                  49,
                  32,
                  215,
                  74,
                  150,
                  211,
                  7,
                  212,
                  2,
                  251,
                  0,
                  222,
                  209,
                  164,
                  200,
                  203,
                  31,
                  203,
                  255,
                  201,
                  237,
                  84,
                ],
                "type": "Buffer",
              },
              "_length": 744,
              "_offset": 16,
              Symbol(nodejs.util.inspect.custom): [Function],
            },
            "depth": [Function],
            "equals": [Function],
            "hash": [Function],
            "level": [Function],
            "mask": LevelMask {
              "_hashCount": 1,
              "_hashIndex": 0,
              "_mask": 0,
            },
            "refs": [],
            "type": -1,
            Symbol(nodejs.util.inspect.custom): [Function],
          },
          "type": "subslice",
          "value": Cell {
            "_depths": [
              0,
              0,
              0,
              0,
            ],
            "_hashes": [
              {
                "data": [
                  121,
                  75,
                  246,
                  147,
                  150,
                  183,
                  124,
                  255,
                  237,
                  211,
                  186,
                  140,
                  36,
                  170,
                  214,
                  120,
                  163,
                  230,
                  75,
                  139,
                  124,
                  120,
                  244,
                  193,
                  231,
                  144,
                  22,
                  36,
                  191,
                  56,
                  65,
                  104,
                ],
                "type": "Buffer",
              },
              {
                "data": [
                  121,
                  75,
                  246,
                  147,
                  150,
                  183,
                  124,
                  255,
                  237,
                  211,
                  186,
                  140,
                  36,
                  170,
                  214,
                  120,
                  163,
                  230,
                  75,
                  139,
                  124,
                  120,
                  244,
                  193,
                  231,
                  144,
                  22,
                  36,
                  191,
                  56,
                  65,
                  104,
                ],
                "type": "Buffer",
              },
              {
                "data": [
                  121,
                  75,
                  246,
                  147,
                  150,
                  183,
                  124,
                  255,
                  237,
                  211,
                  186,
                  140,
                  36,
                  170,
                  214,
                  120,
                  163,
                  230,
                  75,
                  139,
                  124,
                  120,
                  244,
                  193,
                  231,
                  144,
                  22,
                  36,
                  191,
                  56,
                  65,
                  104,
                ],
                "type": "Buffer",
              },
              {
                "data": [
                  121,
                  75,
                  246,
                  147,
                  150,
                  183,
                  124,
                  255,
                  237,
                  211,
                  186,
                  140,
                  36,
                  170,
                  214,
                  120,
                  163,
                  230,
                  75,
                  139,
                  124,
                  120,
                  244,
                  193,
                  231,
                  144,
                  22,
                  36,
                  191,
                  56,
                  65,
                  104,
                ],
                "type": "Buffer",
              },
            ],
            "beginParse": [Function],
            "bits": BitString {
              "_data": {
                "data": [
                  113,
                  176,
                  237,
                  68,
                  208,
                  211,
                  31,
                  215,
                  11,
                  255,
                  227,
                  4,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                ],
                "type": "Buffer",
              },
              "_length": 96,
              "_offset": 0,
              Symbol(nodejs.util.inspect.custom): [Function],
            },
            "depth": [Function],
            "equals": [Function],
            "hash": [Function],
            "level": [Function],
            "mask": LevelMask {
              "_hashCount": 1,
              "_hashIndex": 0,
              "_mask": 0,
            },
            "refs": [],
            "type": -1,
            Symbol(nodejs.util.inspect.custom): [Function],
          },
        },
      ],
    },
  },
  {
    "hash": "587cc789eff1c84f46ec3797e45fc809a14ff5ae24f1e0c7a6a99cc9dc9061ff",
    "length": 8,
    "offset": 240,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [],
          "prefix": "E0",
          "tlb": "#E0",
        },
        "control_flow": {
          "branches": [
            {
              "type": "variable",
              "var_name": "c",
            },
          ],
          "nobranch": true,
        },
        "doc": {
          "category": "cont_conditional",
          "description": "Jumps to \`c\` (similarly to \`JMPX\`), but only if \`f\` is non-zero.",
          "fift": "IFJMP",
          "fift_examples": [
            {
              "description": "Equivalent to \`<{ code }> CONT\` \`IFJMP\`.",
              "fift": "IFJMP:<{ code }>",
            },
          ],
          "gas": "18",
          "opcode": "E0",
          "stack": "f c - ",
        },
        "mnemonic": "IFJMP",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "f",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
              {
                "name": "c",
                "type": "simple",
                "value_types": [
                  "Continuation",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [],
          },
        },
      },
      "operands": [],
    },
  },
  {
    "hash": "587cc789eff1c84f46ec3797e45fc809a14ff5ae24f1e0c7a6a99cc9dc9061ff",
    "length": 8,
    "offset": 248,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [],
          "prefix": "A4",
          "tlb": "#A4",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "arithm_basic",
          "description": "Equivalent to \`1 ADDCONST\`.",
          "fift": "INC",
          "fift_examples": [],
          "gas": "18",
          "opcode": "A4",
          "stack": "x - x+1",
        },
        "mnemonic": "INC",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "x",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [
              {
                "name": "result",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
            ],
          },
        },
      },
      "operands": [],
    },
  },
  {
    "hash": "587cc789eff1c84f46ec3797e45fc809a14ff5ae24f1e0c7a6a99cc9dc9061ff",
    "length": 16,
    "offset": 256,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "display_hints": [],
              "max_value": 63,
              "min_value": 0,
              "name": "n",
              "size": 6,
              "type": "uint",
            },
          ],
          "prefix": "F26_",
          "tlb": "#F26_ n:uint6",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "exceptions",
          "description": "Throws exception \`0 <= n <= 63\` with  parameter zero only if integer \`f!=0\`.",
          "fift": "[n] THROWIF",
          "fift_examples": [],
          "gas": "26/76",
          "opcode": "F26_n",
          "stack": "f - ",
        },
        "mnemonic": "THROWIF_SHORT",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "f",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "display_hints": [],
            "max_value": 63,
            "min_value": 0,
            "name": "n",
            "size": 6,
            "type": "uint",
          },
          "type": "numeric",
          "value": 32,
        },
      ],
    },
  },
  {
    "hash": "587cc789eff1c84f46ec3797e45fc809a14ff5ae24f1e0c7a6a99cc9dc9061ff",
    "length": 24,
    "offset": 272,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "display_hints": [],
              "max_value": 32767,
              "min_value": -32768,
              "name": "x",
              "size": 16,
              "type": "int",
            },
          ],
          "prefix": "81",
          "tlb": "#81 xxxx:int16",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "const_int",
          "description": "Pushes integer \`xxxx\`. \`-2^15 <= xx < 2^15\`.",
          "fift": "[xxxx] PUSHINT
[xxxx] INT",
          "fift_examples": [],
          "gas": "34",
          "opcode": "81xxxx",
          "stack": "- xxxx",
        },
        "mnemonic": "PUSHINT_16",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [],
          },
          "outputs": {
            "registers": [],
            "stack": [
              {
                "name": "x",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
            ],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "display_hints": [],
            "max_value": 32767,
            "min_value": -32768,
            "name": "x",
            "size": 16,
            "type": "int",
          },
          "type": "numeric",
          "value": 512,
        },
      ],
    },
  },
  {
    "hash": "587cc789eff1c84f46ec3797e45fc809a14ff5ae24f1e0c7a6a99cc9dc9061ff",
    "length": 16,
    "offset": 296,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [],
          "prefix": "D718",
          "tlb": "#D718",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "cell_parse",
          "description": "Loads the first \`0 <= l <= 1023\` bits from _Slice_ \`s\` into a separate _Slice_ \`s''\`, returning the remainder of \`s\` as \`s'\`.",
          "fift": "LDSLICEX",
          "fift_examples": [],
          "gas": "26",
          "opcode": "D718",
          "stack": "s l - s'' s'",
        },
        "mnemonic": "LDSLICEX",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "s",
                "type": "simple",
                "value_types": [
                  "Slice",
                ],
              },
              {
                "name": "l",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [
              {
                "name": "s3",
                "type": "simple",
                "value_types": [
                  "Slice",
                ],
              },
              {
                "name": "s2",
                "type": "simple",
                "value_types": [
                  "Slice",
                ],
              },
            ],
          },
        },
      },
      "operands": [],
    },
  },
  {
    "hash": "587cc789eff1c84f46ec3797e45fc809a14ff5ae24f1e0c7a6a99cc9dc9061ff",
    "length": 8,
    "offset": 312,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "display_hints": [
                {
                  "type": "stack",
                },
              ],
              "max_value": 15,
              "min_value": 0,
              "name": "i",
              "size": 4,
              "type": "uint",
            },
          ],
          "prefix": "2",
          "tlb": "#2 i:uint4",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "stack_basic",
          "description": "Pushes a copy of the old \`s[i]\` into the stack.",
          "fift": "s[i] PUSH",
          "fift_examples": [],
          "gas": "18",
          "opcode": "2i",
          "stack": "",
        },
        "mnemonic": "PUSH",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
          },
          "outputs": {
            "registers": [],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "display_hints": [
              {
                "type": "stack",
              },
            ],
            "max_value": 15,
            "min_value": 0,
            "name": "i",
            "size": 4,
            "type": "uint",
          },
          "type": "numeric",
          "value": 0,
        },
      ],
    },
  },
  {
    "hash": "587cc789eff1c84f46ec3797e45fc809a14ff5ae24f1e0c7a6a99cc9dc9061ff",
    "length": 24,
    "offset": 320,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "display_hints": [
                {
                  "type": "add",
                  "value": 1,
                },
              ],
              "max_value": 255,
              "min_value": 0,
              "name": "c",
              "size": 8,
              "type": "uint",
            },
          ],
          "prefix": "D70B",
          "tlb": "#D70B cc:uint8",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "cell_parse",
          "description": "Preloads an unsigned \`cc+1\`-bit integer from \`s\`.",
          "fift": "[cc+1] PLDU",
          "fift_examples": [],
          "gas": "34",
          "opcode": "D70Bcc",
          "stack": "s - x",
        },
        "mnemonic": "PLDU",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "s",
                "type": "simple",
                "value_types": [
                  "Slice",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [
              {
                "name": "x",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
            ],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "display_hints": [
              {
                "type": "add",
                "value": 1,
              },
            ],
            "max_value": 255,
            "min_value": 0,
            "name": "c",
            "size": 8,
            "type": "uint",
          },
          "type": "numeric",
          "value": 31,
        },
      ],
    },
  },
  {
    "hash": "587cc789eff1c84f46ec3797e45fc809a14ff5ae24f1e0c7a6a99cc9dc9061ff",
    "length": 16,
    "offset": 344,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "display_hints": [
                {
                  "type": "register",
                },
              ],
              "max_value": 15,
              "min_value": 0,
              "name": "i",
              "size": 4,
              "type": "uint",
            },
          ],
          "prefix": "ED4",
          "tlb": "#ED4 i:uint4",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "cont_registers",
          "description": "Pushes the current value of control register \`c(i)\`. If the control register is not supported in the current codepage, or if it does not have a value, an exception is triggered.",
          "fift": "c[i] PUSHCTR
c[i] PUSH",
          "fift_examples": [],
          "gas": "26",
          "opcode": "ED4i",
          "stack": "- x",
        },
        "mnemonic": "PUSHCTR",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [
              {
                "type": "variable",
                "var_name": "i",
              },
            ],
            "stack": [],
          },
          "outputs": {
            "registers": [],
            "stack": [
              {
                "name": "x",
                "type": "simple",
              },
            ],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "display_hints": [
              {
                "type": "register",
              },
            ],
            "max_value": 15,
            "min_value": 0,
            "name": "i",
            "size": 4,
            "type": "uint",
          },
          "type": "numeric",
          "value": 4,
        },
      ],
    },
  },
  {
    "hash": "587cc789eff1c84f46ec3797e45fc809a14ff5ae24f1e0c7a6a99cc9dc9061ff",
    "length": 8,
    "offset": 360,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [],
          "prefix": "D0",
          "tlb": "#D0",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "cell_parse",
          "description": "Converts a _Cell_ into a _Slice_. Notice that \`c\` must be either an ordinary cell, or an exotic cell which is automatically _loaded_ to yield an ordinary cell \`c'\`, converted into a _Slice_ afterwards.",
          "fift": "CTOS",
          "fift_examples": [],
          "gas": "118/43",
          "opcode": "D0",
          "stack": "c - s",
        },
        "mnemonic": "CTOS",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "c",
                "type": "simple",
                "value_types": [
                  "Cell",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [
              {
                "name": "s",
                "type": "simple",
                "value_types": [
                  "Slice",
                ],
              },
            ],
          },
        },
      },
      "operands": [],
    },
  },
  {
    "hash": "587cc789eff1c84f46ec3797e45fc809a14ff5ae24f1e0c7a6a99cc9dc9061ff",
    "length": 16,
    "offset": 368,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "display_hints": [
                {
                  "type": "add",
                  "value": 1,
                },
              ],
              "max_value": 255,
              "min_value": 0,
              "name": "c",
              "size": 8,
              "type": "uint",
            },
          ],
          "prefix": "D3",
          "tlb": "#D3 cc:uint8",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "cell_parse",
          "description": "Loads an unsigned \`cc+1\`-bit integer \`x\` from _Slice_ \`s\`.",
          "fift": "[cc+1] LDU",
          "fift_examples": [],
          "gas": "26",
          "opcode": "D3cc",
          "stack": "s - x s'",
        },
        "mnemonic": "LDU",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "s",
                "type": "simple",
                "value_types": [
                  "Slice",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [
              {
                "name": "x",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
              {
                "name": "s2",
                "type": "simple",
                "value_types": [
                  "Slice",
                ],
              },
            ],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "display_hints": [
              {
                "type": "add",
                "value": 1,
              },
            ],
            "max_value": 255,
            "min_value": 0,
            "name": "c",
            "size": 8,
            "type": "uint",
          },
          "type": "numeric",
          "value": 31,
        },
      ],
    },
  },
  {
    "hash": "587cc789eff1c84f46ec3797e45fc809a14ff5ae24f1e0c7a6a99cc9dc9061ff",
    "length": 16,
    "offset": 384,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "display_hints": [
                {
                  "type": "add",
                  "value": 1,
                },
              ],
              "max_value": 255,
              "min_value": 0,
              "name": "c",
              "size": 8,
              "type": "uint",
            },
          ],
          "prefix": "D3",
          "tlb": "#D3 cc:uint8",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "cell_parse",
          "description": "Loads an unsigned \`cc+1\`-bit integer \`x\` from _Slice_ \`s\`.",
          "fift": "[cc+1] LDU",
          "fift_examples": [],
          "gas": "26",
          "opcode": "D3cc",
          "stack": "s - x s'",
        },
        "mnemonic": "LDU",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "s",
                "type": "simple",
                "value_types": [
                  "Slice",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [
              {
                "name": "x",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
              {
                "name": "s2",
                "type": "simple",
                "value_types": [
                  "Slice",
                ],
              },
            ],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "display_hints": [
              {
                "type": "add",
                "value": 1,
              },
            ],
            "max_value": 255,
            "min_value": 0,
            "name": "c",
            "size": 8,
            "type": "uint",
          },
          "type": "numeric",
          "value": 255,
        },
      ],
    },
  },
  {
    "hash": "587cc789eff1c84f46ec3797e45fc809a14ff5ae24f1e0c7a6a99cc9dc9061ff",
    "length": 8,
    "offset": 400,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [],
          "prefix": "D1",
          "tlb": "#D1",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "cell_parse",
          "description": "Removes a _Slice_ \`s\` from the stack, and throws an exception if it is not empty.",
          "fift": "ENDS",
          "fift_examples": [],
          "gas": "18/68",
          "opcode": "D1",
          "stack": "s - ",
        },
        "mnemonic": "ENDS",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "s",
                "type": "simple",
                "value_types": [
                  "Slice",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [],
          },
        },
      },
      "operands": [],
    },
  },
  {
    "hash": "587cc789eff1c84f46ec3797e45fc809a14ff5ae24f1e0c7a6a99cc9dc9061ff",
    "length": 16,
    "offset": 408,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "display_hints": [
                {
                  "type": "stack",
                },
              ],
              "max_value": 15,
              "min_value": 0,
              "name": "i",
              "size": 4,
              "type": "uint",
            },
            {
              "display_hints": [
                {
                  "type": "stack",
                },
              ],
              "max_value": 15,
              "min_value": 0,
              "name": "j",
              "size": 4,
              "type": "uint",
            },
          ],
          "prefix": "51",
          "tlb": "#51 i:uint4 j:uint4",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "stack_complex",
          "description": "Equivalent to \`s[i] XCHG0\` \`s[j] PUSH\`.",
          "fift": "s[i] s[j] XCPU",
          "fift_examples": [],
          "gas": "26",
          "opcode": "51ij",
          "stack": "",
        },
        "mnemonic": "XCPU",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
          },
          "outputs": {
            "registers": [],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "display_hints": [
              {
                "type": "stack",
              },
            ],
            "max_value": 15,
            "min_value": 0,
            "name": "i",
            "size": 4,
            "type": "uint",
          },
          "type": "numeric",
          "value": 1,
        },
        {
          "definition": {
            "display_hints": [
              {
                "type": "stack",
              },
            ],
            "max_value": 15,
            "min_value": 0,
            "name": "j",
            "size": 4,
            "type": "uint",
          },
          "type": "numeric",
          "value": 2,
        },
      ],
    },
  },
  {
    "hash": "587cc789eff1c84f46ec3797e45fc809a14ff5ae24f1e0c7a6a99cc9dc9061ff",
    "length": 8,
    "offset": 424,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [],
          "prefix": "BA",
          "tlb": "#BA",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "compare_int",
          "description": "Returns \`-1\` if \`x=y\`, \`0\` otherwise.",
          "fift": "EQUAL",
          "fift_examples": [],
          "gas": "18",
          "opcode": "BA",
          "stack": "x y - x=y",
        },
        "mnemonic": "EQUAL",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "x",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
              {
                "name": "y",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [
              {
                "name": "result",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
            ],
          },
        },
      },
      "operands": [],
    },
  },
  {
    "hash": "587cc789eff1c84f46ec3797e45fc809a14ff5ae24f1e0c7a6a99cc9dc9061ff",
    "length": 16,
    "offset": 432,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "display_hints": [],
              "max_value": 63,
              "min_value": 0,
              "name": "n",
              "size": 6,
              "type": "uint",
            },
          ],
          "prefix": "F2A_",
          "tlb": "#F2A_ n:uint6",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "exceptions",
          "description": "Throws exception \`0 <= n <= 63\` with parameter zero only if integer \`f=0\`.",
          "fift": "[n] THROWIFNOT",
          "fift_examples": [],
          "gas": "26/76",
          "opcode": "F2A_n",
          "stack": "f - ",
        },
        "mnemonic": "THROWIFNOT_SHORT",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "f",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "display_hints": [],
            "max_value": 63,
            "min_value": 0,
            "name": "n",
            "size": 6,
            "type": "uint",
          },
          "type": "numeric",
          "value": 33,
        },
      ],
    },
  },
  {
    "hash": "587cc789eff1c84f46ec3797e45fc809a14ff5ae24f1e0c7a6a99cc9dc9061ff",
    "length": 8,
    "offset": 448,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "display_hints": [
                {
                  "type": "stack",
                },
              ],
              "max_value": 15,
              "min_value": 0,
              "name": "i",
              "size": 4,
              "type": "uint",
            },
          ],
          "prefix": "2",
          "tlb": "#2 i:uint4",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "stack_basic",
          "description": "Pushes a copy of the old \`s[i]\` into the stack.",
          "fift": "s[i] PUSH",
          "fift_examples": [],
          "gas": "18",
          "opcode": "2i",
          "stack": "",
        },
        "mnemonic": "PUSH",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
          },
          "outputs": {
            "registers": [],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "display_hints": [
              {
                "type": "stack",
              },
            ],
            "max_value": 15,
            "min_value": 0,
            "name": "i",
            "size": 4,
            "type": "uint",
          },
          "type": "numeric",
          "value": 2,
        },
      ],
    },
  },
  {
    "hash": "587cc789eff1c84f46ec3797e45fc809a14ff5ae24f1e0c7a6a99cc9dc9061ff",
    "length": 16,
    "offset": 456,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [],
          "prefix": "F901",
          "tlb": "#F901",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "app_crypto",
          "description": "Computes the hash of a _Slice_ \`s\` and returns it as a 256-bit unsigned integer \`x\`. The result is the same as if an ordinary cell containing only data and references from \`s\` had been created and its hash computed by \`HASHCU\`.",
          "fift": "HASHSU",
          "fift_examples": [],
          "gas": "526",
          "opcode": "F901",
          "stack": "s - x",
        },
        "mnemonic": "HASHSU",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "s",
                "type": "simple",
                "value_types": [
                  "Slice",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [
              {
                "name": "x",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
            ],
          },
        },
      },
      "operands": [],
    },
  },
  {
    "hash": "587cc789eff1c84f46ec3797e45fc809a14ff5ae24f1e0c7a6a99cc9dc9061ff",
    "length": 24,
    "offset": 472,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "display_hints": [
                {
                  "type": "stack",
                },
              ],
              "max_value": 15,
              "min_value": 0,
              "name": "i",
              "size": 4,
              "type": "uint",
            },
            {
              "display_hints": [
                {
                  "type": "stack",
                },
              ],
              "max_value": 15,
              "min_value": 0,
              "name": "j",
              "size": 4,
              "type": "uint",
            },
            {
              "display_hints": [
                {
                  "type": "stack",
                },
              ],
              "max_value": 15,
              "min_value": 0,
              "name": "k",
              "size": 4,
              "type": "uint",
            },
          ],
          "prefix": "541",
          "tlb": "#541 i:uint4 j:uint4 k:uint4",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "stack_complex",
          "description": "Equivalent to \`s[i] s[j] XCHG2\` \`s[k] PUSH\`.",
          "fift": "s[i] s[j] s[k] XC2PU",
          "fift_examples": [],
          "gas": "34",
          "opcode": "541ijk",
          "stack": "",
        },
        "mnemonic": "XC2PU",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
          },
          "outputs": {
            "registers": [],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "display_hints": [
              {
                "type": "stack",
              },
            ],
            "max_value": 15,
            "min_value": 0,
            "name": "i",
            "size": 4,
            "type": "uint",
          },
          "type": "numeric",
          "value": 0,
        },
        {
          "definition": {
            "display_hints": [
              {
                "type": "stack",
              },
            ],
            "max_value": 15,
            "min_value": 0,
            "name": "j",
            "size": 4,
            "type": "uint",
          },
          "type": "numeric",
          "value": 4,
        },
        {
          "definition": {
            "display_hints": [
              {
                "type": "stack",
              },
            ],
            "max_value": 15,
            "min_value": 0,
            "name": "k",
            "size": 4,
            "type": "uint",
          },
          "type": "numeric",
          "value": 4,
        },
      ],
    },
  },
  {
    "hash": "587cc789eff1c84f46ec3797e45fc809a14ff5ae24f1e0c7a6a99cc9dc9061ff",
    "length": 16,
    "offset": 496,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [],
          "prefix": "F910",
          "tlb": "#F910",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "app_crypto",
          "description": "Checks the Ed25519-signature \`s\` of a hash \`h\` (a 256-bit unsigned integer, usually computed as the hash of some data) using public key \`k\` (also represented by a 256-bit unsigned integer).
The signature \`s\` must be a _Slice_ containing at least 512 data bits; only the first 512 bits are used. The result is \`-1\` if the signature is valid, \`0\` otherwise.
Notice that \`CHKSIGNU\` is equivalent to \`ROT\` \`NEWC\` \`256 STU\` \`ENDC\` \`ROTREV\` \`CHKSIGNS\`, i.e., to \`CHKSIGNS\` with the first argument \`d\` set to 256-bit _Slice_ containing \`h\`. Therefore, if \`h\` is computed as the hash of some data, these data are hashed _twice_, the second hashing occurring inside \`CHKSIGNS\`.",
          "fift": "CHKSIGNU",
          "fift_examples": [],
          "gas": "26",
          "opcode": "F910",
          "stack": "h s k - ?",
        },
        "mnemonic": "CHKSIGNU",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "h",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
              {
                "name": "s",
                "type": "simple",
                "value_types": [
                  "Slice",
                ],
              },
              {
                "name": "k",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [
              {
                "name": "result",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
            ],
          },
        },
      },
      "operands": [],
    },
  },
  {
    "hash": "587cc789eff1c84f46ec3797e45fc809a14ff5ae24f1e0c7a6a99cc9dc9061ff",
    "length": 16,
    "offset": 512,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "display_hints": [],
              "max_value": 63,
              "min_value": 0,
              "name": "n",
              "size": 6,
              "type": "uint",
            },
          ],
          "prefix": "F2A_",
          "tlb": "#F2A_ n:uint6",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "exceptions",
          "description": "Throws exception \`0 <= n <= 63\` with parameter zero only if integer \`f=0\`.",
          "fift": "[n] THROWIFNOT",
          "fift_examples": [],
          "gas": "26/76",
          "opcode": "F2A_n",
          "stack": "f - ",
        },
        "mnemonic": "THROWIFNOT_SHORT",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "f",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "display_hints": [],
            "max_value": 63,
            "min_value": 0,
            "name": "n",
            "size": 6,
            "type": "uint",
          },
          "type": "numeric",
          "value": 34,
        },
      ],
    },
  },
  {
    "hash": "587cc789eff1c84f46ec3797e45fc809a14ff5ae24f1e0c7a6a99cc9dc9061ff",
    "length": 16,
    "offset": 528,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [],
          "prefix": "F800",
          "tlb": "#F800",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "app_gas",
          "description": "Sets current gas limit \`g_l\` to its maximal allowed value \`g_m\`, and resets the gas credit \`g_c\` to zero, decreasing the value of \`g_r\` by \`g_c\` in the process.
In other words, the current smart contract agrees to buy some gas to finish the current transaction. This action is required to process external messages, which bring no value (hence no gas) with themselves.",
          "fift": "ACCEPT",
          "fift_examples": [],
          "gas": "26",
          "opcode": "F800",
          "stack": "-",
        },
        "mnemonic": "ACCEPT",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [
              {
                "name": "gas",
                "type": "special",
              },
            ],
            "stack": [],
          },
          "outputs": {
            "registers": [
              {
                "name": "gas",
                "type": "special",
              },
            ],
            "stack": [],
          },
        },
      },
      "operands": [],
    },
  },
  {
    "hash": "587cc789eff1c84f46ec3797e45fc809a14ff5ae24f1e0c7a6a99cc9dc9061ff",
    "length": 8,
    "offset": 544,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "display_hints": [
                {
                  "type": "stack",
                },
              ],
              "max_value": 15,
              "min_value": 1,
              "name": "i",
              "size": 4,
              "type": "uint",
            },
          ],
          "operands_range_check": {
            "from": 1,
            "length": 4,
            "to": 15,
          },
          "prefix": "0",
          "tlb": "#0 i:(## 4) {1 <= i}",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "stack_basic",
          "description": "Interchanges \`s0\` with \`s[i]\`, \`1 <= i <= 15\`.",
          "fift": "s[i] XCHG0",
          "fift_examples": [],
          "gas": "18",
          "opcode": "0i",
          "stack": "",
        },
        "mnemonic": "XCHG_0I",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
          },
          "outputs": {
            "registers": [],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "display_hints": [
              {
                "type": "stack",
              },
            ],
            "max_value": 15,
            "min_value": 1,
            "name": "i",
            "size": 4,
            "type": "uint",
          },
          "type": "numeric",
          "value": 1,
        },
      ],
    },
  },
  {
    "hash": "587cc789eff1c84f46ec3797e45fc809a14ff5ae24f1e0c7a6a99cc9dc9061ff",
    "length": 16,
    "offset": 552,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "display_hints": [
                {
                  "type": "add",
                  "value": 1,
                },
              ],
              "max_value": 255,
              "min_value": 0,
              "name": "c",
              "size": 8,
              "type": "uint",
            },
          ],
          "prefix": "D3",
          "tlb": "#D3 cc:uint8",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "cell_parse",
          "description": "Loads an unsigned \`cc+1\`-bit integer \`x\` from _Slice_ \`s\`.",
          "fift": "[cc+1] LDU",
          "fift_examples": [],
          "gas": "26",
          "opcode": "D3cc",
          "stack": "s - x s'",
        },
        "mnemonic": "LDU",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "s",
                "type": "simple",
                "value_types": [
                  "Slice",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [
              {
                "name": "x",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
              {
                "name": "s2",
                "type": "simple",
                "value_types": [
                  "Slice",
                ],
              },
            ],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "display_hints": [
              {
                "type": "add",
                "value": 1,
              },
            ],
            "max_value": 255,
            "min_value": 0,
            "name": "c",
            "size": 8,
            "type": "uint",
          },
          "type": "numeric",
          "value": 31,
        },
      ],
    },
  },
  {
    "hash": "587cc789eff1c84f46ec3797e45fc809a14ff5ae24f1e0c7a6a99cc9dc9061ff",
    "length": 8,
    "offset": 568,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "display_hints": [
                {
                  "type": "stack",
                },
              ],
              "max_value": 15,
              "min_value": 0,
              "name": "i",
              "size": 4,
              "type": "uint",
            },
          ],
          "prefix": "3",
          "tlb": "#3 i:uint4",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "stack_basic",
          "description": "Pops the old \`s0\` value into the old \`s[i]\`.",
          "fift": "s[i] POP",
          "fift_examples": [],
          "gas": "18",
          "opcode": "3i",
          "stack": "",
        },
        "mnemonic": "POP",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
          },
          "outputs": {
            "registers": [],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "display_hints": [
              {
                "type": "stack",
              },
            ],
            "max_value": 15,
            "min_value": 0,
            "name": "i",
            "size": 4,
            "type": "uint",
          },
          "type": "numeric",
          "value": 1,
        },
      ],
    },
  },
  {
    "hash": "587cc789eff1c84f46ec3797e45fc809a14ff5ae24f1e0c7a6a99cc9dc9061ff",
    "length": 8,
    "offset": 576,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "display_hints": [
                {
                  "type": "stack",
                },
              ],
              "max_value": 15,
              "min_value": 0,
              "name": "i",
              "size": 4,
              "type": "uint",
            },
          ],
          "prefix": "2",
          "tlb": "#2 i:uint4",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "stack_basic",
          "description": "Pushes a copy of the old \`s[i]\` into the stack.",
          "fift": "s[i] PUSH",
          "fift_examples": [],
          "gas": "18",
          "opcode": "2i",
          "stack": "",
        },
        "mnemonic": "PUSH",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
          },
          "outputs": {
            "registers": [],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "display_hints": [
              {
                "type": "stack",
              },
            ],
            "max_value": 15,
            "min_value": 0,
            "name": "i",
            "size": 4,
            "type": "uint",
          },
          "type": "numeric",
          "value": 0,
        },
      ],
    },
  },
  {
    "hash": "587cc789eff1c84f46ec3797e45fc809a14ff5ae24f1e0c7a6a99cc9dc9061ff",
    "length": 16,
    "offset": 584,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [],
          "prefix": "D74A",
          "tlb": "#D74A",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "cell_parse",
          "description": "Returns the number of references in _Slice_ \`s\`.",
          "fift": "SREFS",
          "fift_examples": [],
          "gas": "26",
          "opcode": "D74A",
          "stack": "s - r",
        },
        "mnemonic": "SREFS",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "s",
                "type": "simple",
                "value_types": [
                  "Slice",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [
              {
                "name": "r",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
            ],
          },
        },
      },
      "operands": [],
    },
  },
  {
    "hash": "587cc789eff1c84f46ec3797e45fc809a14ff5ae24f1e0c7a6a99cc9dc9061ff",
    "length": 56,
    "offset": 600,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "bits_length_var_size": 4,
              "bits_padding": 0,
              "completion_tag": false,
              "display_hints": [
                {
                  "type": "continuation",
                },
              ],
              "max_bits": 120,
              "max_refs": 0,
              "min_bits": 0,
              "min_refs": 0,
              "name": "s",
              "type": "subslice",
            },
          ],
          "prefix": "9",
          "tlb": "#9 x:(## 4) ssss:((8 * x) * Bit)",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "const_data",
          "description": "Pushes a continuation made from \`builder\`.
_Details:_ Pushes an \`x\`-byte continuation for \`0 <= x <= 15\`.",
          "fift": "[builder] PUSHCONT
[builder] CONT",
          "fift_examples": [
            {
              "description": "Pushes a continuation with code \`code\`. Note that the assembler can replace \`PUSHCONT\` with \`PUSHREFCONT\` in certain situations (e.g. if there's not enough space in the current continuation).",
              "fift": "<{ code }> PUSHCONT <{ code }> CONT CONT:<{ code }>",
            },
          ],
          "gas": "18",
          "opcode": "9xccc",
          "stack": "- c",
        },
        "mnemonic": "PUSHCONT_SHORT",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [],
          },
          "outputs": {
            "registers": [],
            "stack": [
              {
                "name": "c",
                "type": "simple",
                "value_types": [
                  "Continuation",
                ],
              },
            ],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "bits_length_var_size": 4,
            "bits_padding": 0,
            "completion_tag": false,
            "display_hints": [
              {
                "type": "continuation",
              },
            ],
            "max_bits": 120,
            "max_refs": 0,
            "min_bits": 0,
            "min_refs": 0,
            "name": "s",
            "type": "subslice",
          },
          "limitBits": 48,
          "limitRefs": 0,
          "offsetBits": 608,
          "offsetRefs": 0,
          "source": Cell {
            "_depths": [
              0,
              0,
              0,
              0,
            ],
            "_hashes": [
              {
                "data": [
                  88,
                  124,
                  199,
                  137,
                  239,
                  241,
                  200,
                  79,
                  70,
                  236,
                  55,
                  151,
                  228,
                  95,
                  200,
                  9,
                  161,
                  79,
                  245,
                  174,
                  36,
                  241,
                  224,
                  199,
                  166,
                  169,
                  156,
                  201,
                  220,
                  144,
                  97,
                  255,
                ],
                "type": "Buffer",
              },
              {
                "data": [
                  88,
                  124,
                  199,
                  137,
                  239,
                  241,
                  200,
                  79,
                  70,
                  236,
                  55,
                  151,
                  228,
                  95,
                  200,
                  9,
                  161,
                  79,
                  245,
                  174,
                  36,
                  241,
                  224,
                  199,
                  166,
                  169,
                  156,
                  201,
                  220,
                  144,
                  97,
                  255,
                ],
                "type": "Buffer",
              },
              {
                "data": [
                  88,
                  124,
                  199,
                  137,
                  239,
                  241,
                  200,
                  79,
                  70,
                  236,
                  55,
                  151,
                  228,
                  95,
                  200,
                  9,
                  161,
                  79,
                  245,
                  174,
                  36,
                  241,
                  224,
                  199,
                  166,
                  169,
                  156,
                  201,
                  220,
                  144,
                  97,
                  255,
                ],
                "type": "Buffer",
              },
              {
                "data": [
                  88,
                  124,
                  199,
                  137,
                  239,
                  241,
                  200,
                  79,
                  70,
                  236,
                  55,
                  151,
                  228,
                  95,
                  200,
                  9,
                  161,
                  79,
                  245,
                  174,
                  36,
                  241,
                  224,
                  199,
                  166,
                  169,
                  156,
                  201,
                  220,
                  144,
                  97,
                  255,
                ],
                "type": "Buffer",
              },
            ],
            "beginParse": [Function],
            "bits": BitString {
              "_data": {
                "data": [
                  0,
                  186,
                  255,
                  0,
                  32,
                  221,
                  32,
                  130,
                  1,
                  76,
                  151,
                  186,
                  33,
                  130,
                  1,
                  51,
                  156,
                  186,
                  177,
                  156,
                  113,
                  176,
                  237,
                  68,
                  208,
                  211,
                  31,
                  215,
                  11,
                  255,
                  227,
                  4,
                  224,
                  164,
                  242,
                  96,
                  129,
                  2,
                  0,
                  215,
                  24,
                  32,
                  215,
                  11,
                  31,
                  237,
                  68,
                  208,
                  211,
                  31,
                  211,
                  255,
                  209,
                  81,
                  18,
                  186,
                  242,
                  161,
                  34,
                  249,
                  1,
                  84,
                  16,
                  68,
                  249,
                  16,
                  242,
                  162,
                  248,
                  0,
                  1,
                  211,
                  31,
                  49,
                  32,
                  215,
                  74,
                  150,
                  211,
                  7,
                  212,
                  2,
                  251,
                  0,
                  222,
                  209,
                  164,
                  200,
                  203,
                  31,
                  203,
                  255,
                  201,
                  237,
                  84,
                ],
                "type": "Buffer",
              },
              "_length": 744,
              "_offset": 16,
              Symbol(nodejs.util.inspect.custom): [Function],
            },
            "depth": [Function],
            "equals": [Function],
            "hash": [Function],
            "level": [Function],
            "mask": LevelMask {
              "_hashCount": 1,
              "_hashIndex": 0,
              "_mask": 0,
            },
            "refs": [],
            "type": -1,
            Symbol(nodejs.util.inspect.custom): [Function],
          },
          "type": "subslice",
          "value": Cell {
            "_depths": [
              0,
              0,
              0,
              0,
            ],
            "_hashes": [
              {
                "data": [
                  201,
                  205,
                  146,
                  164,
                  137,
                  234,
                  45,
                  255,
                  227,
                  41,
                  235,
                  253,
                  131,
                  99,
                  251,
                  105,
                  11,
                  159,
                  159,
                  102,
                  189,
                  83,
                  186,
                  82,
                  108,
                  134,
                  46,
                  238,
                  227,
                  84,
                  192,
                  24,
                ],
                "type": "Buffer",
              },
              {
                "data": [
                  201,
                  205,
                  146,
                  164,
                  137,
                  234,
                  45,
                  255,
                  227,
                  41,
                  235,
                  253,
                  131,
                  99,
                  251,
                  105,
                  11,
                  159,
                  159,
                  102,
                  189,
                  83,
                  186,
                  82,
                  108,
                  134,
                  46,
                  238,
                  227,
                  84,
                  192,
                  24,
                ],
                "type": "Buffer",
              },
              {
                "data": [
                  201,
                  205,
                  146,
                  164,
                  137,
                  234,
                  45,
                  255,
                  227,
                  41,
                  235,
                  253,
                  131,
                  99,
                  251,
                  105,
                  11,
                  159,
                  159,
                  102,
                  189,
                  83,
                  186,
                  82,
                  108,
                  134,
                  46,
                  238,
                  227,
                  84,
                  192,
                  24,
                ],
                "type": "Buffer",
              },
              {
                "data": [
                  201,
                  205,
                  146,
                  164,
                  137,
                  234,
                  45,
                  255,
                  227,
                  41,
                  235,
                  253,
                  131,
                  99,
                  251,
                  105,
                  11,
                  159,
                  159,
                  102,
                  189,
                  83,
                  186,
                  82,
                  108,
                  134,
                  46,
                  238,
                  227,
                  84,
                  192,
                  24,
                ],
                "type": "Buffer",
              },
            ],
            "beginParse": [Function],
            "bits": BitString {
              "_data": {
                "data": [
                  211,
                  7,
                  212,
                  2,
                  251,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                ],
                "type": "Buffer",
              },
              "_length": 48,
              "_offset": 0,
              Symbol(nodejs.util.inspect.custom): [Function],
            },
            "depth": [Function],
            "equals": [Function],
            "hash": [Function],
            "level": [Function],
            "mask": LevelMask {
              "_hashCount": 1,
              "_hashIndex": 0,
              "_mask": 0,
            },
            "refs": [],
            "type": -1,
            Symbol(nodejs.util.inspect.custom): [Function],
          },
        },
      ],
    },
  },
  {
    "hash": "587cc789eff1c84f46ec3797e45fc809a14ff5ae24f1e0c7a6a99cc9dc9061ff",
    "length": 8,
    "offset": 656,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [],
          "prefix": "DE",
          "tlb": "#DE",
        },
        "control_flow": {
          "branches": [
            {
              "save": {
                "c0": {
                  "save": {
                    "c0": {
                      "index": 0,
                      "type": "register",
                    },
                  },
                  "type": "cc",
                },
              },
              "type": "variable",
              "var_name": "c",
            },
          ],
          "nobranch": true,
        },
        "doc": {
          "category": "cont_conditional",
          "description": "Performs \`EXECUTE\` for \`c\` (i.e., _executes_ \`c\`), but only if integer \`f\` is non-zero. Otherwise simply discards both values.",
          "fift": "IF",
          "fift_examples": [
            {
              "description": "Equivalent to \`<{ code }> CONT\` \`IF\`.",
              "fift": "IF:<{ code }> <{ code }>IF",
            },
          ],
          "gas": "18",
          "opcode": "DE",
          "stack": "f c - ",
        },
        "mnemonic": "IF",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "f",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
              {
                "name": "c",
                "type": "simple",
                "value_types": [
                  "Continuation",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [],
          },
        },
      },
      "operands": [],
    },
  },
  {
    "hash": "587cc789eff1c84f46ec3797e45fc809a14ff5ae24f1e0c7a6a99cc9dc9061ff",
    "length": 8,
    "offset": 664,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [],
          "prefix": "D1",
          "tlb": "#D1",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "cell_parse",
          "description": "Removes a _Slice_ \`s\` from the stack, and throws an exception if it is not empty.",
          "fift": "ENDS",
          "fift_examples": [],
          "gas": "18/68",
          "opcode": "D1",
          "stack": "s - ",
        },
        "mnemonic": "ENDS",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "s",
                "type": "simple",
                "value_types": [
                  "Slice",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [],
          },
        },
      },
      "operands": [],
    },
  },
  {
    "hash": "587cc789eff1c84f46ec3797e45fc809a14ff5ae24f1e0c7a6a99cc9dc9061ff",
    "length": 8,
    "offset": 672,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [],
          "prefix": "A4",
          "tlb": "#A4",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "arithm_basic",
          "description": "Equivalent to \`1 ADDCONST\`.",
          "fift": "INC",
          "fift_examples": [],
          "gas": "18",
          "opcode": "A4",
          "stack": "x - x+1",
        },
        "mnemonic": "INC",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "x",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [
              {
                "name": "result",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
            ],
          },
        },
      },
      "operands": [],
    },
  },
  {
    "hash": "587cc789eff1c84f46ec3797e45fc809a14ff5ae24f1e0c7a6a99cc9dc9061ff",
    "length": 8,
    "offset": 680,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [],
          "prefix": "C8",
          "tlb": "#C8",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "cell_build",
          "description": "Creates a new empty _Builder_.",
          "fift": "NEWC",
          "fift_examples": [],
          "gas": "18",
          "opcode": "C8",
          "stack": "- b",
        },
        "mnemonic": "NEWC",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [],
          },
          "outputs": {
            "registers": [],
            "stack": [
              {
                "name": "b",
                "type": "simple",
                "value_types": [
                  "Builder",
                ],
              },
            ],
          },
        },
      },
      "operands": [],
    },
  },
  {
    "hash": "587cc789eff1c84f46ec3797e45fc809a14ff5ae24f1e0c7a6a99cc9dc9061ff",
    "length": 16,
    "offset": 688,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "display_hints": [
                {
                  "type": "add",
                  "value": 1,
                },
              ],
              "max_value": 255,
              "min_value": 0,
              "name": "c",
              "size": 8,
              "type": "uint",
            },
          ],
          "prefix": "CB",
          "tlb": "#CB cc:uint8",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "cell_build",
          "description": "Stores an unsigned \`cc+1\`-bit integer \`x\` into _Builder_ \`b\`. In all other respects it is similar to \`STI\`.",
          "fift": "[cc+1] STU",
          "fift_examples": [],
          "gas": "26",
          "opcode": "CBcc",
          "stack": "x b - b'",
        },
        "mnemonic": "STU",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "x",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
              {
                "name": "b",
                "type": "simple",
                "value_types": [
                  "Builder",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [
              {
                "name": "b2",
                "type": "simple",
                "value_types": [
                  "Builder",
                ],
              },
            ],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "display_hints": [
              {
                "type": "add",
                "value": 1,
              },
            ],
            "max_value": 255,
            "min_value": 0,
            "name": "c",
            "size": 8,
            "type": "uint",
          },
          "type": "numeric",
          "value": 31,
        },
      ],
    },
  },
  {
    "hash": "587cc789eff1c84f46ec3797e45fc809a14ff5ae24f1e0c7a6a99cc9dc9061ff",
    "length": 16,
    "offset": 704,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "display_hints": [
                {
                  "type": "add",
                  "value": 1,
                },
              ],
              "max_value": 255,
              "min_value": 0,
              "name": "c",
              "size": 8,
              "type": "uint",
            },
          ],
          "prefix": "CB",
          "tlb": "#CB cc:uint8",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "cell_build",
          "description": "Stores an unsigned \`cc+1\`-bit integer \`x\` into _Builder_ \`b\`. In all other respects it is similar to \`STI\`.",
          "fift": "[cc+1] STU",
          "fift_examples": [],
          "gas": "26",
          "opcode": "CBcc",
          "stack": "x b - b'",
        },
        "mnemonic": "STU",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "x",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
              {
                "name": "b",
                "type": "simple",
                "value_types": [
                  "Builder",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [
              {
                "name": "b2",
                "type": "simple",
                "value_types": [
                  "Builder",
                ],
              },
            ],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "display_hints": [
              {
                "type": "add",
                "value": 1,
              },
            ],
            "max_value": 255,
            "min_value": 0,
            "name": "c",
            "size": 8,
            "type": "uint",
          },
          "type": "numeric",
          "value": 255,
        },
      ],
    },
  },
  {
    "hash": "587cc789eff1c84f46ec3797e45fc809a14ff5ae24f1e0c7a6a99cc9dc9061ff",
    "length": 8,
    "offset": 720,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [],
          "prefix": "C9",
          "tlb": "#C9",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "cell_build",
          "description": "Converts a _Builder_ into an ordinary _Cell_.",
          "fift": "ENDC",
          "fift_examples": [],
          "gas": "518",
          "opcode": "C9",
          "stack": "b - c",
        },
        "mnemonic": "ENDC",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "b",
                "type": "simple",
                "value_types": [
                  "Builder",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [
              {
                "name": "c",
                "type": "simple",
                "value_types": [
                  "Cell",
                ],
              },
            ],
          },
        },
      },
      "operands": [],
    },
  },
  {
    "hash": "587cc789eff1c84f46ec3797e45fc809a14ff5ae24f1e0c7a6a99cc9dc9061ff",
    "length": 16,
    "offset": 728,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "display_hints": [
                {
                  "type": "register",
                },
              ],
              "max_value": 15,
              "min_value": 0,
              "name": "i",
              "size": 4,
              "type": "uint",
            },
          ],
          "prefix": "ED5",
          "tlb": "#ED5 i:uint4",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "cont_registers",
          "description": "Pops a value \`x\` from the stack and stores it into control register \`c(i)\`, if supported in the current codepage. Notice that if a control register accepts only values of a specific type, a type-checking exception may occur.",
          "fift": "c[i] POPCTR
c[i] POP",
          "fift_examples": [],
          "gas": "26",
          "opcode": "ED5i",
          "stack": "x - ",
        },
        "mnemonic": "POPCTR",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "x",
                "type": "simple",
              },
            ],
          },
          "outputs": {
            "registers": [
              {
                "type": "variable",
                "var_name": "i",
              },
            ],
            "stack": [],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "display_hints": [
              {
                "type": "register",
              },
            ],
            "max_value": 15,
            "min_value": 0,
            "name": "i",
            "size": 4,
            "type": "uint",
          },
          "type": "numeric",
          "value": 4,
        },
      ],
    },
  },
]
`;

exports[`decompiler should decompile a simple contract 4`] = `
[
  {
    "hash": "5c9a5e68c108e18721a07c42f9956bfb39ad77ec6d624b60c576ec88eee65329",
    "length": 16,
    "offset": 0,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "display_hints": [],
              "max_value": 239,
              "min_value": 0,
              "name": "n",
              "size": 8,
              "type": "uint",
            },
          ],
          "operands_range_check": {
            "from": 0,
            "length": 8,
            "to": 239,
          },
          "prefix": "FF",
          "tlb": "#FF nn:(#<= 239)",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "codepage",
          "description": "Selects TVM codepage \`0 <= nn < 240\`. If the codepage is not supported, throws an invalid opcode exception.",
          "fift": "[nn] SETCP",
          "fift_examples": [],
          "gas": "26",
          "opcode": "FFnn",
          "stack": "-",
        },
        "mnemonic": "SETCP",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [],
          },
          "outputs": {
            "registers": [],
            "stack": [],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "display_hints": [],
            "max_value": 239,
            "min_value": 0,
            "name": "n",
            "size": 8,
            "type": "uint",
          },
          "type": "numeric",
          "value": 0,
        },
      ],
    },
  },
  {
    "hash": "5c9a5e68c108e18721a07c42f9956bfb39ad77ec6d624b60c576ec88eee65329",
    "length": 8,
    "offset": 16,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "display_hints": [
                {
                  "type": "stack",
                },
              ],
              "max_value": 15,
              "min_value": 0,
              "name": "i",
              "size": 4,
              "type": "uint",
            },
          ],
          "prefix": "2",
          "tlb": "#2 i:uint4",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "stack_basic",
          "description": "Pushes a copy of the old \`s[i]\` into the stack.",
          "fift": "s[i] PUSH",
          "fift_examples": [],
          "gas": "18",
          "opcode": "2i",
          "stack": "",
        },
        "mnemonic": "PUSH",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
          },
          "outputs": {
            "registers": [],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "display_hints": [
              {
                "type": "stack",
              },
            ],
            "max_value": 15,
            "min_value": 0,
            "name": "i",
            "size": 4,
            "type": "uint",
          },
          "type": "numeric",
          "value": 0,
        },
      ],
    },
  },
  {
    "hash": "5c9a5e68c108e18721a07c42f9956bfb39ad77ec6d624b60c576ec88eee65329",
    "length": 8,
    "offset": 24,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [],
          "prefix": "DD",
          "tlb": "#DD",
        },
        "control_flow": {
          "branches": [
            {
              "index": 0,
              "type": "register",
            },
          ],
          "nobranch": true,
        },
        "doc": {
          "category": "cont_conditional",
          "description": "Performs a \`RET\`, but only if integer \`f\` is zero.",
          "fift": "IFNOTRET
IF:",
          "fift_examples": [],
          "gas": "18",
          "opcode": "DD",
          "stack": "f - ",
        },
        "mnemonic": "IFNOTRET",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "f",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [],
          },
        },
      },
      "operands": [],
    },
  },
  {
    "hash": "5c9a5e68c108e18721a07c42f9956bfb39ad77ec6d624b60c576ec88eee65329",
    "length": 8,
    "offset": 32,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "display_hints": [
                {
                  "type": "stack",
                },
              ],
              "max_value": 15,
              "min_value": 0,
              "name": "i",
              "size": 4,
              "type": "uint",
            },
          ],
          "prefix": "2",
          "tlb": "#2 i:uint4",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "stack_basic",
          "description": "Pushes a copy of the old \`s[i]\` into the stack.",
          "fift": "s[i] PUSH",
          "fift_examples": [],
          "gas": "18",
          "opcode": "2i",
          "stack": "",
        },
        "mnemonic": "PUSH",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
          },
          "outputs": {
            "registers": [],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "display_hints": [
              {
                "type": "stack",
              },
            ],
            "max_value": 15,
            "min_value": 0,
            "name": "i",
            "size": 4,
            "type": "uint",
          },
          "type": "numeric",
          "value": 0,
        },
      ],
    },
  },
  {
    "hash": "5c9a5e68c108e18721a07c42f9956bfb39ad77ec6d624b60c576ec88eee65329",
    "length": 32,
    "offset": 40,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "name": "x",
              "type": "pushint_long",
            },
          ],
          "operands_range_check": {
            "from": 0,
            "length": 5,
            "to": 30,
          },
          "prefix": "82",
          "tlb": "#82 l:(## 5) xxx:(int (8 * l + 19))",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "const_int",
          "description": "Pushes integer \`xxx\`.
_Details:_ 5-bit \`0 <= l <= 30\` determines the length \`n=8l+19\` of signed big-endian integer \`xxx\`.
The total length of this instruction is \`l+4\` bytes or \`n+13=8l+32\` bits.",
          "fift": "[xxx] PUSHINT
[xxx] INT",
          "fift_examples": [],
          "gas": "23",
          "opcode": "82lxxx",
          "stack": "- xxx",
        },
        "mnemonic": "PUSHINT_LONG",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [],
          },
          "outputs": {
            "registers": [],
            "stack": [
              {
                "name": "x",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
            ],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "name": "x",
            "type": "pushint_long",
          },
          "type": "bigint",
          "value": 85143n,
        },
      ],
    },
  },
  {
    "hash": "5c9a5e68c108e18721a07c42f9956bfb39ad77ec6d624b60c576ec88eee65329",
    "length": 8,
    "offset": 72,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [],
          "prefix": "BA",
          "tlb": "#BA",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "compare_int",
          "description": "Returns \`-1\` if \`x=y\`, \`0\` otherwise.",
          "fift": "EQUAL",
          "fift_examples": [],
          "gas": "18",
          "opcode": "BA",
          "stack": "x y - x=y",
        },
        "mnemonic": "EQUAL",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "x",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
              {
                "name": "y",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [
              {
                "name": "result",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
            ],
          },
        },
      },
      "operands": [],
    },
  },
  {
    "hash": "5c9a5e68c108e18721a07c42f9956bfb39ad77ec6d624b60c576ec88eee65329",
    "length": 64,
    "offset": 80,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "bits_length_var_size": 4,
              "bits_padding": 0,
              "completion_tag": false,
              "display_hints": [
                {
                  "type": "continuation",
                },
              ],
              "max_bits": 120,
              "max_refs": 0,
              "min_bits": 0,
              "min_refs": 0,
              "name": "s",
              "type": "subslice",
            },
          ],
          "prefix": "9",
          "tlb": "#9 x:(## 4) ssss:((8 * x) * Bit)",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "const_data",
          "description": "Pushes a continuation made from \`builder\`.
_Details:_ Pushes an \`x\`-byte continuation for \`0 <= x <= 15\`.",
          "fift": "[builder] PUSHCONT
[builder] CONT",
          "fift_examples": [
            {
              "description": "Pushes a continuation with code \`code\`. Note that the assembler can replace \`PUSHCONT\` with \`PUSHREFCONT\` in certain situations (e.g. if there's not enough space in the current continuation).",
              "fift": "<{ code }> PUSHCONT <{ code }> CONT CONT:<{ code }>",
            },
          ],
          "gas": "18",
          "opcode": "9xccc",
          "stack": "- c",
        },
        "mnemonic": "PUSHCONT_SHORT",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [],
          },
          "outputs": {
            "registers": [],
            "stack": [
              {
                "name": "c",
                "type": "simple",
                "value_types": [
                  "Continuation",
                ],
              },
            ],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "bits_length_var_size": 4,
            "bits_padding": 0,
            "completion_tag": false,
            "display_hints": [
              {
                "type": "continuation",
              },
            ],
            "max_bits": 120,
            "max_refs": 0,
            "min_bits": 0,
            "min_refs": 0,
            "name": "s",
            "type": "subslice",
          },
          "limitBits": 56,
          "limitRefs": 0,
          "offsetBits": 88,
          "offsetRefs": 0,
          "source": Cell {
            "_depths": [
              0,
              0,
              0,
              0,
            ],
            "_hashes": [
              {
                "data": [
                  92,
                  154,
                  94,
                  104,
                  193,
                  8,
                  225,
                  135,
                  33,
                  160,
                  124,
                  66,
                  249,
                  149,
                  107,
                  251,
                  57,
                  173,
                  119,
                  236,
                  109,
                  98,
                  75,
                  96,
                  197,
                  118,
                  236,
                  136,
                  238,
                  230,
                  83,
                  41,
                ],
                "type": "Buffer",
              },
              {
                "data": [
                  92,
                  154,
                  94,
                  104,
                  193,
                  8,
                  225,
                  135,
                  33,
                  160,
                  124,
                  66,
                  249,
                  149,
                  107,
                  251,
                  57,
                  173,
                  119,
                  236,
                  109,
                  98,
                  75,
                  96,
                  197,
                  118,
                  236,
                  136,
                  238,
                  230,
                  83,
                  41,
                ],
                "type": "Buffer",
              },
              {
                "data": [
                  92,
                  154,
                  94,
                  104,
                  193,
                  8,
                  225,
                  135,
                  33,
                  160,
                  124,
                  66,
                  249,
                  149,
                  107,
                  251,
                  57,
                  173,
                  119,
                  236,
                  109,
                  98,
                  75,
                  96,
                  197,
                  118,
                  236,
                  136,
                  238,
                  230,
                  83,
                  41,
                ],
                "type": "Buffer",
              },
              {
                "data": [
                  92,
                  154,
                  94,
                  104,
                  193,
                  8,
                  225,
                  135,
                  33,
                  160,
                  124,
                  66,
                  249,
                  149,
                  107,
                  251,
                  57,
                  173,
                  119,
                  236,
                  109,
                  98,
                  75,
                  96,
                  197,
                  118,
                  236,
                  136,
                  238,
                  230,
                  83,
                  41,
                ],
                "type": "Buffer",
              },
            ],
            "beginParse": [Function],
            "bits": BitString {
              "_data": {
                "data": [
                  0,
                  170,
                  255,
                  0,
                  32,
                  221,
                  32,
                  130,
                  1,
                  76,
                  151,
                  186,
                  151,
                  48,
                  237,
                  68,
                  208,
                  215,
                  11,
                  31,
                  224,
                  164,
                  242,
                  96,
                  131,
                  8,
                  215,
                  24,
                  32,
                  211,
                  31,
                  211,
                  31,
                  1,
                  248,
                  35,
                  187,
                  242,
                  99,
                  237,
                  68,
                  208,
                  211,
                  31,
                  211,
                  255,
                  209,
                  81,
                  49,
                  186,
                  242,
                  161,
                  3,
                  249,
                  1,
                  84,
                  16,
                  66,
                  249,
                  16,
                  242,
                  162,
                  248,
                  0,
                  2,
                  147,
                  32,
                  215,
                  74,
                  150,
                  211,
                  7,
                  212,
                  2,
                  251,
                  0,
                  232,
                  209,
                  164,
                  200,
                  203,
                  31,
                  203,
                  255,
                  201,
                  237,
                  84,
                ],
                "type": "Buffer",
              },
              "_length": 680,
              "_offset": 16,
              Symbol(nodejs.util.inspect.custom): [Function],
            },
            "depth": [Function],
            "equals": [Function],
            "hash": [Function],
            "level": [Function],
            "mask": LevelMask {
              "_hashCount": 1,
              "_hashIndex": 0,
              "_mask": 0,
            },
            "refs": [],
            "type": -1,
            Symbol(nodejs.util.inspect.custom): [Function],
          },
          "type": "subslice",
          "value": Cell {
            "_depths": [
              0,
              0,
              0,
              0,
            ],
            "_hashes": [
              {
                "data": [
                  146,
                  248,
                  50,
                  13,
                  116,
                  175,
                  128,
                  184,
                  139,
                  28,
                  143,
                  253,
                  28,
                  131,
                  113,
                  132,
                  54,
                  195,
                  69,
                  224,
                  22,
                  141,
                  255,
                  225,
                  160,
                  13,
                  49,
                  130,
                  97,
                  193,
                  233,
                  54,
                ],
                "type": "Buffer",
              },
              {
                "data": [
                  146,
                  248,
                  50,
                  13,
                  116,
                  175,
                  128,
                  184,
                  139,
                  28,
                  143,
                  253,
                  28,
                  131,
                  113,
                  132,
                  54,
                  195,
                  69,
                  224,
                  22,
                  141,
                  255,
                  225,
                  160,
                  13,
                  49,
                  130,
                  97,
                  193,
                  233,
                  54,
                ],
                "type": "Buffer",
              },
              {
                "data": [
                  146,
                  248,
                  50,
                  13,
                  116,
                  175,
                  128,
                  184,
                  139,
                  28,
                  143,
                  253,
                  28,
                  131,
                  113,
                  132,
                  54,
                  195,
                  69,
                  224,
                  22,
                  141,
                  255,
                  225,
                  160,
                  13,
                  49,
                  130,
                  97,
                  193,
                  233,
                  54,
                ],
                "type": "Buffer",
              },
              {
                "data": [
                  146,
                  248,
                  50,
                  13,
                  116,
                  175,
                  128,
                  184,
                  139,
                  28,
                  143,
                  253,
                  28,
                  131,
                  113,
                  132,
                  54,
                  195,
                  69,
                  224,
                  22,
                  141,
                  255,
                  225,
                  160,
                  13,
                  49,
                  130,
                  97,
                  193,
                  233,
                  54,
                ],
                "type": "Buffer",
              },
            ],
            "beginParse": [Function],
            "bits": BitString {
              "_data": {
                "data": [
                  48,
                  237,
                  68,
                  208,
                  215,
                  11,
                  31,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                ],
                "type": "Buffer",
              },
              "_length": 56,
              "_offset": 0,
              Symbol(nodejs.util.inspect.custom): [Function],
            },
            "depth": [Function],
            "equals": [Function],
            "hash": [Function],
            "level": [Function],
            "mask": LevelMask {
              "_hashCount": 1,
              "_hashIndex": 0,
              "_mask": 0,
            },
            "refs": [],
            "type": -1,
            Symbol(nodejs.util.inspect.custom): [Function],
          },
        },
      ],
    },
  },
  {
    "hash": "5c9a5e68c108e18721a07c42f9956bfb39ad77ec6d624b60c576ec88eee65329",
    "length": 8,
    "offset": 144,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [],
          "prefix": "E0",
          "tlb": "#E0",
        },
        "control_flow": {
          "branches": [
            {
              "type": "variable",
              "var_name": "c",
            },
          ],
          "nobranch": true,
        },
        "doc": {
          "category": "cont_conditional",
          "description": "Jumps to \`c\` (similarly to \`JMPX\`), but only if \`f\` is non-zero.",
          "fift": "IFJMP",
          "fift_examples": [
            {
              "description": "Equivalent to \`<{ code }> CONT\` \`IFJMP\`.",
              "fift": "IFJMP:<{ code }>",
            },
          ],
          "gas": "18",
          "opcode": "E0",
          "stack": "f c - ",
        },
        "mnemonic": "IFJMP",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "f",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
              {
                "name": "c",
                "type": "simple",
                "value_types": [
                  "Continuation",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [],
          },
        },
      },
      "operands": [],
    },
  },
  {
    "hash": "5c9a5e68c108e18721a07c42f9956bfb39ad77ec6d624b60c576ec88eee65329",
    "length": 8,
    "offset": 152,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [],
          "prefix": "A4",
          "tlb": "#A4",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "arithm_basic",
          "description": "Equivalent to \`1 ADDCONST\`.",
          "fift": "INC",
          "fift_examples": [],
          "gas": "18",
          "opcode": "A4",
          "stack": "x - x+1",
        },
        "mnemonic": "INC",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "x",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [
              {
                "name": "result",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
            ],
          },
        },
      },
      "operands": [],
    },
  },
  {
    "hash": "5c9a5e68c108e18721a07c42f9956bfb39ad77ec6d624b60c576ec88eee65329",
    "length": 16,
    "offset": 160,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "display_hints": [],
              "max_value": 63,
              "min_value": 0,
              "name": "n",
              "size": 6,
              "type": "uint",
            },
          ],
          "prefix": "F26_",
          "tlb": "#F26_ n:uint6",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "exceptions",
          "description": "Throws exception \`0 <= n <= 63\` with  parameter zero only if integer \`f!=0\`.",
          "fift": "[n] THROWIF",
          "fift_examples": [],
          "gas": "26/76",
          "opcode": "F26_n",
          "stack": "f - ",
        },
        "mnemonic": "THROWIF_SHORT",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "f",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "display_hints": [],
            "max_value": 63,
            "min_value": 0,
            "name": "n",
            "size": 6,
            "type": "uint",
          },
          "type": "numeric",
          "value": 32,
        },
      ],
    },
  },
  {
    "hash": "5c9a5e68c108e18721a07c42f9956bfb39ad77ec6d624b60c576ec88eee65329",
    "length": 16,
    "offset": 176,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "display_hints": [
                {
                  "type": "add",
                  "value": 1,
                },
              ],
              "max_value": 254,
              "min_value": 0,
              "name": "x",
              "size": 8,
              "type": "uint",
            },
          ],
          "operands_range_check": {
            "from": 0,
            "length": 8,
            "to": 254,
          },
          "prefix": "83",
          "tlb": "#83 xx:uint8",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "const_int",
          "description": "(Quietly) pushes \`2^(xx+1)\` for \`0 <= xx <= 255\`.
\`2^256\` is a \`NaN\`.",
          "fift": "[xx+1] PUSHPOW2",
          "fift_examples": [],
          "gas": "26",
          "opcode": "83xx",
          "stack": "- 2^(xx+1)",
        },
        "mnemonic": "PUSHPOW2",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [],
          },
          "outputs": {
            "registers": [],
            "stack": [
              {
                "name": "result",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
            ],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "display_hints": [
              {
                "type": "add",
                "value": 1,
              },
            ],
            "max_value": 254,
            "min_value": 0,
            "name": "x",
            "size": 8,
            "type": "uint",
          },
          "type": "numeric",
          "value": 8,
        },
      ],
    },
  },
  {
    "hash": "5c9a5e68c108e18721a07c42f9956bfb39ad77ec6d624b60c576ec88eee65329",
    "length": 16,
    "offset": 192,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [],
          "prefix": "D718",
          "tlb": "#D718",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "cell_parse",
          "description": "Loads the first \`0 <= l <= 1023\` bits from _Slice_ \`s\` into a separate _Slice_ \`s''\`, returning the remainder of \`s\` as \`s'\`.",
          "fift": "LDSLICEX",
          "fift_examples": [],
          "gas": "26",
          "opcode": "D718",
          "stack": "s l - s'' s'",
        },
        "mnemonic": "LDSLICEX",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "s",
                "type": "simple",
                "value_types": [
                  "Slice",
                ],
              },
              {
                "name": "l",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [
              {
                "name": "s3",
                "type": "simple",
                "value_types": [
                  "Slice",
                ],
              },
              {
                "name": "s2",
                "type": "simple",
                "value_types": [
                  "Slice",
                ],
              },
            ],
          },
        },
      },
      "operands": [],
    },
  },
  {
    "hash": "5c9a5e68c108e18721a07c42f9956bfb39ad77ec6d624b60c576ec88eee65329",
    "length": 8,
    "offset": 208,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "display_hints": [
                {
                  "type": "stack",
                },
              ],
              "max_value": 15,
              "min_value": 0,
              "name": "i",
              "size": 4,
              "type": "uint",
            },
          ],
          "prefix": "2",
          "tlb": "#2 i:uint4",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "stack_basic",
          "description": "Pushes a copy of the old \`s[i]\` into the stack.",
          "fift": "s[i] PUSH",
          "fift_examples": [],
          "gas": "18",
          "opcode": "2i",
          "stack": "",
        },
        "mnemonic": "PUSH",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
          },
          "outputs": {
            "registers": [],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "display_hints": [
              {
                "type": "stack",
              },
            ],
            "max_value": 15,
            "min_value": 0,
            "name": "i",
            "size": 4,
            "type": "uint",
          },
          "type": "numeric",
          "value": 0,
        },
      ],
    },
  },
  {
    "hash": "5c9a5e68c108e18721a07c42f9956bfb39ad77ec6d624b60c576ec88eee65329",
    "length": 16,
    "offset": 216,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "display_hints": [
                {
                  "type": "add",
                  "value": 1,
                },
              ],
              "max_value": 255,
              "min_value": 0,
              "name": "c",
              "size": 8,
              "type": "uint",
            },
          ],
          "prefix": "D3",
          "tlb": "#D3 cc:uint8",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "cell_parse",
          "description": "Loads an unsigned \`cc+1\`-bit integer \`x\` from _Slice_ \`s\`.",
          "fift": "[cc+1] LDU",
          "fift_examples": [],
          "gas": "26",
          "opcode": "D3cc",
          "stack": "s - x s'",
        },
        "mnemonic": "LDU",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "s",
                "type": "simple",
                "value_types": [
                  "Slice",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [
              {
                "name": "x",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
              {
                "name": "s2",
                "type": "simple",
                "value_types": [
                  "Slice",
                ],
              },
            ],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "display_hints": [
              {
                "type": "add",
                "value": 1,
              },
            ],
            "max_value": 255,
            "min_value": 0,
            "name": "c",
            "size": 8,
            "type": "uint",
          },
          "type": "numeric",
          "value": 31,
        },
      ],
    },
  },
  {
    "hash": "5c9a5e68c108e18721a07c42f9956bfb39ad77ec6d624b60c576ec88eee65329",
    "length": 16,
    "offset": 232,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "display_hints": [
                {
                  "type": "add",
                  "value": 1,
                },
              ],
              "max_value": 255,
              "min_value": 0,
              "name": "c",
              "size": 8,
              "type": "uint",
            },
          ],
          "prefix": "D3",
          "tlb": "#D3 cc:uint8",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "cell_parse",
          "description": "Loads an unsigned \`cc+1\`-bit integer \`x\` from _Slice_ \`s\`.",
          "fift": "[cc+1] LDU",
          "fift_examples": [],
          "gas": "26",
          "opcode": "D3cc",
          "stack": "s - x s'",
        },
        "mnemonic": "LDU",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "s",
                "type": "simple",
                "value_types": [
                  "Slice",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [
              {
                "name": "x",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
              {
                "name": "s2",
                "type": "simple",
                "value_types": [
                  "Slice",
                ],
              },
            ],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "display_hints": [
              {
                "type": "add",
                "value": 1,
              },
            ],
            "max_value": 255,
            "min_value": 0,
            "name": "c",
            "size": 8,
            "type": "uint",
          },
          "type": "numeric",
          "value": 31,
        },
      ],
    },
  },
  {
    "hash": "5c9a5e68c108e18721a07c42f9956bfb39ad77ec6d624b60c576ec88eee65329",
    "length": 8,
    "offset": 248,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "display_hints": [
                {
                  "type": "stack",
                },
              ],
              "max_value": 15,
              "min_value": 1,
              "name": "i",
              "size": 4,
              "type": "uint",
            },
          ],
          "operands_range_check": {
            "from": 1,
            "length": 4,
            "to": 15,
          },
          "prefix": "0",
          "tlb": "#0 i:(## 4) {1 <= i}",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "stack_basic",
          "description": "Interchanges \`s0\` with \`s[i]\`, \`1 <= i <= 15\`.",
          "fift": "s[i] XCHG0",
          "fift_examples": [],
          "gas": "18",
          "opcode": "0i",
          "stack": "",
        },
        "mnemonic": "XCHG_0I",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
          },
          "outputs": {
            "registers": [],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "display_hints": [
              {
                "type": "stack",
              },
            ],
            "max_value": 15,
            "min_value": 1,
            "name": "i",
            "size": 4,
            "type": "uint",
          },
          "type": "numeric",
          "value": 1,
        },
      ],
    },
  },
  {
    "hash": "5c9a5e68c108e18721a07c42f9956bfb39ad77ec6d624b60c576ec88eee65329",
    "length": 16,
    "offset": 256,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "display_hints": [],
              "max_value": 15,
              "min_value": 0,
              "name": "i",
              "size": 4,
              "type": "uint",
            },
          ],
          "prefix": "F82",
          "tlb": "#F82 i:uint4",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "app_config",
          "description": "Returns the \`i\`-th parameter from the _Tuple_ provided at \`c7\` for \`0 <= i <= 15\`. Equivalent to \`c7 PUSHCTR\` \`FIRST\` \`[i] INDEX\`.
If one of these internal operations fails, throws an appropriate type checking or range checking exception.",
          "fift": "[i] GETPARAM",
          "fift_examples": [],
          "gas": "26",
          "opcode": "F82i",
          "stack": " - x",
        },
        "mnemonic": "GETPARAM",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [
              {
                "index": 7,
                "type": "constant",
              },
            ],
            "stack": [],
          },
          "outputs": {
            "registers": [],
            "stack": [
              {
                "name": "x",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
            ],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "display_hints": [],
            "max_value": 15,
            "min_value": 0,
            "name": "i",
            "size": 4,
            "type": "uint",
          },
          "type": "numeric",
          "value": 3,
        },
      ],
    },
  },
  {
    "hash": "5c9a5e68c108e18721a07c42f9956bfb39ad77ec6d624b60c576ec88eee65329",
    "length": 8,
    "offset": 272,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [],
          "prefix": "BB",
          "tlb": "#BB",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "compare_int",
          "description": "",
          "fift": "LEQ",
          "fift_examples": [],
          "gas": "18",
          "opcode": "BB",
          "stack": "x y - x<=y",
        },
        "mnemonic": "LEQ",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "x",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
              {
                "name": "y",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [
              {
                "name": "result",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
            ],
          },
        },
      },
      "operands": [],
    },
  },
  {
    "hash": "5c9a5e68c108e18721a07c42f9956bfb39ad77ec6d624b60c576ec88eee65329",
    "length": 16,
    "offset": 280,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "display_hints": [],
              "max_value": 63,
              "min_value": 0,
              "name": "n",
              "size": 6,
              "type": "uint",
            },
          ],
          "prefix": "F26_",
          "tlb": "#F26_ n:uint6",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "exceptions",
          "description": "Throws exception \`0 <= n <= 63\` with  parameter zero only if integer \`f!=0\`.",
          "fift": "[n] THROWIF",
          "fift_examples": [],
          "gas": "26/76",
          "opcode": "F26_n",
          "stack": "f - ",
        },
        "mnemonic": "THROWIF_SHORT",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "f",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "display_hints": [],
            "max_value": 63,
            "min_value": 0,
            "name": "n",
            "size": 6,
            "type": "uint",
          },
          "type": "numeric",
          "value": 35,
        },
      ],
    },
  },
  {
    "hash": "5c9a5e68c108e18721a07c42f9956bfb39ad77ec6d624b60c576ec88eee65329",
    "length": 16,
    "offset": 296,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "display_hints": [
                {
                  "type": "register",
                },
              ],
              "max_value": 15,
              "min_value": 0,
              "name": "i",
              "size": 4,
              "type": "uint",
            },
          ],
          "prefix": "ED4",
          "tlb": "#ED4 i:uint4",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "cont_registers",
          "description": "Pushes the current value of control register \`c(i)\`. If the control register is not supported in the current codepage, or if it does not have a value, an exception is triggered.",
          "fift": "c[i] PUSHCTR
c[i] PUSH",
          "fift_examples": [],
          "gas": "26",
          "opcode": "ED4i",
          "stack": "- x",
        },
        "mnemonic": "PUSHCTR",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [
              {
                "type": "variable",
                "var_name": "i",
              },
            ],
            "stack": [],
          },
          "outputs": {
            "registers": [],
            "stack": [
              {
                "name": "x",
                "type": "simple",
              },
            ],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "display_hints": [
              {
                "type": "register",
              },
            ],
            "max_value": 15,
            "min_value": 0,
            "name": "i",
            "size": 4,
            "type": "uint",
          },
          "type": "numeric",
          "value": 4,
        },
      ],
    },
  },
  {
    "hash": "5c9a5e68c108e18721a07c42f9956bfb39ad77ec6d624b60c576ec88eee65329",
    "length": 8,
    "offset": 312,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [],
          "prefix": "D0",
          "tlb": "#D0",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "cell_parse",
          "description": "Converts a _Cell_ into a _Slice_. Notice that \`c\` must be either an ordinary cell, or an exotic cell which is automatically _loaded_ to yield an ordinary cell \`c'\`, converted into a _Slice_ afterwards.",
          "fift": "CTOS",
          "fift_examples": [],
          "gas": "118/43",
          "opcode": "D0",
          "stack": "c - s",
        },
        "mnemonic": "CTOS",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "c",
                "type": "simple",
                "value_types": [
                  "Cell",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [
              {
                "name": "s",
                "type": "simple",
                "value_types": [
                  "Slice",
                ],
              },
            ],
          },
        },
      },
      "operands": [],
    },
  },
  {
    "hash": "5c9a5e68c108e18721a07c42f9956bfb39ad77ec6d624b60c576ec88eee65329",
    "length": 16,
    "offset": 320,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "display_hints": [
                {
                  "type": "add",
                  "value": 1,
                },
              ],
              "max_value": 255,
              "min_value": 0,
              "name": "c",
              "size": 8,
              "type": "uint",
            },
          ],
          "prefix": "D3",
          "tlb": "#D3 cc:uint8",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "cell_parse",
          "description": "Loads an unsigned \`cc+1\`-bit integer \`x\` from _Slice_ \`s\`.",
          "fift": "[cc+1] LDU",
          "fift_examples": [],
          "gas": "26",
          "opcode": "D3cc",
          "stack": "s - x s'",
        },
        "mnemonic": "LDU",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "s",
                "type": "simple",
                "value_types": [
                  "Slice",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [
              {
                "name": "x",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
              {
                "name": "s2",
                "type": "simple",
                "value_types": [
                  "Slice",
                ],
              },
            ],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "display_hints": [
              {
                "type": "add",
                "value": 1,
              },
            ],
            "max_value": 255,
            "min_value": 0,
            "name": "c",
            "size": 8,
            "type": "uint",
          },
          "type": "numeric",
          "value": 31,
        },
      ],
    },
  },
  {
    "hash": "5c9a5e68c108e18721a07c42f9956bfb39ad77ec6d624b60c576ec88eee65329",
    "length": 16,
    "offset": 336,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "display_hints": [
                {
                  "type": "add",
                  "value": 1,
                },
              ],
              "max_value": 255,
              "min_value": 0,
              "name": "c",
              "size": 8,
              "type": "uint",
            },
          ],
          "prefix": "D3",
          "tlb": "#D3 cc:uint8",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "cell_parse",
          "description": "Loads an unsigned \`cc+1\`-bit integer \`x\` from _Slice_ \`s\`.",
          "fift": "[cc+1] LDU",
          "fift_examples": [],
          "gas": "26",
          "opcode": "D3cc",
          "stack": "s - x s'",
        },
        "mnemonic": "LDU",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "s",
                "type": "simple",
                "value_types": [
                  "Slice",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [
              {
                "name": "x",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
              {
                "name": "s2",
                "type": "simple",
                "value_types": [
                  "Slice",
                ],
              },
            ],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "display_hints": [
              {
                "type": "add",
                "value": 1,
              },
            ],
            "max_value": 255,
            "min_value": 0,
            "name": "c",
            "size": 8,
            "type": "uint",
          },
          "type": "numeric",
          "value": 255,
        },
      ],
    },
  },
  {
    "hash": "5c9a5e68c108e18721a07c42f9956bfb39ad77ec6d624b60c576ec88eee65329",
    "length": 8,
    "offset": 352,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [],
          "prefix": "D1",
          "tlb": "#D1",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "cell_parse",
          "description": "Removes a _Slice_ \`s\` from the stack, and throws an exception if it is not empty.",
          "fift": "ENDS",
          "fift_examples": [],
          "gas": "18/68",
          "opcode": "D1",
          "stack": "s - ",
        },
        "mnemonic": "ENDS",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "s",
                "type": "simple",
                "value_types": [
                  "Slice",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [],
          },
        },
      },
      "operands": [],
    },
  },
  {
    "hash": "5c9a5e68c108e18721a07c42f9956bfb39ad77ec6d624b60c576ec88eee65329",
    "length": 16,
    "offset": 360,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "display_hints": [
                {
                  "type": "stack",
                },
              ],
              "max_value": 15,
              "min_value": 0,
              "name": "i",
              "size": 4,
              "type": "uint",
            },
            {
              "display_hints": [
                {
                  "type": "stack",
                },
              ],
              "max_value": 15,
              "min_value": 0,
              "name": "j",
              "size": 4,
              "type": "uint",
            },
          ],
          "prefix": "51",
          "tlb": "#51 i:uint4 j:uint4",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "stack_complex",
          "description": "Equivalent to \`s[i] XCHG0\` \`s[j] PUSH\`.",
          "fift": "s[i] s[j] XCPU",
          "fift_examples": [],
          "gas": "26",
          "opcode": "51ij",
          "stack": "",
        },
        "mnemonic": "XCPU",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
          },
          "outputs": {
            "registers": [],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "display_hints": [
              {
                "type": "stack",
              },
            ],
            "max_value": 15,
            "min_value": 0,
            "name": "i",
            "size": 4,
            "type": "uint",
          },
          "type": "numeric",
          "value": 3,
        },
        {
          "definition": {
            "display_hints": [
              {
                "type": "stack",
              },
            ],
            "max_value": 15,
            "min_value": 0,
            "name": "j",
            "size": 4,
            "type": "uint",
          },
          "type": "numeric",
          "value": 1,
        },
      ],
    },
  },
  {
    "hash": "5c9a5e68c108e18721a07c42f9956bfb39ad77ec6d624b60c576ec88eee65329",
    "length": 8,
    "offset": 376,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [],
          "prefix": "BA",
          "tlb": "#BA",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "compare_int",
          "description": "Returns \`-1\` if \`x=y\`, \`0\` otherwise.",
          "fift": "EQUAL",
          "fift_examples": [],
          "gas": "18",
          "opcode": "BA",
          "stack": "x y - x=y",
        },
        "mnemonic": "EQUAL",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "x",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
              {
                "name": "y",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [
              {
                "name": "result",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
            ],
          },
        },
      },
      "operands": [],
    },
  },
  {
    "hash": "5c9a5e68c108e18721a07c42f9956bfb39ad77ec6d624b60c576ec88eee65329",
    "length": 16,
    "offset": 384,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "display_hints": [],
              "max_value": 63,
              "min_value": 0,
              "name": "n",
              "size": 6,
              "type": "uint",
            },
          ],
          "prefix": "F2A_",
          "tlb": "#F2A_ n:uint6",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "exceptions",
          "description": "Throws exception \`0 <= n <= 63\` with parameter zero only if integer \`f=0\`.",
          "fift": "[n] THROWIFNOT",
          "fift_examples": [],
          "gas": "26/76",
          "opcode": "F2A_n",
          "stack": "f - ",
        },
        "mnemonic": "THROWIFNOT_SHORT",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "f",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "display_hints": [],
            "max_value": 63,
            "min_value": 0,
            "name": "n",
            "size": 6,
            "type": "uint",
          },
          "type": "numeric",
          "value": 33,
        },
      ],
    },
  },
  {
    "hash": "5c9a5e68c108e18721a07c42f9956bfb39ad77ec6d624b60c576ec88eee65329",
    "length": 8,
    "offset": 400,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "display_hints": [
                {
                  "type": "stack",
                },
              ],
              "max_value": 15,
              "min_value": 1,
              "name": "i",
              "size": 4,
              "type": "uint",
            },
          ],
          "operands_range_check": {
            "from": 1,
            "length": 4,
            "to": 15,
          },
          "prefix": "0",
          "tlb": "#0 i:(## 4) {1 <= i}",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "stack_basic",
          "description": "Interchanges \`s0\` with \`s[i]\`, \`1 <= i <= 15\`.",
          "fift": "s[i] XCHG0",
          "fift_examples": [],
          "gas": "18",
          "opcode": "0i",
          "stack": "",
        },
        "mnemonic": "XCHG_0I",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
          },
          "outputs": {
            "registers": [],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "display_hints": [
              {
                "type": "stack",
              },
            ],
            "max_value": 15,
            "min_value": 1,
            "name": "i",
            "size": 4,
            "type": "uint",
          },
          "type": "numeric",
          "value": 3,
        },
      ],
    },
  },
  {
    "hash": "5c9a5e68c108e18721a07c42f9956bfb39ad77ec6d624b60c576ec88eee65329",
    "length": 16,
    "offset": 408,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [],
          "prefix": "F901",
          "tlb": "#F901",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "app_crypto",
          "description": "Computes the hash of a _Slice_ \`s\` and returns it as a 256-bit unsigned integer \`x\`. The result is the same as if an ordinary cell containing only data and references from \`s\` had been created and its hash computed by \`HASHCU\`.",
          "fift": "HASHSU",
          "fift_examples": [],
          "gas": "526",
          "opcode": "F901",
          "stack": "s - x",
        },
        "mnemonic": "HASHSU",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "s",
                "type": "simple",
                "value_types": [
                  "Slice",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [
              {
                "name": "x",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
            ],
          },
        },
      },
      "operands": [],
    },
  },
  {
    "hash": "5c9a5e68c108e18721a07c42f9956bfb39ad77ec6d624b60c576ec88eee65329",
    "length": 24,
    "offset": 424,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "display_hints": [
                {
                  "type": "stack",
                },
              ],
              "max_value": 15,
              "min_value": 0,
              "name": "i",
              "size": 4,
              "type": "uint",
            },
            {
              "display_hints": [
                {
                  "type": "stack",
                },
              ],
              "max_value": 15,
              "min_value": 0,
              "name": "j",
              "size": 4,
              "type": "uint",
            },
            {
              "display_hints": [
                {
                  "type": "stack",
                },
              ],
              "max_value": 15,
              "min_value": 0,
              "name": "k",
              "size": 4,
              "type": "uint",
            },
          ],
          "prefix": "541",
          "tlb": "#541 i:uint4 j:uint4 k:uint4",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "stack_complex",
          "description": "Equivalent to \`s[i] s[j] XCHG2\` \`s[k] PUSH\`.",
          "fift": "s[i] s[j] s[k] XC2PU",
          "fift_examples": [],
          "gas": "34",
          "opcode": "541ijk",
          "stack": "",
        },
        "mnemonic": "XC2PU",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
          },
          "outputs": {
            "registers": [],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "display_hints": [
              {
                "type": "stack",
              },
            ],
            "max_value": 15,
            "min_value": 0,
            "name": "i",
            "size": 4,
            "type": "uint",
          },
          "type": "numeric",
          "value": 0,
        },
        {
          "definition": {
            "display_hints": [
              {
                "type": "stack",
              },
            ],
            "max_value": 15,
            "min_value": 0,
            "name": "j",
            "size": 4,
            "type": "uint",
          },
          "type": "numeric",
          "value": 4,
        },
        {
          "definition": {
            "display_hints": [
              {
                "type": "stack",
              },
            ],
            "max_value": 15,
            "min_value": 0,
            "name": "k",
            "size": 4,
            "type": "uint",
          },
          "type": "numeric",
          "value": 2,
        },
      ],
    },
  },
  {
    "hash": "5c9a5e68c108e18721a07c42f9956bfb39ad77ec6d624b60c576ec88eee65329",
    "length": 16,
    "offset": 448,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [],
          "prefix": "F910",
          "tlb": "#F910",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "app_crypto",
          "description": "Checks the Ed25519-signature \`s\` of a hash \`h\` (a 256-bit unsigned integer, usually computed as the hash of some data) using public key \`k\` (also represented by a 256-bit unsigned integer).
The signature \`s\` must be a _Slice_ containing at least 512 data bits; only the first 512 bits are used. The result is \`-1\` if the signature is valid, \`0\` otherwise.
Notice that \`CHKSIGNU\` is equivalent to \`ROT\` \`NEWC\` \`256 STU\` \`ENDC\` \`ROTREV\` \`CHKSIGNS\`, i.e., to \`CHKSIGNS\` with the first argument \`d\` set to 256-bit _Slice_ containing \`h\`. Therefore, if \`h\` is computed as the hash of some data, these data are hashed _twice_, the second hashing occurring inside \`CHKSIGNS\`.",
          "fift": "CHKSIGNU",
          "fift_examples": [],
          "gas": "26",
          "opcode": "F910",
          "stack": "h s k - ?",
        },
        "mnemonic": "CHKSIGNU",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "h",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
              {
                "name": "s",
                "type": "simple",
                "value_types": [
                  "Slice",
                ],
              },
              {
                "name": "k",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [
              {
                "name": "result",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
            ],
          },
        },
      },
      "operands": [],
    },
  },
  {
    "hash": "5c9a5e68c108e18721a07c42f9956bfb39ad77ec6d624b60c576ec88eee65329",
    "length": 16,
    "offset": 464,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "display_hints": [],
              "max_value": 63,
              "min_value": 0,
              "name": "n",
              "size": 6,
              "type": "uint",
            },
          ],
          "prefix": "F2A_",
          "tlb": "#F2A_ n:uint6",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "exceptions",
          "description": "Throws exception \`0 <= n <= 63\` with parameter zero only if integer \`f=0\`.",
          "fift": "[n] THROWIFNOT",
          "fift_examples": [],
          "gas": "26/76",
          "opcode": "F2A_n",
          "stack": "f - ",
        },
        "mnemonic": "THROWIFNOT_SHORT",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "f",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "display_hints": [],
            "max_value": 63,
            "min_value": 0,
            "name": "n",
            "size": 6,
            "type": "uint",
          },
          "type": "numeric",
          "value": 34,
        },
      ],
    },
  },
  {
    "hash": "5c9a5e68c108e18721a07c42f9956bfb39ad77ec6d624b60c576ec88eee65329",
    "length": 16,
    "offset": 480,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [],
          "prefix": "F800",
          "tlb": "#F800",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "app_gas",
          "description": "Sets current gas limit \`g_l\` to its maximal allowed value \`g_m\`, and resets the gas credit \`g_c\` to zero, decreasing the value of \`g_r\` by \`g_c\` in the process.
In other words, the current smart contract agrees to buy some gas to finish the current transaction. This action is required to process external messages, which bring no value (hence no gas) with themselves.",
          "fift": "ACCEPT",
          "fift_examples": [],
          "gas": "26",
          "opcode": "F800",
          "stack": "-",
        },
        "mnemonic": "ACCEPT",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [
              {
                "name": "gas",
                "type": "special",
              },
            ],
            "stack": [],
          },
          "outputs": {
            "registers": [
              {
                "name": "gas",
                "type": "special",
              },
            ],
            "stack": [],
          },
        },
      },
      "operands": [],
    },
  },
  {
    "hash": "5c9a5e68c108e18721a07c42f9956bfb39ad77ec6d624b60c576ec88eee65329",
    "length": 8,
    "offset": 496,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "display_hints": [
                {
                  "type": "stack",
                },
              ],
              "max_value": 15,
              "min_value": 1,
              "name": "i",
              "size": 4,
              "type": "uint",
            },
          ],
          "operands_range_check": {
            "from": 1,
            "length": 4,
            "to": 15,
          },
          "prefix": "0",
          "tlb": "#0 i:(## 4) {1 <= i}",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "stack_basic",
          "description": "Interchanges \`s0\` with \`s[i]\`, \`1 <= i <= 15\`.",
          "fift": "s[i] XCHG0",
          "fift_examples": [],
          "gas": "18",
          "opcode": "0i",
          "stack": "",
        },
        "mnemonic": "XCHG_0I",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
          },
          "outputs": {
            "registers": [],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "display_hints": [
              {
                "type": "stack",
              },
            ],
            "max_value": 15,
            "min_value": 1,
            "name": "i",
            "size": 4,
            "type": "uint",
          },
          "type": "numeric",
          "value": 2,
        },
      ],
    },
  },
  {
    "hash": "5c9a5e68c108e18721a07c42f9956bfb39ad77ec6d624b60c576ec88eee65329",
    "length": 32,
    "offset": 504,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "bits_length_var_size": 4,
              "bits_padding": 0,
              "completion_tag": false,
              "display_hints": [
                {
                  "type": "continuation",
                },
              ],
              "max_bits": 120,
              "max_refs": 0,
              "min_bits": 0,
              "min_refs": 0,
              "name": "s",
              "type": "subslice",
            },
          ],
          "prefix": "9",
          "tlb": "#9 x:(## 4) ssss:((8 * x) * Bit)",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "const_data",
          "description": "Pushes a continuation made from \`builder\`.
_Details:_ Pushes an \`x\`-byte continuation for \`0 <= x <= 15\`.",
          "fift": "[builder] PUSHCONT
[builder] CONT",
          "fift_examples": [
            {
              "description": "Pushes a continuation with code \`code\`. Note that the assembler can replace \`PUSHCONT\` with \`PUSHREFCONT\` in certain situations (e.g. if there's not enough space in the current continuation).",
              "fift": "<{ code }> PUSHCONT <{ code }> CONT CONT:<{ code }>",
            },
          ],
          "gas": "18",
          "opcode": "9xccc",
          "stack": "- c",
        },
        "mnemonic": "PUSHCONT_SHORT",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [],
          },
          "outputs": {
            "registers": [],
            "stack": [
              {
                "name": "c",
                "type": "simple",
                "value_types": [
                  "Continuation",
                ],
              },
            ],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "bits_length_var_size": 4,
            "bits_padding": 0,
            "completion_tag": false,
            "display_hints": [
              {
                "type": "continuation",
              },
            ],
            "max_bits": 120,
            "max_refs": 0,
            "min_bits": 0,
            "min_refs": 0,
            "name": "s",
            "type": "subslice",
          },
          "limitBits": 24,
          "limitRefs": 0,
          "offsetBits": 512,
          "offsetRefs": 0,
          "source": Cell {
            "_depths": [
              0,
              0,
              0,
              0,
            ],
            "_hashes": [
              {
                "data": [
                  92,
                  154,
                  94,
                  104,
                  193,
                  8,
                  225,
                  135,
                  33,
                  160,
                  124,
                  66,
                  249,
                  149,
                  107,
                  251,
                  57,
                  173,
                  119,
                  236,
                  109,
                  98,
                  75,
                  96,
                  197,
                  118,
                  236,
                  136,
                  238,
                  230,
                  83,
                  41,
                ],
                "type": "Buffer",
              },
              {
                "data": [
                  92,
                  154,
                  94,
                  104,
                  193,
                  8,
                  225,
                  135,
                  33,
                  160,
                  124,
                  66,
                  249,
                  149,
                  107,
                  251,
                  57,
                  173,
                  119,
                  236,
                  109,
                  98,
                  75,
                  96,
                  197,
                  118,
                  236,
                  136,
                  238,
                  230,
                  83,
                  41,
                ],
                "type": "Buffer",
              },
              {
                "data": [
                  92,
                  154,
                  94,
                  104,
                  193,
                  8,
                  225,
                  135,
                  33,
                  160,
                  124,
                  66,
                  249,
                  149,
                  107,
                  251,
                  57,
                  173,
                  119,
                  236,
                  109,
                  98,
                  75,
                  96,
                  197,
                  118,
                  236,
                  136,
                  238,
                  230,
                  83,
                  41,
                ],
                "type": "Buffer",
              },
              {
                "data": [
                  92,
                  154,
                  94,
                  104,
                  193,
                  8,
                  225,
                  135,
                  33,
                  160,
                  124,
                  66,
                  249,
                  149,
                  107,
                  251,
                  57,
                  173,
                  119,
                  236,
                  109,
                  98,
                  75,
                  96,
                  197,
                  118,
                  236,
                  136,
                  238,
                  230,
                  83,
                  41,
                ],
                "type": "Buffer",
              },
            ],
            "beginParse": [Function],
            "bits": BitString {
              "_data": {
                "data": [
                  0,
                  170,
                  255,
                  0,
                  32,
                  221,
                  32,
                  130,
                  1,
                  76,
                  151,
                  186,
                  151,
                  48,
                  237,
                  68,
                  208,
                  215,
                  11,
                  31,
                  224,
                  164,
                  242,
                  96,
                  131,
                  8,
                  215,
                  24,
                  32,
                  211,
                  31,
                  211,
                  31,
                  1,
                  248,
                  35,
                  187,
                  242,
                  99,
                  237,
                  68,
                  208,
                  211,
                  31,
                  211,
                  255,
                  209,
                  81,
                  49,
                  186,
                  242,
                  161,
                  3,
                  249,
                  1,
                  84,
                  16,
                  66,
                  249,
                  16,
                  242,
                  162,
                  248,
                  0,
                  2,
                  147,
                  32,
                  215,
                  74,
                  150,
                  211,
                  7,
                  212,
                  2,
                  251,
                  0,
                  232,
                  209,
                  164,
                  200,
                  203,
                  31,
                  203,
                  255,
                  201,
                  237,
                  84,
                ],
                "type": "Buffer",
              },
              "_length": 680,
              "_offset": 16,
              Symbol(nodejs.util.inspect.custom): [Function],
            },
            "depth": [Function],
            "equals": [Function],
            "hash": [Function],
            "level": [Function],
            "mask": LevelMask {
              "_hashCount": 1,
              "_hashIndex": 0,
              "_mask": 0,
            },
            "refs": [],
            "type": -1,
            Symbol(nodejs.util.inspect.custom): [Function],
          },
          "type": "subslice",
          "value": Cell {
            "_depths": [
              0,
              0,
              0,
              0,
            ],
            "_hashes": [
              {
                "data": [
                  98,
                  44,
                  20,
                  148,
                  189,
                  180,
                  138,
                  130,
                  174,
                  44,
                  239,
                  18,
                  138,
                  4,
                  250,
                  32,
                  130,
                  121,
                  233,
                  213,
                  92,
                  74,
                  67,
                  5,
                  144,
                  105,
                  176,
                  117,
                  36,
                  154,
                  62,
                  182,
                ],
                "type": "Buffer",
              },
              {
                "data": [
                  98,
                  44,
                  20,
                  148,
                  189,
                  180,
                  138,
                  130,
                  174,
                  44,
                  239,
                  18,
                  138,
                  4,
                  250,
                  32,
                  130,
                  121,
                  233,
                  213,
                  92,
                  74,
                  67,
                  5,
                  144,
                  105,
                  176,
                  117,
                  36,
                  154,
                  62,
                  182,
                ],
                "type": "Buffer",
              },
              {
                "data": [
                  98,
                  44,
                  20,
                  148,
                  189,
                  180,
                  138,
                  130,
                  174,
                  44,
                  239,
                  18,
                  138,
                  4,
                  250,
                  32,
                  130,
                  121,
                  233,
                  213,
                  92,
                  74,
                  67,
                  5,
                  144,
                  105,
                  176,
                  117,
                  36,
                  154,
                  62,
                  182,
                ],
                "type": "Buffer",
              },
              {
                "data": [
                  98,
                  44,
                  20,
                  148,
                  189,
                  180,
                  138,
                  130,
                  174,
                  44,
                  239,
                  18,
                  138,
                  4,
                  250,
                  32,
                  130,
                  121,
                  233,
                  213,
                  92,
                  74,
                  67,
                  5,
                  144,
                  105,
                  176,
                  117,
                  36,
                  154,
                  62,
                  182,
                ],
                "type": "Buffer",
              },
            ],
            "beginParse": [Function],
            "bits": BitString {
              "_data": {
                "data": [
                  32,
                  215,
                  74,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                ],
                "type": "Buffer",
              },
              "_length": 24,
              "_offset": 0,
              Symbol(nodejs.util.inspect.custom): [Function],
            },
            "depth": [Function],
            "equals": [Function],
            "hash": [Function],
            "level": [Function],
            "mask": LevelMask {
              "_hashCount": 1,
              "_hashIndex": 0,
              "_mask": 0,
            },
            "refs": [],
            "type": -1,
            Symbol(nodejs.util.inspect.custom): [Function],
          },
        },
      ],
    },
  },
  {
    "hash": "5c9a5e68c108e18721a07c42f9956bfb39ad77ec6d624b60c576ec88eee65329",
    "length": 56,
    "offset": 536,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "bits_length_var_size": 4,
              "bits_padding": 0,
              "completion_tag": false,
              "display_hints": [
                {
                  "type": "continuation",
                },
              ],
              "max_bits": 120,
              "max_refs": 0,
              "min_bits": 0,
              "min_refs": 0,
              "name": "s",
              "type": "subslice",
            },
          ],
          "prefix": "9",
          "tlb": "#9 x:(## 4) ssss:((8 * x) * Bit)",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "const_data",
          "description": "Pushes a continuation made from \`builder\`.
_Details:_ Pushes an \`x\`-byte continuation for \`0 <= x <= 15\`.",
          "fift": "[builder] PUSHCONT
[builder] CONT",
          "fift_examples": [
            {
              "description": "Pushes a continuation with code \`code\`. Note that the assembler can replace \`PUSHCONT\` with \`PUSHREFCONT\` in certain situations (e.g. if there's not enough space in the current continuation).",
              "fift": "<{ code }> PUSHCONT <{ code }> CONT CONT:<{ code }>",
            },
          ],
          "gas": "18",
          "opcode": "9xccc",
          "stack": "- c",
        },
        "mnemonic": "PUSHCONT_SHORT",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [],
          },
          "outputs": {
            "registers": [],
            "stack": [
              {
                "name": "c",
                "type": "simple",
                "value_types": [
                  "Continuation",
                ],
              },
            ],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "bits_length_var_size": 4,
            "bits_padding": 0,
            "completion_tag": false,
            "display_hints": [
              {
                "type": "continuation",
              },
            ],
            "max_bits": 120,
            "max_refs": 0,
            "min_bits": 0,
            "min_refs": 0,
            "name": "s",
            "type": "subslice",
          },
          "limitBits": 48,
          "limitRefs": 0,
          "offsetBits": 544,
          "offsetRefs": 0,
          "source": Cell {
            "_depths": [
              0,
              0,
              0,
              0,
            ],
            "_hashes": [
              {
                "data": [
                  92,
                  154,
                  94,
                  104,
                  193,
                  8,
                  225,
                  135,
                  33,
                  160,
                  124,
                  66,
                  249,
                  149,
                  107,
                  251,
                  57,
                  173,
                  119,
                  236,
                  109,
                  98,
                  75,
                  96,
                  197,
                  118,
                  236,
                  136,
                  238,
                  230,
                  83,
                  41,
                ],
                "type": "Buffer",
              },
              {
                "data": [
                  92,
                  154,
                  94,
                  104,
                  193,
                  8,
                  225,
                  135,
                  33,
                  160,
                  124,
                  66,
                  249,
                  149,
                  107,
                  251,
                  57,
                  173,
                  119,
                  236,
                  109,
                  98,
                  75,
                  96,
                  197,
                  118,
                  236,
                  136,
                  238,
                  230,
                  83,
                  41,
                ],
                "type": "Buffer",
              },
              {
                "data": [
                  92,
                  154,
                  94,
                  104,
                  193,
                  8,
                  225,
                  135,
                  33,
                  160,
                  124,
                  66,
                  249,
                  149,
                  107,
                  251,
                  57,
                  173,
                  119,
                  236,
                  109,
                  98,
                  75,
                  96,
                  197,
                  118,
                  236,
                  136,
                  238,
                  230,
                  83,
                  41,
                ],
                "type": "Buffer",
              },
              {
                "data": [
                  92,
                  154,
                  94,
                  104,
                  193,
                  8,
                  225,
                  135,
                  33,
                  160,
                  124,
                  66,
                  249,
                  149,
                  107,
                  251,
                  57,
                  173,
                  119,
                  236,
                  109,
                  98,
                  75,
                  96,
                  197,
                  118,
                  236,
                  136,
                  238,
                  230,
                  83,
                  41,
                ],
                "type": "Buffer",
              },
            ],
            "beginParse": [Function],
            "bits": BitString {
              "_data": {
                "data": [
                  0,
                  170,
                  255,
                  0,
                  32,
                  221,
                  32,
                  130,
                  1,
                  76,
                  151,
                  186,
                  151,
                  48,
                  237,
                  68,
                  208,
                  215,
                  11,
                  31,
                  224,
                  164,
                  242,
                  96,
                  131,
                  8,
                  215,
                  24,
                  32,
                  211,
                  31,
                  211,
                  31,
                  1,
                  248,
                  35,
                  187,
                  242,
                  99,
                  237,
                  68,
                  208,
                  211,
                  31,
                  211,
                  255,
                  209,
                  81,
                  49,
                  186,
                  242,
                  161,
                  3,
                  249,
                  1,
                  84,
                  16,
                  66,
                  249,
                  16,
                  242,
                  162,
                  248,
                  0,
                  2,
                  147,
                  32,
                  215,
                  74,
                  150,
                  211,
                  7,
                  212,
                  2,
                  251,
                  0,
                  232,
                  209,
                  164,
                  200,
                  203,
                  31,
                  203,
                  255,
                  201,
                  237,
                  84,
                ],
                "type": "Buffer",
              },
              "_length": 680,
              "_offset": 16,
              Symbol(nodejs.util.inspect.custom): [Function],
            },
            "depth": [Function],
            "equals": [Function],
            "hash": [Function],
            "level": [Function],
            "mask": LevelMask {
              "_hashCount": 1,
              "_hashIndex": 0,
              "_mask": 0,
            },
            "refs": [],
            "type": -1,
            Symbol(nodejs.util.inspect.custom): [Function],
          },
          "type": "subslice",
          "value": Cell {
            "_depths": [
              0,
              0,
              0,
              0,
            ],
            "_hashes": [
              {
                "data": [
                  201,
                  205,
                  146,
                  164,
                  137,
                  234,
                  45,
                  255,
                  227,
                  41,
                  235,
                  253,
                  131,
                  99,
                  251,
                  105,
                  11,
                  159,
                  159,
                  102,
                  189,
                  83,
                  186,
                  82,
                  108,
                  134,
                  46,
                  238,
                  227,
                  84,
                  192,
                  24,
                ],
                "type": "Buffer",
              },
              {
                "data": [
                  201,
                  205,
                  146,
                  164,
                  137,
                  234,
                  45,
                  255,
                  227,
                  41,
                  235,
                  253,
                  131,
                  99,
                  251,
                  105,
                  11,
                  159,
                  159,
                  102,
                  189,
                  83,
                  186,
                  82,
                  108,
                  134,
                  46,
                  238,
                  227,
                  84,
                  192,
                  24,
                ],
                "type": "Buffer",
              },
              {
                "data": [
                  201,
                  205,
                  146,
                  164,
                  137,
                  234,
                  45,
                  255,
                  227,
                  41,
                  235,
                  253,
                  131,
                  99,
                  251,
                  105,
                  11,
                  159,
                  159,
                  102,
                  189,
                  83,
                  186,
                  82,
                  108,
                  134,
                  46,
                  238,
                  227,
                  84,
                  192,
                  24,
                ],
                "type": "Buffer",
              },
              {
                "data": [
                  201,
                  205,
                  146,
                  164,
                  137,
                  234,
                  45,
                  255,
                  227,
                  41,
                  235,
                  253,
                  131,
                  99,
                  251,
                  105,
                  11,
                  159,
                  159,
                  102,
                  189,
                  83,
                  186,
                  82,
                  108,
                  134,
                  46,
                  238,
                  227,
                  84,
                  192,
                  24,
                ],
                "type": "Buffer",
              },
            ],
            "beginParse": [Function],
            "bits": BitString {
              "_data": {
                "data": [
                  211,
                  7,
                  212,
                  2,
                  251,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                ],
                "type": "Buffer",
              },
              "_length": 48,
              "_offset": 0,
              Symbol(nodejs.util.inspect.custom): [Function],
            },
            "depth": [Function],
            "equals": [Function],
            "hash": [Function],
            "level": [Function],
            "mask": LevelMask {
              "_hashCount": 1,
              "_hashIndex": 0,
              "_mask": 0,
            },
            "refs": [],
            "type": -1,
            Symbol(nodejs.util.inspect.custom): [Function],
          },
        },
      ],
    },
  },
  {
    "hash": "5c9a5e68c108e18721a07c42f9956bfb39ad77ec6d624b60c576ec88eee65329",
    "length": 8,
    "offset": 592,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [],
          "prefix": "E8",
          "tlb": "#E8",
        },
        "control_flow": {
          "branches": [
            {
              "save": {
                "c0": {
                  "args": {
                    "after": {
                      "save": {
                        "c0": {
                          "index": 0,
                          "type": "register",
                        },
                      },
                      "type": "cc",
                    },
                    "body": {
                      "type": "variable",
                      "var_name": "c",
                    },
                    "cond": {
                      "type": "variable",
                      "var_name": "c2",
                    },
                  },
                  "name": "while",
                  "type": "special",
                },
              },
              "type": "variable",
              "var_name": "c2",
            },
          ],
          "nobranch": false,
        },
        "doc": {
          "category": "cont_loops",
          "description": "Executes \`c'\` and pops an integer \`x\` from the resulting stack. If \`x\` is zero, exists the loop and transfers control to the original \`cc\`. If \`x\` is non-zero, executes \`c\`, and then begins a new iteration.",
          "fift": "WHILE",
          "fift_examples": [
            {
              "description": "Equivalent to \`<{ cond }> CONT\` \`<{ code }> CONT\` \`WHILE\`.",
              "fift": "WHILE:<{ cond }>DO<{ code }>",
            },
          ],
          "gas": "18",
          "opcode": "E8",
          "stack": "c' c - ",
        },
        "mnemonic": "WHILE",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "c2",
                "type": "simple",
                "value_types": [
                  "Continuation",
                ],
              },
              {
                "name": "c",
                "type": "simple",
                "value_types": [
                  "Continuation",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [],
          },
        },
      },
      "operands": [],
    },
  },
  {
    "hash": "5c9a5e68c108e18721a07c42f9956bfb39ad77ec6d624b60c576ec88eee65329",
    "length": 8,
    "offset": 600,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [],
          "prefix": "D1",
          "tlb": "#D1",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "cell_parse",
          "description": "Removes a _Slice_ \`s\` from the stack, and throws an exception if it is not empty.",
          "fift": "ENDS",
          "fift_examples": [],
          "gas": "18/68",
          "opcode": "D1",
          "stack": "s - ",
        },
        "mnemonic": "ENDS",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "s",
                "type": "simple",
                "value_types": [
                  "Slice",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [],
          },
        },
      },
      "operands": [],
    },
  },
  {
    "hash": "5c9a5e68c108e18721a07c42f9956bfb39ad77ec6d624b60c576ec88eee65329",
    "length": 8,
    "offset": 608,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [],
          "prefix": "A4",
          "tlb": "#A4",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "arithm_basic",
          "description": "Equivalent to \`1 ADDCONST\`.",
          "fift": "INC",
          "fift_examples": [],
          "gas": "18",
          "opcode": "A4",
          "stack": "x - x+1",
        },
        "mnemonic": "INC",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "x",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [
              {
                "name": "result",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
            ],
          },
        },
      },
      "operands": [],
    },
  },
  {
    "hash": "5c9a5e68c108e18721a07c42f9956bfb39ad77ec6d624b60c576ec88eee65329",
    "length": 8,
    "offset": 616,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [],
          "prefix": "C8",
          "tlb": "#C8",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "cell_build",
          "description": "Creates a new empty _Builder_.",
          "fift": "NEWC",
          "fift_examples": [],
          "gas": "18",
          "opcode": "C8",
          "stack": "- b",
        },
        "mnemonic": "NEWC",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [],
          },
          "outputs": {
            "registers": [],
            "stack": [
              {
                "name": "b",
                "type": "simple",
                "value_types": [
                  "Builder",
                ],
              },
            ],
          },
        },
      },
      "operands": [],
    },
  },
  {
    "hash": "5c9a5e68c108e18721a07c42f9956bfb39ad77ec6d624b60c576ec88eee65329",
    "length": 16,
    "offset": 624,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "display_hints": [
                {
                  "type": "add",
                  "value": 1,
                },
              ],
              "max_value": 255,
              "min_value": 0,
              "name": "c",
              "size": 8,
              "type": "uint",
            },
          ],
          "prefix": "CB",
          "tlb": "#CB cc:uint8",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "cell_build",
          "description": "Stores an unsigned \`cc+1\`-bit integer \`x\` into _Builder_ \`b\`. In all other respects it is similar to \`STI\`.",
          "fift": "[cc+1] STU",
          "fift_examples": [],
          "gas": "26",
          "opcode": "CBcc",
          "stack": "x b - b'",
        },
        "mnemonic": "STU",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "x",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
              {
                "name": "b",
                "type": "simple",
                "value_types": [
                  "Builder",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [
              {
                "name": "b2",
                "type": "simple",
                "value_types": [
                  "Builder",
                ],
              },
            ],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "display_hints": [
              {
                "type": "add",
                "value": 1,
              },
            ],
            "max_value": 255,
            "min_value": 0,
            "name": "c",
            "size": 8,
            "type": "uint",
          },
          "type": "numeric",
          "value": 31,
        },
      ],
    },
  },
  {
    "hash": "5c9a5e68c108e18721a07c42f9956bfb39ad77ec6d624b60c576ec88eee65329",
    "length": 16,
    "offset": 640,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "display_hints": [
                {
                  "type": "add",
                  "value": 1,
                },
              ],
              "max_value": 255,
              "min_value": 0,
              "name": "c",
              "size": 8,
              "type": "uint",
            },
          ],
          "prefix": "CB",
          "tlb": "#CB cc:uint8",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "cell_build",
          "description": "Stores an unsigned \`cc+1\`-bit integer \`x\` into _Builder_ \`b\`. In all other respects it is similar to \`STI\`.",
          "fift": "[cc+1] STU",
          "fift_examples": [],
          "gas": "26",
          "opcode": "CBcc",
          "stack": "x b - b'",
        },
        "mnemonic": "STU",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "x",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
              {
                "name": "b",
                "type": "simple",
                "value_types": [
                  "Builder",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [
              {
                "name": "b2",
                "type": "simple",
                "value_types": [
                  "Builder",
                ],
              },
            ],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "display_hints": [
              {
                "type": "add",
                "value": 1,
              },
            ],
            "max_value": 255,
            "min_value": 0,
            "name": "c",
            "size": 8,
            "type": "uint",
          },
          "type": "numeric",
          "value": 255,
        },
      ],
    },
  },
  {
    "hash": "5c9a5e68c108e18721a07c42f9956bfb39ad77ec6d624b60c576ec88eee65329",
    "length": 8,
    "offset": 656,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [],
          "prefix": "C9",
          "tlb": "#C9",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "cell_build",
          "description": "Converts a _Builder_ into an ordinary _Cell_.",
          "fift": "ENDC",
          "fift_examples": [],
          "gas": "518",
          "opcode": "C9",
          "stack": "b - c",
        },
        "mnemonic": "ENDC",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "b",
                "type": "simple",
                "value_types": [
                  "Builder",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [
              {
                "name": "c",
                "type": "simple",
                "value_types": [
                  "Cell",
                ],
              },
            ],
          },
        },
      },
      "operands": [],
    },
  },
  {
    "hash": "5c9a5e68c108e18721a07c42f9956bfb39ad77ec6d624b60c576ec88eee65329",
    "length": 16,
    "offset": 664,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "display_hints": [
                {
                  "type": "register",
                },
              ],
              "max_value": 15,
              "min_value": 0,
              "name": "i",
              "size": 4,
              "type": "uint",
            },
          ],
          "prefix": "ED5",
          "tlb": "#ED5 i:uint4",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "cont_registers",
          "description": "Pops a value \`x\` from the stack and stores it into control register \`c(i)\`, if supported in the current codepage. Notice that if a control register accepts only values of a specific type, a type-checking exception may occur.",
          "fift": "c[i] POPCTR
c[i] POP",
          "fift_examples": [],
          "gas": "26",
          "opcode": "ED5i",
          "stack": "x - ",
        },
        "mnemonic": "POPCTR",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "x",
                "type": "simple",
              },
            ],
          },
          "outputs": {
            "registers": [
              {
                "type": "variable",
                "var_name": "i",
              },
            ],
            "stack": [],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "display_hints": [
              {
                "type": "register",
              },
            ],
            "max_value": 15,
            "min_value": 0,
            "name": "i",
            "size": 4,
            "type": "uint",
          },
          "type": "numeric",
          "value": 4,
        },
      ],
    },
  },
]
`;

exports[`decompiler should decompile a simple contract 5`] = `
[
  {
    "hash": "fe9530d3243853083ef2ef0b4c2908c0abf6fa1c31ea243aacaa5bf8c7d753f1",
    "length": 16,
    "offset": 0,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "display_hints": [],
              "max_value": 239,
              "min_value": 0,
              "name": "n",
              "size": 8,
              "type": "uint",
            },
          ],
          "operands_range_check": {
            "from": 0,
            "length": 8,
            "to": 239,
          },
          "prefix": "FF",
          "tlb": "#FF nn:(#<= 239)",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "codepage",
          "description": "Selects TVM codepage \`0 <= nn < 240\`. If the codepage is not supported, throws an invalid opcode exception.",
          "fift": "[nn] SETCP",
          "fift_examples": [],
          "gas": "26",
          "opcode": "FFnn",
          "stack": "-",
        },
        "mnemonic": "SETCP",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [],
          },
          "outputs": {
            "registers": [],
            "stack": [],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "display_hints": [],
            "max_value": 239,
            "min_value": 0,
            "name": "n",
            "size": 8,
            "type": "uint",
          },
          "type": "numeric",
          "value": 0,
        },
      ],
    },
  },
  {
    "hash": "fe9530d3243853083ef2ef0b4c2908c0abf6fa1c31ea243aacaa5bf8c7d753f1",
    "length": 8,
    "offset": 16,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "display_hints": [
                {
                  "type": "stack",
                },
              ],
              "max_value": 15,
              "min_value": 0,
              "name": "i",
              "size": 4,
              "type": "uint",
            },
          ],
          "prefix": "2",
          "tlb": "#2 i:uint4",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "stack_basic",
          "description": "Pushes a copy of the old \`s[i]\` into the stack.",
          "fift": "s[i] PUSH",
          "fift_examples": [],
          "gas": "18",
          "opcode": "2i",
          "stack": "",
        },
        "mnemonic": "PUSH",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
          },
          "outputs": {
            "registers": [],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "display_hints": [
              {
                "type": "stack",
              },
            ],
            "max_value": 15,
            "min_value": 0,
            "name": "i",
            "size": 4,
            "type": "uint",
          },
          "type": "numeric",
          "value": 0,
        },
      ],
    },
  },
  {
    "hash": "fe9530d3243853083ef2ef0b4c2908c0abf6fa1c31ea243aacaa5bf8c7d753f1",
    "length": 8,
    "offset": 24,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [],
          "prefix": "DD",
          "tlb": "#DD",
        },
        "control_flow": {
          "branches": [
            {
              "index": 0,
              "type": "register",
            },
          ],
          "nobranch": true,
        },
        "doc": {
          "category": "cont_conditional",
          "description": "Performs a \`RET\`, but only if integer \`f\` is zero.",
          "fift": "IFNOTRET
IF:",
          "fift_examples": [],
          "gas": "18",
          "opcode": "DD",
          "stack": "f - ",
        },
        "mnemonic": "IFNOTRET",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "f",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [],
          },
        },
      },
      "operands": [],
    },
  },
  {
    "hash": "fe9530d3243853083ef2ef0b4c2908c0abf6fa1c31ea243aacaa5bf8c7d753f1",
    "length": 8,
    "offset": 32,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "display_hints": [
                {
                  "type": "stack",
                },
              ],
              "max_value": 15,
              "min_value": 0,
              "name": "i",
              "size": 4,
              "type": "uint",
            },
          ],
          "prefix": "2",
          "tlb": "#2 i:uint4",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "stack_basic",
          "description": "Pushes a copy of the old \`s[i]\` into the stack.",
          "fift": "s[i] PUSH",
          "fift_examples": [],
          "gas": "18",
          "opcode": "2i",
          "stack": "",
        },
        "mnemonic": "PUSH",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
          },
          "outputs": {
            "registers": [],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "display_hints": [
              {
                "type": "stack",
              },
            ],
            "max_value": 15,
            "min_value": 0,
            "name": "i",
            "size": 4,
            "type": "uint",
          },
          "type": "numeric",
          "value": 0,
        },
      ],
    },
  },
  {
    "hash": "fe9530d3243853083ef2ef0b4c2908c0abf6fa1c31ea243aacaa5bf8c7d753f1",
    "length": 32,
    "offset": 40,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "name": "x",
              "type": "pushint_long",
            },
          ],
          "operands_range_check": {
            "from": 0,
            "length": 5,
            "to": 30,
          },
          "prefix": "82",
          "tlb": "#82 l:(## 5) xxx:(int (8 * l + 19))",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "const_int",
          "description": "Pushes integer \`xxx\`.
_Details:_ 5-bit \`0 <= l <= 30\` determines the length \`n=8l+19\` of signed big-endian integer \`xxx\`.
The total length of this instruction is \`l+4\` bytes or \`n+13=8l+32\` bits.",
          "fift": "[xxx] PUSHINT
[xxx] INT",
          "fift_examples": [],
          "gas": "23",
          "opcode": "82lxxx",
          "stack": "- xxx",
        },
        "mnemonic": "PUSHINT_LONG",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [],
          },
          "outputs": {
            "registers": [],
            "stack": [
              {
                "name": "x",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
            ],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "name": "x",
            "type": "pushint_long",
          },
          "type": "bigint",
          "value": 85143n,
        },
      ],
    },
  },
  {
    "hash": "fe9530d3243853083ef2ef0b4c2908c0abf6fa1c31ea243aacaa5bf8c7d753f1",
    "length": 8,
    "offset": 72,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [],
          "prefix": "BA",
          "tlb": "#BA",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "compare_int",
          "description": "Returns \`-1\` if \`x=y\`, \`0\` otherwise.",
          "fift": "EQUAL",
          "fift_examples": [],
          "gas": "18",
          "opcode": "BA",
          "stack": "x y - x=y",
        },
        "mnemonic": "EQUAL",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "x",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
              {
                "name": "y",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [
              {
                "name": "result",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
            ],
          },
        },
      },
      "operands": [],
    },
  },
  {
    "hash": "fe9530d3243853083ef2ef0b4c2908c0abf6fa1c31ea243aacaa5bf8c7d753f1",
    "length": 8,
    "offset": 80,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "display_hints": [
                {
                  "type": "stack",
                },
              ],
              "max_value": 15,
              "min_value": 0,
              "name": "i",
              "size": 4,
              "type": "uint",
            },
          ],
          "prefix": "2",
          "tlb": "#2 i:uint4",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "stack_basic",
          "description": "Pushes a copy of the old \`s[i]\` into the stack.",
          "fift": "s[i] PUSH",
          "fift_examples": [],
          "gas": "18",
          "opcode": "2i",
          "stack": "",
        },
        "mnemonic": "PUSH",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
          },
          "outputs": {
            "registers": [],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "display_hints": [
              {
                "type": "stack",
              },
            ],
            "max_value": 15,
            "min_value": 0,
            "name": "i",
            "size": 4,
            "type": "uint",
          },
          "type": "numeric",
          "value": 1,
        },
      ],
    },
  },
  {
    "hash": "fe9530d3243853083ef2ef0b4c2908c0abf6fa1c31ea243aacaa5bf8c7d753f1",
    "length": 32,
    "offset": 88,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "name": "x",
              "type": "pushint_long",
            },
          ],
          "operands_range_check": {
            "from": 0,
            "length": 5,
            "to": 30,
          },
          "prefix": "82",
          "tlb": "#82 l:(## 5) xxx:(int (8 * l + 19))",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "const_int",
          "description": "Pushes integer \`xxx\`.
_Details:_ 5-bit \`0 <= l <= 30\` determines the length \`n=8l+19\` of signed big-endian integer \`xxx\`.
The total length of this instruction is \`l+4\` bytes or \`n+13=8l+32\` bits.",
          "fift": "[xxx] PUSHINT
[xxx] INT",
          "fift_examples": [],
          "gas": "23",
          "opcode": "82lxxx",
          "stack": "- xxx",
        },
        "mnemonic": "PUSHINT_LONG",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [],
          },
          "outputs": {
            "registers": [],
            "stack": [
              {
                "name": "x",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
            ],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "name": "x",
            "type": "pushint_long",
          },
          "type": "bigint",
          "value": 78748n,
        },
      ],
    },
  },
  {
    "hash": "fe9530d3243853083ef2ef0b4c2908c0abf6fa1c31ea243aacaa5bf8c7d753f1",
    "length": 8,
    "offset": 120,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [],
          "prefix": "BA",
          "tlb": "#BA",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "compare_int",
          "description": "Returns \`-1\` if \`x=y\`, \`0\` otherwise.",
          "fift": "EQUAL",
          "fift_examples": [],
          "gas": "18",
          "opcode": "BA",
          "stack": "x y - x=y",
        },
        "mnemonic": "EQUAL",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "x",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
              {
                "name": "y",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [
              {
                "name": "result",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
            ],
          },
        },
      },
      "operands": [],
    },
  },
  {
    "hash": "fe9530d3243853083ef2ef0b4c2908c0abf6fa1c31ea243aacaa5bf8c7d753f1",
    "length": 8,
    "offset": 128,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [],
          "prefix": "B1",
          "tlb": "#B1",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "arithm_logical",
          "description": "Bitwise or of two integers.",
          "fift": "OR",
          "fift_examples": [],
          "gas": "18",
          "opcode": "B1",
          "stack": "x y - x|y",
        },
        "mnemonic": "OR",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "x",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
              {
                "name": "y",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [
              {
                "name": "result",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
            ],
          },
        },
      },
      "operands": [],
    },
  },
  {
    "hash": "fe9530d3243853083ef2ef0b4c2908c0abf6fa1c31ea243aacaa5bf8c7d753f1",
    "length": 104,
    "offset": 136,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "bits_length_var_size": 4,
              "bits_padding": 0,
              "completion_tag": false,
              "display_hints": [
                {
                  "type": "continuation",
                },
              ],
              "max_bits": 120,
              "max_refs": 0,
              "min_bits": 0,
              "min_refs": 0,
              "name": "s",
              "type": "subslice",
            },
          ],
          "prefix": "9",
          "tlb": "#9 x:(## 4) ssss:((8 * x) * Bit)",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "const_data",
          "description": "Pushes a continuation made from \`builder\`.
_Details:_ Pushes an \`x\`-byte continuation for \`0 <= x <= 15\`.",
          "fift": "[builder] PUSHCONT
[builder] CONT",
          "fift_examples": [
            {
              "description": "Pushes a continuation with code \`code\`. Note that the assembler can replace \`PUSHCONT\` with \`PUSHREFCONT\` in certain situations (e.g. if there's not enough space in the current continuation).",
              "fift": "<{ code }> PUSHCONT <{ code }> CONT CONT:<{ code }>",
            },
          ],
          "gas": "18",
          "opcode": "9xccc",
          "stack": "- c",
        },
        "mnemonic": "PUSHCONT_SHORT",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [],
          },
          "outputs": {
            "registers": [],
            "stack": [
              {
                "name": "c",
                "type": "simple",
                "value_types": [
                  "Continuation",
                ],
              },
            ],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "bits_length_var_size": 4,
            "bits_padding": 0,
            "completion_tag": false,
            "display_hints": [
              {
                "type": "continuation",
              },
            ],
            "max_bits": 120,
            "max_refs": 0,
            "min_bits": 0,
            "min_refs": 0,
            "name": "s",
            "type": "subslice",
          },
          "limitBits": 96,
          "limitRefs": 0,
          "offsetBits": 144,
          "offsetRefs": 0,
          "source": Cell {
            "_depths": [
              0,
              0,
              0,
              0,
            ],
            "_hashes": [
              {
                "data": [
                  254,
                  149,
                  48,
                  211,
                  36,
                  56,
                  83,
                  8,
                  62,
                  242,
                  239,
                  11,
                  76,
                  41,
                  8,
                  192,
                  171,
                  246,
                  250,
                  28,
                  49,
                  234,
                  36,
                  58,
                  172,
                  170,
                  91,
                  248,
                  199,
                  215,
                  83,
                  241,
                ],
                "type": "Buffer",
              },
              {
                "data": [
                  254,
                  149,
                  48,
                  211,
                  36,
                  56,
                  83,
                  8,
                  62,
                  242,
                  239,
                  11,
                  76,
                  41,
                  8,
                  192,
                  171,
                  246,
                  250,
                  28,
                  49,
                  234,
                  36,
                  58,
                  172,
                  170,
                  91,
                  248,
                  199,
                  215,
                  83,
                  241,
                ],
                "type": "Buffer",
              },
              {
                "data": [
                  254,
                  149,
                  48,
                  211,
                  36,
                  56,
                  83,
                  8,
                  62,
                  242,
                  239,
                  11,
                  76,
                  41,
                  8,
                  192,
                  171,
                  246,
                  250,
                  28,
                  49,
                  234,
                  36,
                  58,
                  172,
                  170,
                  91,
                  248,
                  199,
                  215,
                  83,
                  241,
                ],
                "type": "Buffer",
              },
              {
                "data": [
                  254,
                  149,
                  48,
                  211,
                  36,
                  56,
                  83,
                  8,
                  62,
                  242,
                  239,
                  11,
                  76,
                  41,
                  8,
                  192,
                  171,
                  246,
                  250,
                  28,
                  49,
                  234,
                  36,
                  58,
                  172,
                  170,
                  91,
                  248,
                  199,
                  215,
                  83,
                  241,
                ],
                "type": "Buffer",
              },
            ],
            "beginParse": [Function],
            "bits": BitString {
              "_data": {
                "data": [
                  0,
                  194,
                  255,
                  0,
                  32,
                  221,
                  32,
                  130,
                  1,
                  76,
                  151,
                  186,
                  33,
                  130,
                  1,
                  51,
                  156,
                  186,
                  177,
                  156,
                  113,
                  176,
                  237,
                  68,
                  208,
                  211,
                  31,
                  215,
                  11,
                  255,
                  227,
                  4,
                  224,
                  164,
                  242,
                  96,
                  131,
                  8,
                  215,
                  24,
                  32,
                  211,
                  31,
                  211,
                  31,
                  1,
                  248,
                  35,
                  187,
                  242,
                  99,
                  237,
                  68,
                  208,
                  211,
                  31,
                  211,
                  255,
                  209,
                  81,
                  49,
                  186,
                  242,
                  161,
                  3,
                  249,
                  1,
                  84,
                  16,
                  66,
                  249,
                  16,
                  242,
                  162,
                  248,
                  0,
                  2,
                  147,
                  32,
                  215,
                  74,
                  150,
                  211,
                  7,
                  212,
                  2,
                  251,
                  0,
                  232,
                  209,
                  164,
                  200,
                  203,
                  31,
                  203,
                  255,
                  201,
                  237,
                  84,
                ],
                "type": "Buffer",
              },
              "_length": 776,
              "_offset": 16,
              Symbol(nodejs.util.inspect.custom): [Function],
            },
            "depth": [Function],
            "equals": [Function],
            "hash": [Function],
            "level": [Function],
            "mask": LevelMask {
              "_hashCount": 1,
              "_hashIndex": 0,
              "_mask": 0,
            },
            "refs": [],
            "type": -1,
            Symbol(nodejs.util.inspect.custom): [Function],
          },
          "type": "subslice",
          "value": Cell {
            "_depths": [
              0,
              0,
              0,
              0,
            ],
            "_hashes": [
              {
                "data": [
                  121,
                  75,
                  246,
                  147,
                  150,
                  183,
                  124,
                  255,
                  237,
                  211,
                  186,
                  140,
                  36,
                  170,
                  214,
                  120,
                  163,
                  230,
                  75,
                  139,
                  124,
                  120,
                  244,
                  193,
                  231,
                  144,
                  22,
                  36,
                  191,
                  56,
                  65,
                  104,
                ],
                "type": "Buffer",
              },
              {
                "data": [
                  121,
                  75,
                  246,
                  147,
                  150,
                  183,
                  124,
                  255,
                  237,
                  211,
                  186,
                  140,
                  36,
                  170,
                  214,
                  120,
                  163,
                  230,
                  75,
                  139,
                  124,
                  120,
                  244,
                  193,
                  231,
                  144,
                  22,
                  36,
                  191,
                  56,
                  65,
                  104,
                ],
                "type": "Buffer",
              },
              {
                "data": [
                  121,
                  75,
                  246,
                  147,
                  150,
                  183,
                  124,
                  255,
                  237,
                  211,
                  186,
                  140,
                  36,
                  170,
                  214,
                  120,
                  163,
                  230,
                  75,
                  139,
                  124,
                  120,
                  244,
                  193,
                  231,
                  144,
                  22,
                  36,
                  191,
                  56,
                  65,
                  104,
                ],
                "type": "Buffer",
              },
              {
                "data": [
                  121,
                  75,
                  246,
                  147,
                  150,
                  183,
                  124,
                  255,
                  237,
                  211,
                  186,
                  140,
                  36,
                  170,
                  214,
                  120,
                  163,
                  230,
                  75,
                  139,
                  124,
                  120,
                  244,
                  193,
                  231,
                  144,
                  22,
                  36,
                  191,
                  56,
                  65,
                  104,
                ],
                "type": "Buffer",
              },
            ],
            "beginParse": [Function],
            "bits": BitString {
              "_data": {
                "data": [
                  113,
                  176,
                  237,
                  68,
                  208,
                  211,
                  31,
                  215,
                  11,
                  255,
                  227,
                  4,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                ],
                "type": "Buffer",
              },
              "_length": 96,
              "_offset": 0,
              Symbol(nodejs.util.inspect.custom): [Function],
            },
            "depth": [Function],
            "equals": [Function],
            "hash": [Function],
            "level": [Function],
            "mask": LevelMask {
              "_hashCount": 1,
              "_hashIndex": 0,
              "_mask": 0,
            },
            "refs": [],
            "type": -1,
            Symbol(nodejs.util.inspect.custom): [Function],
          },
        },
      ],
    },
  },
  {
    "hash": "fe9530d3243853083ef2ef0b4c2908c0abf6fa1c31ea243aacaa5bf8c7d753f1",
    "length": 8,
    "offset": 240,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [],
          "prefix": "E0",
          "tlb": "#E0",
        },
        "control_flow": {
          "branches": [
            {
              "type": "variable",
              "var_name": "c",
            },
          ],
          "nobranch": true,
        },
        "doc": {
          "category": "cont_conditional",
          "description": "Jumps to \`c\` (similarly to \`JMPX\`), but only if \`f\` is non-zero.",
          "fift": "IFJMP",
          "fift_examples": [
            {
              "description": "Equivalent to \`<{ code }> CONT\` \`IFJMP\`.",
              "fift": "IFJMP:<{ code }>",
            },
          ],
          "gas": "18",
          "opcode": "E0",
          "stack": "f c - ",
        },
        "mnemonic": "IFJMP",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "f",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
              {
                "name": "c",
                "type": "simple",
                "value_types": [
                  "Continuation",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [],
          },
        },
      },
      "operands": [],
    },
  },
  {
    "hash": "fe9530d3243853083ef2ef0b4c2908c0abf6fa1c31ea243aacaa5bf8c7d753f1",
    "length": 8,
    "offset": 248,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [],
          "prefix": "A4",
          "tlb": "#A4",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "arithm_basic",
          "description": "Equivalent to \`1 ADDCONST\`.",
          "fift": "INC",
          "fift_examples": [],
          "gas": "18",
          "opcode": "A4",
          "stack": "x - x+1",
        },
        "mnemonic": "INC",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "x",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [
              {
                "name": "result",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
            ],
          },
        },
      },
      "operands": [],
    },
  },
  {
    "hash": "fe9530d3243853083ef2ef0b4c2908c0abf6fa1c31ea243aacaa5bf8c7d753f1",
    "length": 16,
    "offset": 256,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "display_hints": [],
              "max_value": 63,
              "min_value": 0,
              "name": "n",
              "size": 6,
              "type": "uint",
            },
          ],
          "prefix": "F26_",
          "tlb": "#F26_ n:uint6",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "exceptions",
          "description": "Throws exception \`0 <= n <= 63\` with  parameter zero only if integer \`f!=0\`.",
          "fift": "[n] THROWIF",
          "fift_examples": [],
          "gas": "26/76",
          "opcode": "F26_n",
          "stack": "f - ",
        },
        "mnemonic": "THROWIF_SHORT",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "f",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "display_hints": [],
            "max_value": 63,
            "min_value": 0,
            "name": "n",
            "size": 6,
            "type": "uint",
          },
          "type": "numeric",
          "value": 32,
        },
      ],
    },
  },
  {
    "hash": "fe9530d3243853083ef2ef0b4c2908c0abf6fa1c31ea243aacaa5bf8c7d753f1",
    "length": 16,
    "offset": 272,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "display_hints": [
                {
                  "type": "add",
                  "value": 1,
                },
              ],
              "max_value": 254,
              "min_value": 0,
              "name": "x",
              "size": 8,
              "type": "uint",
            },
          ],
          "operands_range_check": {
            "from": 0,
            "length": 8,
            "to": 254,
          },
          "prefix": "83",
          "tlb": "#83 xx:uint8",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "const_int",
          "description": "(Quietly) pushes \`2^(xx+1)\` for \`0 <= xx <= 255\`.
\`2^256\` is a \`NaN\`.",
          "fift": "[xx+1] PUSHPOW2",
          "fift_examples": [],
          "gas": "26",
          "opcode": "83xx",
          "stack": "- 2^(xx+1)",
        },
        "mnemonic": "PUSHPOW2",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [],
          },
          "outputs": {
            "registers": [],
            "stack": [
              {
                "name": "result",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
            ],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "display_hints": [
              {
                "type": "add",
                "value": 1,
              },
            ],
            "max_value": 254,
            "min_value": 0,
            "name": "x",
            "size": 8,
            "type": "uint",
          },
          "type": "numeric",
          "value": 8,
        },
      ],
    },
  },
  {
    "hash": "fe9530d3243853083ef2ef0b4c2908c0abf6fa1c31ea243aacaa5bf8c7d753f1",
    "length": 16,
    "offset": 288,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [],
          "prefix": "D718",
          "tlb": "#D718",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "cell_parse",
          "description": "Loads the first \`0 <= l <= 1023\` bits from _Slice_ \`s\` into a separate _Slice_ \`s''\`, returning the remainder of \`s\` as \`s'\`.",
          "fift": "LDSLICEX",
          "fift_examples": [],
          "gas": "26",
          "opcode": "D718",
          "stack": "s l - s'' s'",
        },
        "mnemonic": "LDSLICEX",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "s",
                "type": "simple",
                "value_types": [
                  "Slice",
                ],
              },
              {
                "name": "l",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [
              {
                "name": "s3",
                "type": "simple",
                "value_types": [
                  "Slice",
                ],
              },
              {
                "name": "s2",
                "type": "simple",
                "value_types": [
                  "Slice",
                ],
              },
            ],
          },
        },
      },
      "operands": [],
    },
  },
  {
    "hash": "fe9530d3243853083ef2ef0b4c2908c0abf6fa1c31ea243aacaa5bf8c7d753f1",
    "length": 8,
    "offset": 304,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "display_hints": [
                {
                  "type": "stack",
                },
              ],
              "max_value": 15,
              "min_value": 0,
              "name": "i",
              "size": 4,
              "type": "uint",
            },
          ],
          "prefix": "2",
          "tlb": "#2 i:uint4",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "stack_basic",
          "description": "Pushes a copy of the old \`s[i]\` into the stack.",
          "fift": "s[i] PUSH",
          "fift_examples": [],
          "gas": "18",
          "opcode": "2i",
          "stack": "",
        },
        "mnemonic": "PUSH",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
          },
          "outputs": {
            "registers": [],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "display_hints": [
              {
                "type": "stack",
              },
            ],
            "max_value": 15,
            "min_value": 0,
            "name": "i",
            "size": 4,
            "type": "uint",
          },
          "type": "numeric",
          "value": 0,
        },
      ],
    },
  },
  {
    "hash": "fe9530d3243853083ef2ef0b4c2908c0abf6fa1c31ea243aacaa5bf8c7d753f1",
    "length": 16,
    "offset": 312,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "display_hints": [
                {
                  "type": "add",
                  "value": 1,
                },
              ],
              "max_value": 255,
              "min_value": 0,
              "name": "c",
              "size": 8,
              "type": "uint",
            },
          ],
          "prefix": "D3",
          "tlb": "#D3 cc:uint8",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "cell_parse",
          "description": "Loads an unsigned \`cc+1\`-bit integer \`x\` from _Slice_ \`s\`.",
          "fift": "[cc+1] LDU",
          "fift_examples": [],
          "gas": "26",
          "opcode": "D3cc",
          "stack": "s - x s'",
        },
        "mnemonic": "LDU",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "s",
                "type": "simple",
                "value_types": [
                  "Slice",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [
              {
                "name": "x",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
              {
                "name": "s2",
                "type": "simple",
                "value_types": [
                  "Slice",
                ],
              },
            ],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "display_hints": [
              {
                "type": "add",
                "value": 1,
              },
            ],
            "max_value": 255,
            "min_value": 0,
            "name": "c",
            "size": 8,
            "type": "uint",
          },
          "type": "numeric",
          "value": 31,
        },
      ],
    },
  },
  {
    "hash": "fe9530d3243853083ef2ef0b4c2908c0abf6fa1c31ea243aacaa5bf8c7d753f1",
    "length": 16,
    "offset": 328,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "display_hints": [
                {
                  "type": "add",
                  "value": 1,
                },
              ],
              "max_value": 255,
              "min_value": 0,
              "name": "c",
              "size": 8,
              "type": "uint",
            },
          ],
          "prefix": "D3",
          "tlb": "#D3 cc:uint8",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "cell_parse",
          "description": "Loads an unsigned \`cc+1\`-bit integer \`x\` from _Slice_ \`s\`.",
          "fift": "[cc+1] LDU",
          "fift_examples": [],
          "gas": "26",
          "opcode": "D3cc",
          "stack": "s - x s'",
        },
        "mnemonic": "LDU",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "s",
                "type": "simple",
                "value_types": [
                  "Slice",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [
              {
                "name": "x",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
              {
                "name": "s2",
                "type": "simple",
                "value_types": [
                  "Slice",
                ],
              },
            ],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "display_hints": [
              {
                "type": "add",
                "value": 1,
              },
            ],
            "max_value": 255,
            "min_value": 0,
            "name": "c",
            "size": 8,
            "type": "uint",
          },
          "type": "numeric",
          "value": 31,
        },
      ],
    },
  },
  {
    "hash": "fe9530d3243853083ef2ef0b4c2908c0abf6fa1c31ea243aacaa5bf8c7d753f1",
    "length": 8,
    "offset": 344,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "display_hints": [
                {
                  "type": "stack",
                },
              ],
              "max_value": 15,
              "min_value": 1,
              "name": "i",
              "size": 4,
              "type": "uint",
            },
          ],
          "operands_range_check": {
            "from": 1,
            "length": 4,
            "to": 15,
          },
          "prefix": "0",
          "tlb": "#0 i:(## 4) {1 <= i}",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "stack_basic",
          "description": "Interchanges \`s0\` with \`s[i]\`, \`1 <= i <= 15\`.",
          "fift": "s[i] XCHG0",
          "fift_examples": [],
          "gas": "18",
          "opcode": "0i",
          "stack": "",
        },
        "mnemonic": "XCHG_0I",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
          },
          "outputs": {
            "registers": [],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "display_hints": [
              {
                "type": "stack",
              },
            ],
            "max_value": 15,
            "min_value": 1,
            "name": "i",
            "size": 4,
            "type": "uint",
          },
          "type": "numeric",
          "value": 1,
        },
      ],
    },
  },
  {
    "hash": "fe9530d3243853083ef2ef0b4c2908c0abf6fa1c31ea243aacaa5bf8c7d753f1",
    "length": 16,
    "offset": 352,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "display_hints": [],
              "max_value": 15,
              "min_value": 0,
              "name": "i",
              "size": 4,
              "type": "uint",
            },
          ],
          "prefix": "F82",
          "tlb": "#F82 i:uint4",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "app_config",
          "description": "Returns the \`i\`-th parameter from the _Tuple_ provided at \`c7\` for \`0 <= i <= 15\`. Equivalent to \`c7 PUSHCTR\` \`FIRST\` \`[i] INDEX\`.
If one of these internal operations fails, throws an appropriate type checking or range checking exception.",
          "fift": "[i] GETPARAM",
          "fift_examples": [],
          "gas": "26",
          "opcode": "F82i",
          "stack": " - x",
        },
        "mnemonic": "GETPARAM",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [
              {
                "index": 7,
                "type": "constant",
              },
            ],
            "stack": [],
          },
          "outputs": {
            "registers": [],
            "stack": [
              {
                "name": "x",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
            ],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "display_hints": [],
            "max_value": 15,
            "min_value": 0,
            "name": "i",
            "size": 4,
            "type": "uint",
          },
          "type": "numeric",
          "value": 3,
        },
      ],
    },
  },
  {
    "hash": "fe9530d3243853083ef2ef0b4c2908c0abf6fa1c31ea243aacaa5bf8c7d753f1",
    "length": 8,
    "offset": 368,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [],
          "prefix": "BB",
          "tlb": "#BB",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "compare_int",
          "description": "",
          "fift": "LEQ",
          "fift_examples": [],
          "gas": "18",
          "opcode": "BB",
          "stack": "x y - x<=y",
        },
        "mnemonic": "LEQ",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "x",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
              {
                "name": "y",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [
              {
                "name": "result",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
            ],
          },
        },
      },
      "operands": [],
    },
  },
  {
    "hash": "fe9530d3243853083ef2ef0b4c2908c0abf6fa1c31ea243aacaa5bf8c7d753f1",
    "length": 16,
    "offset": 376,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "display_hints": [],
              "max_value": 63,
              "min_value": 0,
              "name": "n",
              "size": 6,
              "type": "uint",
            },
          ],
          "prefix": "F26_",
          "tlb": "#F26_ n:uint6",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "exceptions",
          "description": "Throws exception \`0 <= n <= 63\` with  parameter zero only if integer \`f!=0\`.",
          "fift": "[n] THROWIF",
          "fift_examples": [],
          "gas": "26/76",
          "opcode": "F26_n",
          "stack": "f - ",
        },
        "mnemonic": "THROWIF_SHORT",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "f",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "display_hints": [],
            "max_value": 63,
            "min_value": 0,
            "name": "n",
            "size": 6,
            "type": "uint",
          },
          "type": "numeric",
          "value": 35,
        },
      ],
    },
  },
  {
    "hash": "fe9530d3243853083ef2ef0b4c2908c0abf6fa1c31ea243aacaa5bf8c7d753f1",
    "length": 16,
    "offset": 392,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "display_hints": [
                {
                  "type": "register",
                },
              ],
              "max_value": 15,
              "min_value": 0,
              "name": "i",
              "size": 4,
              "type": "uint",
            },
          ],
          "prefix": "ED4",
          "tlb": "#ED4 i:uint4",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "cont_registers",
          "description": "Pushes the current value of control register \`c(i)\`. If the control register is not supported in the current codepage, or if it does not have a value, an exception is triggered.",
          "fift": "c[i] PUSHCTR
c[i] PUSH",
          "fift_examples": [],
          "gas": "26",
          "opcode": "ED4i",
          "stack": "- x",
        },
        "mnemonic": "PUSHCTR",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [
              {
                "type": "variable",
                "var_name": "i",
              },
            ],
            "stack": [],
          },
          "outputs": {
            "registers": [],
            "stack": [
              {
                "name": "x",
                "type": "simple",
              },
            ],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "display_hints": [
              {
                "type": "register",
              },
            ],
            "max_value": 15,
            "min_value": 0,
            "name": "i",
            "size": 4,
            "type": "uint",
          },
          "type": "numeric",
          "value": 4,
        },
      ],
    },
  },
  {
    "hash": "fe9530d3243853083ef2ef0b4c2908c0abf6fa1c31ea243aacaa5bf8c7d753f1",
    "length": 8,
    "offset": 408,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [],
          "prefix": "D0",
          "tlb": "#D0",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "cell_parse",
          "description": "Converts a _Cell_ into a _Slice_. Notice that \`c\` must be either an ordinary cell, or an exotic cell which is automatically _loaded_ to yield an ordinary cell \`c'\`, converted into a _Slice_ afterwards.",
          "fift": "CTOS",
          "fift_examples": [],
          "gas": "118/43",
          "opcode": "D0",
          "stack": "c - s",
        },
        "mnemonic": "CTOS",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "c",
                "type": "simple",
                "value_types": [
                  "Cell",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [
              {
                "name": "s",
                "type": "simple",
                "value_types": [
                  "Slice",
                ],
              },
            ],
          },
        },
      },
      "operands": [],
    },
  },
  {
    "hash": "fe9530d3243853083ef2ef0b4c2908c0abf6fa1c31ea243aacaa5bf8c7d753f1",
    "length": 16,
    "offset": 416,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "display_hints": [
                {
                  "type": "add",
                  "value": 1,
                },
              ],
              "max_value": 255,
              "min_value": 0,
              "name": "c",
              "size": 8,
              "type": "uint",
            },
          ],
          "prefix": "D3",
          "tlb": "#D3 cc:uint8",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "cell_parse",
          "description": "Loads an unsigned \`cc+1\`-bit integer \`x\` from _Slice_ \`s\`.",
          "fift": "[cc+1] LDU",
          "fift_examples": [],
          "gas": "26",
          "opcode": "D3cc",
          "stack": "s - x s'",
        },
        "mnemonic": "LDU",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "s",
                "type": "simple",
                "value_types": [
                  "Slice",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [
              {
                "name": "x",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
              {
                "name": "s2",
                "type": "simple",
                "value_types": [
                  "Slice",
                ],
              },
            ],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "display_hints": [
              {
                "type": "add",
                "value": 1,
              },
            ],
            "max_value": 255,
            "min_value": 0,
            "name": "c",
            "size": 8,
            "type": "uint",
          },
          "type": "numeric",
          "value": 31,
        },
      ],
    },
  },
  {
    "hash": "fe9530d3243853083ef2ef0b4c2908c0abf6fa1c31ea243aacaa5bf8c7d753f1",
    "length": 16,
    "offset": 432,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "display_hints": [
                {
                  "type": "add",
                  "value": 1,
                },
              ],
              "max_value": 255,
              "min_value": 0,
              "name": "c",
              "size": 8,
              "type": "uint",
            },
          ],
          "prefix": "D3",
          "tlb": "#D3 cc:uint8",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "cell_parse",
          "description": "Loads an unsigned \`cc+1\`-bit integer \`x\` from _Slice_ \`s\`.",
          "fift": "[cc+1] LDU",
          "fift_examples": [],
          "gas": "26",
          "opcode": "D3cc",
          "stack": "s - x s'",
        },
        "mnemonic": "LDU",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "s",
                "type": "simple",
                "value_types": [
                  "Slice",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [
              {
                "name": "x",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
              {
                "name": "s2",
                "type": "simple",
                "value_types": [
                  "Slice",
                ],
              },
            ],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "display_hints": [
              {
                "type": "add",
                "value": 1,
              },
            ],
            "max_value": 255,
            "min_value": 0,
            "name": "c",
            "size": 8,
            "type": "uint",
          },
          "type": "numeric",
          "value": 255,
        },
      ],
    },
  },
  {
    "hash": "fe9530d3243853083ef2ef0b4c2908c0abf6fa1c31ea243aacaa5bf8c7d753f1",
    "length": 8,
    "offset": 448,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [],
          "prefix": "D1",
          "tlb": "#D1",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "cell_parse",
          "description": "Removes a _Slice_ \`s\` from the stack, and throws an exception if it is not empty.",
          "fift": "ENDS",
          "fift_examples": [],
          "gas": "18/68",
          "opcode": "D1",
          "stack": "s - ",
        },
        "mnemonic": "ENDS",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "s",
                "type": "simple",
                "value_types": [
                  "Slice",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [],
          },
        },
      },
      "operands": [],
    },
  },
  {
    "hash": "fe9530d3243853083ef2ef0b4c2908c0abf6fa1c31ea243aacaa5bf8c7d753f1",
    "length": 16,
    "offset": 456,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "display_hints": [
                {
                  "type": "stack",
                },
              ],
              "max_value": 15,
              "min_value": 0,
              "name": "i",
              "size": 4,
              "type": "uint",
            },
            {
              "display_hints": [
                {
                  "type": "stack",
                },
              ],
              "max_value": 15,
              "min_value": 0,
              "name": "j",
              "size": 4,
              "type": "uint",
            },
          ],
          "prefix": "51",
          "tlb": "#51 i:uint4 j:uint4",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "stack_complex",
          "description": "Equivalent to \`s[i] XCHG0\` \`s[j] PUSH\`.",
          "fift": "s[i] s[j] XCPU",
          "fift_examples": [],
          "gas": "26",
          "opcode": "51ij",
          "stack": "",
        },
        "mnemonic": "XCPU",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
          },
          "outputs": {
            "registers": [],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "display_hints": [
              {
                "type": "stack",
              },
            ],
            "max_value": 15,
            "min_value": 0,
            "name": "i",
            "size": 4,
            "type": "uint",
          },
          "type": "numeric",
          "value": 3,
        },
        {
          "definition": {
            "display_hints": [
              {
                "type": "stack",
              },
            ],
            "max_value": 15,
            "min_value": 0,
            "name": "j",
            "size": 4,
            "type": "uint",
          },
          "type": "numeric",
          "value": 1,
        },
      ],
    },
  },
  {
    "hash": "fe9530d3243853083ef2ef0b4c2908c0abf6fa1c31ea243aacaa5bf8c7d753f1",
    "length": 8,
    "offset": 472,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [],
          "prefix": "BA",
          "tlb": "#BA",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "compare_int",
          "description": "Returns \`-1\` if \`x=y\`, \`0\` otherwise.",
          "fift": "EQUAL",
          "fift_examples": [],
          "gas": "18",
          "opcode": "BA",
          "stack": "x y - x=y",
        },
        "mnemonic": "EQUAL",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "x",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
              {
                "name": "y",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [
              {
                "name": "result",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
            ],
          },
        },
      },
      "operands": [],
    },
  },
  {
    "hash": "fe9530d3243853083ef2ef0b4c2908c0abf6fa1c31ea243aacaa5bf8c7d753f1",
    "length": 16,
    "offset": 480,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "display_hints": [],
              "max_value": 63,
              "min_value": 0,
              "name": "n",
              "size": 6,
              "type": "uint",
            },
          ],
          "prefix": "F2A_",
          "tlb": "#F2A_ n:uint6",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "exceptions",
          "description": "Throws exception \`0 <= n <= 63\` with parameter zero only if integer \`f=0\`.",
          "fift": "[n] THROWIFNOT",
          "fift_examples": [],
          "gas": "26/76",
          "opcode": "F2A_n",
          "stack": "f - ",
        },
        "mnemonic": "THROWIFNOT_SHORT",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "f",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "display_hints": [],
            "max_value": 63,
            "min_value": 0,
            "name": "n",
            "size": 6,
            "type": "uint",
          },
          "type": "numeric",
          "value": 33,
        },
      ],
    },
  },
  {
    "hash": "fe9530d3243853083ef2ef0b4c2908c0abf6fa1c31ea243aacaa5bf8c7d753f1",
    "length": 8,
    "offset": 496,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "display_hints": [
                {
                  "type": "stack",
                },
              ],
              "max_value": 15,
              "min_value": 1,
              "name": "i",
              "size": 4,
              "type": "uint",
            },
          ],
          "operands_range_check": {
            "from": 1,
            "length": 4,
            "to": 15,
          },
          "prefix": "0",
          "tlb": "#0 i:(## 4) {1 <= i}",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "stack_basic",
          "description": "Interchanges \`s0\` with \`s[i]\`, \`1 <= i <= 15\`.",
          "fift": "s[i] XCHG0",
          "fift_examples": [],
          "gas": "18",
          "opcode": "0i",
          "stack": "",
        },
        "mnemonic": "XCHG_0I",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
          },
          "outputs": {
            "registers": [],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "display_hints": [
              {
                "type": "stack",
              },
            ],
            "max_value": 15,
            "min_value": 1,
            "name": "i",
            "size": 4,
            "type": "uint",
          },
          "type": "numeric",
          "value": 3,
        },
      ],
    },
  },
  {
    "hash": "fe9530d3243853083ef2ef0b4c2908c0abf6fa1c31ea243aacaa5bf8c7d753f1",
    "length": 16,
    "offset": 504,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [],
          "prefix": "F901",
          "tlb": "#F901",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "app_crypto",
          "description": "Computes the hash of a _Slice_ \`s\` and returns it as a 256-bit unsigned integer \`x\`. The result is the same as if an ordinary cell containing only data and references from \`s\` had been created and its hash computed by \`HASHCU\`.",
          "fift": "HASHSU",
          "fift_examples": [],
          "gas": "526",
          "opcode": "F901",
          "stack": "s - x",
        },
        "mnemonic": "HASHSU",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "s",
                "type": "simple",
                "value_types": [
                  "Slice",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [
              {
                "name": "x",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
            ],
          },
        },
      },
      "operands": [],
    },
  },
  {
    "hash": "fe9530d3243853083ef2ef0b4c2908c0abf6fa1c31ea243aacaa5bf8c7d753f1",
    "length": 24,
    "offset": 520,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "display_hints": [
                {
                  "type": "stack",
                },
              ],
              "max_value": 15,
              "min_value": 0,
              "name": "i",
              "size": 4,
              "type": "uint",
            },
            {
              "display_hints": [
                {
                  "type": "stack",
                },
              ],
              "max_value": 15,
              "min_value": 0,
              "name": "j",
              "size": 4,
              "type": "uint",
            },
            {
              "display_hints": [
                {
                  "type": "stack",
                },
              ],
              "max_value": 15,
              "min_value": 0,
              "name": "k",
              "size": 4,
              "type": "uint",
            },
          ],
          "prefix": "541",
          "tlb": "#541 i:uint4 j:uint4 k:uint4",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "stack_complex",
          "description": "Equivalent to \`s[i] s[j] XCHG2\` \`s[k] PUSH\`.",
          "fift": "s[i] s[j] s[k] XC2PU",
          "fift_examples": [],
          "gas": "34",
          "opcode": "541ijk",
          "stack": "",
        },
        "mnemonic": "XC2PU",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
          },
          "outputs": {
            "registers": [],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "display_hints": [
              {
                "type": "stack",
              },
            ],
            "max_value": 15,
            "min_value": 0,
            "name": "i",
            "size": 4,
            "type": "uint",
          },
          "type": "numeric",
          "value": 0,
        },
        {
          "definition": {
            "display_hints": [
              {
                "type": "stack",
              },
            ],
            "max_value": 15,
            "min_value": 0,
            "name": "j",
            "size": 4,
            "type": "uint",
          },
          "type": "numeric",
          "value": 4,
        },
        {
          "definition": {
            "display_hints": [
              {
                "type": "stack",
              },
            ],
            "max_value": 15,
            "min_value": 0,
            "name": "k",
            "size": 4,
            "type": "uint",
          },
          "type": "numeric",
          "value": 2,
        },
      ],
    },
  },
  {
    "hash": "fe9530d3243853083ef2ef0b4c2908c0abf6fa1c31ea243aacaa5bf8c7d753f1",
    "length": 16,
    "offset": 544,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [],
          "prefix": "F910",
          "tlb": "#F910",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "app_crypto",
          "description": "Checks the Ed25519-signature \`s\` of a hash \`h\` (a 256-bit unsigned integer, usually computed as the hash of some data) using public key \`k\` (also represented by a 256-bit unsigned integer).
The signature \`s\` must be a _Slice_ containing at least 512 data bits; only the first 512 bits are used. The result is \`-1\` if the signature is valid, \`0\` otherwise.
Notice that \`CHKSIGNU\` is equivalent to \`ROT\` \`NEWC\` \`256 STU\` \`ENDC\` \`ROTREV\` \`CHKSIGNS\`, i.e., to \`CHKSIGNS\` with the first argument \`d\` set to 256-bit _Slice_ containing \`h\`. Therefore, if \`h\` is computed as the hash of some data, these data are hashed _twice_, the second hashing occurring inside \`CHKSIGNS\`.",
          "fift": "CHKSIGNU",
          "fift_examples": [],
          "gas": "26",
          "opcode": "F910",
          "stack": "h s k - ?",
        },
        "mnemonic": "CHKSIGNU",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "h",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
              {
                "name": "s",
                "type": "simple",
                "value_types": [
                  "Slice",
                ],
              },
              {
                "name": "k",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [
              {
                "name": "result",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
            ],
          },
        },
      },
      "operands": [],
    },
  },
  {
    "hash": "fe9530d3243853083ef2ef0b4c2908c0abf6fa1c31ea243aacaa5bf8c7d753f1",
    "length": 16,
    "offset": 560,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "display_hints": [],
              "max_value": 63,
              "min_value": 0,
              "name": "n",
              "size": 6,
              "type": "uint",
            },
          ],
          "prefix": "F2A_",
          "tlb": "#F2A_ n:uint6",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "exceptions",
          "description": "Throws exception \`0 <= n <= 63\` with parameter zero only if integer \`f=0\`.",
          "fift": "[n] THROWIFNOT",
          "fift_examples": [],
          "gas": "26/76",
          "opcode": "F2A_n",
          "stack": "f - ",
        },
        "mnemonic": "THROWIFNOT_SHORT",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "f",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "display_hints": [],
            "max_value": 63,
            "min_value": 0,
            "name": "n",
            "size": 6,
            "type": "uint",
          },
          "type": "numeric",
          "value": 34,
        },
      ],
    },
  },
  {
    "hash": "fe9530d3243853083ef2ef0b4c2908c0abf6fa1c31ea243aacaa5bf8c7d753f1",
    "length": 16,
    "offset": 576,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [],
          "prefix": "F800",
          "tlb": "#F800",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "app_gas",
          "description": "Sets current gas limit \`g_l\` to its maximal allowed value \`g_m\`, and resets the gas credit \`g_c\` to zero, decreasing the value of \`g_r\` by \`g_c\` in the process.
In other words, the current smart contract agrees to buy some gas to finish the current transaction. This action is required to process external messages, which bring no value (hence no gas) with themselves.",
          "fift": "ACCEPT",
          "fift_examples": [],
          "gas": "26",
          "opcode": "F800",
          "stack": "-",
        },
        "mnemonic": "ACCEPT",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [
              {
                "name": "gas",
                "type": "special",
              },
            ],
            "stack": [],
          },
          "outputs": {
            "registers": [
              {
                "name": "gas",
                "type": "special",
              },
            ],
            "stack": [],
          },
        },
      },
      "operands": [],
    },
  },
  {
    "hash": "fe9530d3243853083ef2ef0b4c2908c0abf6fa1c31ea243aacaa5bf8c7d753f1",
    "length": 8,
    "offset": 592,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "display_hints": [
                {
                  "type": "stack",
                },
              ],
              "max_value": 15,
              "min_value": 1,
              "name": "i",
              "size": 4,
              "type": "uint",
            },
          ],
          "operands_range_check": {
            "from": 1,
            "length": 4,
            "to": 15,
          },
          "prefix": "0",
          "tlb": "#0 i:(## 4) {1 <= i}",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "stack_basic",
          "description": "Interchanges \`s0\` with \`s[i]\`, \`1 <= i <= 15\`.",
          "fift": "s[i] XCHG0",
          "fift_examples": [],
          "gas": "18",
          "opcode": "0i",
          "stack": "",
        },
        "mnemonic": "XCHG_0I",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
          },
          "outputs": {
            "registers": [],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "display_hints": [
              {
                "type": "stack",
              },
            ],
            "max_value": 15,
            "min_value": 1,
            "name": "i",
            "size": 4,
            "type": "uint",
          },
          "type": "numeric",
          "value": 2,
        },
      ],
    },
  },
  {
    "hash": "fe9530d3243853083ef2ef0b4c2908c0abf6fa1c31ea243aacaa5bf8c7d753f1",
    "length": 32,
    "offset": 600,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "bits_length_var_size": 4,
              "bits_padding": 0,
              "completion_tag": false,
              "display_hints": [
                {
                  "type": "continuation",
                },
              ],
              "max_bits": 120,
              "max_refs": 0,
              "min_bits": 0,
              "min_refs": 0,
              "name": "s",
              "type": "subslice",
            },
          ],
          "prefix": "9",
          "tlb": "#9 x:(## 4) ssss:((8 * x) * Bit)",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "const_data",
          "description": "Pushes a continuation made from \`builder\`.
_Details:_ Pushes an \`x\`-byte continuation for \`0 <= x <= 15\`.",
          "fift": "[builder] PUSHCONT
[builder] CONT",
          "fift_examples": [
            {
              "description": "Pushes a continuation with code \`code\`. Note that the assembler can replace \`PUSHCONT\` with \`PUSHREFCONT\` in certain situations (e.g. if there's not enough space in the current continuation).",
              "fift": "<{ code }> PUSHCONT <{ code }> CONT CONT:<{ code }>",
            },
          ],
          "gas": "18",
          "opcode": "9xccc",
          "stack": "- c",
        },
        "mnemonic": "PUSHCONT_SHORT",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [],
          },
          "outputs": {
            "registers": [],
            "stack": [
              {
                "name": "c",
                "type": "simple",
                "value_types": [
                  "Continuation",
                ],
              },
            ],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "bits_length_var_size": 4,
            "bits_padding": 0,
            "completion_tag": false,
            "display_hints": [
              {
                "type": "continuation",
              },
            ],
            "max_bits": 120,
            "max_refs": 0,
            "min_bits": 0,
            "min_refs": 0,
            "name": "s",
            "type": "subslice",
          },
          "limitBits": 24,
          "limitRefs": 0,
          "offsetBits": 608,
          "offsetRefs": 0,
          "source": Cell {
            "_depths": [
              0,
              0,
              0,
              0,
            ],
            "_hashes": [
              {
                "data": [
                  254,
                  149,
                  48,
                  211,
                  36,
                  56,
                  83,
                  8,
                  62,
                  242,
                  239,
                  11,
                  76,
                  41,
                  8,
                  192,
                  171,
                  246,
                  250,
                  28,
                  49,
                  234,
                  36,
                  58,
                  172,
                  170,
                  91,
                  248,
                  199,
                  215,
                  83,
                  241,
                ],
                "type": "Buffer",
              },
              {
                "data": [
                  254,
                  149,
                  48,
                  211,
                  36,
                  56,
                  83,
                  8,
                  62,
                  242,
                  239,
                  11,
                  76,
                  41,
                  8,
                  192,
                  171,
                  246,
                  250,
                  28,
                  49,
                  234,
                  36,
                  58,
                  172,
                  170,
                  91,
                  248,
                  199,
                  215,
                  83,
                  241,
                ],
                "type": "Buffer",
              },
              {
                "data": [
                  254,
                  149,
                  48,
                  211,
                  36,
                  56,
                  83,
                  8,
                  62,
                  242,
                  239,
                  11,
                  76,
                  41,
                  8,
                  192,
                  171,
                  246,
                  250,
                  28,
                  49,
                  234,
                  36,
                  58,
                  172,
                  170,
                  91,
                  248,
                  199,
                  215,
                  83,
                  241,
                ],
                "type": "Buffer",
              },
              {
                "data": [
                  254,
                  149,
                  48,
                  211,
                  36,
                  56,
                  83,
                  8,
                  62,
                  242,
                  239,
                  11,
                  76,
                  41,
                  8,
                  192,
                  171,
                  246,
                  250,
                  28,
                  49,
                  234,
                  36,
                  58,
                  172,
                  170,
                  91,
                  248,
                  199,
                  215,
                  83,
                  241,
                ],
                "type": "Buffer",
              },
            ],
            "beginParse": [Function],
            "bits": BitString {
              "_data": {
                "data": [
                  0,
                  194,
                  255,
                  0,
                  32,
                  221,
                  32,
                  130,
                  1,
                  76,
                  151,
                  186,
                  33,
                  130,
                  1,
                  51,
                  156,
                  186,
                  177,
                  156,
                  113,
                  176,
                  237,
                  68,
                  208,
                  211,
                  31,
                  215,
                  11,
                  255,
                  227,
                  4,
                  224,
                  164,
                  242,
                  96,
                  131,
                  8,
                  215,
                  24,
                  32,
                  211,
                  31,
                  211,
                  31,
                  1,
                  248,
                  35,
                  187,
                  242,
                  99,
                  237,
                  68,
                  208,
                  211,
                  31,
                  211,
                  255,
                  209,
                  81,
                  49,
                  186,
                  242,
                  161,
                  3,
                  249,
                  1,
                  84,
                  16,
                  66,
                  249,
                  16,
                  242,
                  162,
                  248,
                  0,
                  2,
                  147,
                  32,
                  215,
                  74,
                  150,
                  211,
                  7,
                  212,
                  2,
                  251,
                  0,
                  232,
                  209,
                  164,
                  200,
                  203,
                  31,
                  203,
                  255,
                  201,
                  237,
                  84,
                ],
                "type": "Buffer",
              },
              "_length": 776,
              "_offset": 16,
              Symbol(nodejs.util.inspect.custom): [Function],
            },
            "depth": [Function],
            "equals": [Function],
            "hash": [Function],
            "level": [Function],
            "mask": LevelMask {
              "_hashCount": 1,
              "_hashIndex": 0,
              "_mask": 0,
            },
            "refs": [],
            "type": -1,
            Symbol(nodejs.util.inspect.custom): [Function],
          },
          "type": "subslice",
          "value": Cell {
            "_depths": [
              0,
              0,
              0,
              0,
            ],
            "_hashes": [
              {
                "data": [
                  98,
                  44,
                  20,
                  148,
                  189,
                  180,
                  138,
                  130,
                  174,
                  44,
                  239,
                  18,
                  138,
                  4,
                  250,
                  32,
                  130,
                  121,
                  233,
                  213,
                  92,
                  74,
                  67,
                  5,
                  144,
                  105,
                  176,
                  117,
                  36,
                  154,
                  62,
                  182,
                ],
                "type": "Buffer",
              },
              {
                "data": [
                  98,
                  44,
                  20,
                  148,
                  189,
                  180,
                  138,
                  130,
                  174,
                  44,
                  239,
                  18,
                  138,
                  4,
                  250,
                  32,
                  130,
                  121,
                  233,
                  213,
                  92,
                  74,
                  67,
                  5,
                  144,
                  105,
                  176,
                  117,
                  36,
                  154,
                  62,
                  182,
                ],
                "type": "Buffer",
              },
              {
                "data": [
                  98,
                  44,
                  20,
                  148,
                  189,
                  180,
                  138,
                  130,
                  174,
                  44,
                  239,
                  18,
                  138,
                  4,
                  250,
                  32,
                  130,
                  121,
                  233,
                  213,
                  92,
                  74,
                  67,
                  5,
                  144,
                  105,
                  176,
                  117,
                  36,
                  154,
                  62,
                  182,
                ],
                "type": "Buffer",
              },
              {
                "data": [
                  98,
                  44,
                  20,
                  148,
                  189,
                  180,
                  138,
                  130,
                  174,
                  44,
                  239,
                  18,
                  138,
                  4,
                  250,
                  32,
                  130,
                  121,
                  233,
                  213,
                  92,
                  74,
                  67,
                  5,
                  144,
                  105,
                  176,
                  117,
                  36,
                  154,
                  62,
                  182,
                ],
                "type": "Buffer",
              },
            ],
            "beginParse": [Function],
            "bits": BitString {
              "_data": {
                "data": [
                  32,
                  215,
                  74,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                ],
                "type": "Buffer",
              },
              "_length": 24,
              "_offset": 0,
              Symbol(nodejs.util.inspect.custom): [Function],
            },
            "depth": [Function],
            "equals": [Function],
            "hash": [Function],
            "level": [Function],
            "mask": LevelMask {
              "_hashCount": 1,
              "_hashIndex": 0,
              "_mask": 0,
            },
            "refs": [],
            "type": -1,
            Symbol(nodejs.util.inspect.custom): [Function],
          },
        },
      ],
    },
  },
  {
    "hash": "fe9530d3243853083ef2ef0b4c2908c0abf6fa1c31ea243aacaa5bf8c7d753f1",
    "length": 56,
    "offset": 632,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "bits_length_var_size": 4,
              "bits_padding": 0,
              "completion_tag": false,
              "display_hints": [
                {
                  "type": "continuation",
                },
              ],
              "max_bits": 120,
              "max_refs": 0,
              "min_bits": 0,
              "min_refs": 0,
              "name": "s",
              "type": "subslice",
            },
          ],
          "prefix": "9",
          "tlb": "#9 x:(## 4) ssss:((8 * x) * Bit)",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "const_data",
          "description": "Pushes a continuation made from \`builder\`.
_Details:_ Pushes an \`x\`-byte continuation for \`0 <= x <= 15\`.",
          "fift": "[builder] PUSHCONT
[builder] CONT",
          "fift_examples": [
            {
              "description": "Pushes a continuation with code \`code\`. Note that the assembler can replace \`PUSHCONT\` with \`PUSHREFCONT\` in certain situations (e.g. if there's not enough space in the current continuation).",
              "fift": "<{ code }> PUSHCONT <{ code }> CONT CONT:<{ code }>",
            },
          ],
          "gas": "18",
          "opcode": "9xccc",
          "stack": "- c",
        },
        "mnemonic": "PUSHCONT_SHORT",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [],
          },
          "outputs": {
            "registers": [],
            "stack": [
              {
                "name": "c",
                "type": "simple",
                "value_types": [
                  "Continuation",
                ],
              },
            ],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "bits_length_var_size": 4,
            "bits_padding": 0,
            "completion_tag": false,
            "display_hints": [
              {
                "type": "continuation",
              },
            ],
            "max_bits": 120,
            "max_refs": 0,
            "min_bits": 0,
            "min_refs": 0,
            "name": "s",
            "type": "subslice",
          },
          "limitBits": 48,
          "limitRefs": 0,
          "offsetBits": 640,
          "offsetRefs": 0,
          "source": Cell {
            "_depths": [
              0,
              0,
              0,
              0,
            ],
            "_hashes": [
              {
                "data": [
                  254,
                  149,
                  48,
                  211,
                  36,
                  56,
                  83,
                  8,
                  62,
                  242,
                  239,
                  11,
                  76,
                  41,
                  8,
                  192,
                  171,
                  246,
                  250,
                  28,
                  49,
                  234,
                  36,
                  58,
                  172,
                  170,
                  91,
                  248,
                  199,
                  215,
                  83,
                  241,
                ],
                "type": "Buffer",
              },
              {
                "data": [
                  254,
                  149,
                  48,
                  211,
                  36,
                  56,
                  83,
                  8,
                  62,
                  242,
                  239,
                  11,
                  76,
                  41,
                  8,
                  192,
                  171,
                  246,
                  250,
                  28,
                  49,
                  234,
                  36,
                  58,
                  172,
                  170,
                  91,
                  248,
                  199,
                  215,
                  83,
                  241,
                ],
                "type": "Buffer",
              },
              {
                "data": [
                  254,
                  149,
                  48,
                  211,
                  36,
                  56,
                  83,
                  8,
                  62,
                  242,
                  239,
                  11,
                  76,
                  41,
                  8,
                  192,
                  171,
                  246,
                  250,
                  28,
                  49,
                  234,
                  36,
                  58,
                  172,
                  170,
                  91,
                  248,
                  199,
                  215,
                  83,
                  241,
                ],
                "type": "Buffer",
              },
              {
                "data": [
                  254,
                  149,
                  48,
                  211,
                  36,
                  56,
                  83,
                  8,
                  62,
                  242,
                  239,
                  11,
                  76,
                  41,
                  8,
                  192,
                  171,
                  246,
                  250,
                  28,
                  49,
                  234,
                  36,
                  58,
                  172,
                  170,
                  91,
                  248,
                  199,
                  215,
                  83,
                  241,
                ],
                "type": "Buffer",
              },
            ],
            "beginParse": [Function],
            "bits": BitString {
              "_data": {
                "data": [
                  0,
                  194,
                  255,
                  0,
                  32,
                  221,
                  32,
                  130,
                  1,
                  76,
                  151,
                  186,
                  33,
                  130,
                  1,
                  51,
                  156,
                  186,
                  177,
                  156,
                  113,
                  176,
                  237,
                  68,
                  208,
                  211,
                  31,
                  215,
                  11,
                  255,
                  227,
                  4,
                  224,
                  164,
                  242,
                  96,
                  131,
                  8,
                  215,
                  24,
                  32,
                  211,
                  31,
                  211,
                  31,
                  1,
                  248,
                  35,
                  187,
                  242,
                  99,
                  237,
                  68,
                  208,
                  211,
                  31,
                  211,
                  255,
                  209,
                  81,
                  49,
                  186,
                  242,
                  161,
                  3,
                  249,
                  1,
                  84,
                  16,
                  66,
                  249,
                  16,
                  242,
                  162,
                  248,
                  0,
                  2,
                  147,
                  32,
                  215,
                  74,
                  150,
                  211,
                  7,
                  212,
                  2,
                  251,
                  0,
                  232,
                  209,
                  164,
                  200,
                  203,
                  31,
                  203,
                  255,
                  201,
                  237,
                  84,
                ],
                "type": "Buffer",
              },
              "_length": 776,
              "_offset": 16,
              Symbol(nodejs.util.inspect.custom): [Function],
            },
            "depth": [Function],
            "equals": [Function],
            "hash": [Function],
            "level": [Function],
            "mask": LevelMask {
              "_hashCount": 1,
              "_hashIndex": 0,
              "_mask": 0,
            },
            "refs": [],
            "type": -1,
            Symbol(nodejs.util.inspect.custom): [Function],
          },
          "type": "subslice",
          "value": Cell {
            "_depths": [
              0,
              0,
              0,
              0,
            ],
            "_hashes": [
              {
                "data": [
                  201,
                  205,
                  146,
                  164,
                  137,
                  234,
                  45,
                  255,
                  227,
                  41,
                  235,
                  253,
                  131,
                  99,
                  251,
                  105,
                  11,
                  159,
                  159,
                  102,
                  189,
                  83,
                  186,
                  82,
                  108,
                  134,
                  46,
                  238,
                  227,
                  84,
                  192,
                  24,
                ],
                "type": "Buffer",
              },
              {
                "data": [
                  201,
                  205,
                  146,
                  164,
                  137,
                  234,
                  45,
                  255,
                  227,
                  41,
                  235,
                  253,
                  131,
                  99,
                  251,
                  105,
                  11,
                  159,
                  159,
                  102,
                  189,
                  83,
                  186,
                  82,
                  108,
                  134,
                  46,
                  238,
                  227,
                  84,
                  192,
                  24,
                ],
                "type": "Buffer",
              },
              {
                "data": [
                  201,
                  205,
                  146,
                  164,
                  137,
                  234,
                  45,
                  255,
                  227,
                  41,
                  235,
                  253,
                  131,
                  99,
                  251,
                  105,
                  11,
                  159,
                  159,
                  102,
                  189,
                  83,
                  186,
                  82,
                  108,
                  134,
                  46,
                  238,
                  227,
                  84,
                  192,
                  24,
                ],
                "type": "Buffer",
              },
              {
                "data": [
                  201,
                  205,
                  146,
                  164,
                  137,
                  234,
                  45,
                  255,
                  227,
                  41,
                  235,
                  253,
                  131,
                  99,
                  251,
                  105,
                  11,
                  159,
                  159,
                  102,
                  189,
                  83,
                  186,
                  82,
                  108,
                  134,
                  46,
                  238,
                  227,
                  84,
                  192,
                  24,
                ],
                "type": "Buffer",
              },
            ],
            "beginParse": [Function],
            "bits": BitString {
              "_data": {
                "data": [
                  211,
                  7,
                  212,
                  2,
                  251,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                ],
                "type": "Buffer",
              },
              "_length": 48,
              "_offset": 0,
              Symbol(nodejs.util.inspect.custom): [Function],
            },
            "depth": [Function],
            "equals": [Function],
            "hash": [Function],
            "level": [Function],
            "mask": LevelMask {
              "_hashCount": 1,
              "_hashIndex": 0,
              "_mask": 0,
            },
            "refs": [],
            "type": -1,
            Symbol(nodejs.util.inspect.custom): [Function],
          },
        },
      ],
    },
  },
  {
    "hash": "fe9530d3243853083ef2ef0b4c2908c0abf6fa1c31ea243aacaa5bf8c7d753f1",
    "length": 8,
    "offset": 688,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [],
          "prefix": "E8",
          "tlb": "#E8",
        },
        "control_flow": {
          "branches": [
            {
              "save": {
                "c0": {
                  "args": {
                    "after": {
                      "save": {
                        "c0": {
                          "index": 0,
                          "type": "register",
                        },
                      },
                      "type": "cc",
                    },
                    "body": {
                      "type": "variable",
                      "var_name": "c",
                    },
                    "cond": {
                      "type": "variable",
                      "var_name": "c2",
                    },
                  },
                  "name": "while",
                  "type": "special",
                },
              },
              "type": "variable",
              "var_name": "c2",
            },
          ],
          "nobranch": false,
        },
        "doc": {
          "category": "cont_loops",
          "description": "Executes \`c'\` and pops an integer \`x\` from the resulting stack. If \`x\` is zero, exists the loop and transfers control to the original \`cc\`. If \`x\` is non-zero, executes \`c\`, and then begins a new iteration.",
          "fift": "WHILE",
          "fift_examples": [
            {
              "description": "Equivalent to \`<{ cond }> CONT\` \`<{ code }> CONT\` \`WHILE\`.",
              "fift": "WHILE:<{ cond }>DO<{ code }>",
            },
          ],
          "gas": "18",
          "opcode": "E8",
          "stack": "c' c - ",
        },
        "mnemonic": "WHILE",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "c2",
                "type": "simple",
                "value_types": [
                  "Continuation",
                ],
              },
              {
                "name": "c",
                "type": "simple",
                "value_types": [
                  "Continuation",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [],
          },
        },
      },
      "operands": [],
    },
  },
  {
    "hash": "fe9530d3243853083ef2ef0b4c2908c0abf6fa1c31ea243aacaa5bf8c7d753f1",
    "length": 8,
    "offset": 696,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [],
          "prefix": "D1",
          "tlb": "#D1",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "cell_parse",
          "description": "Removes a _Slice_ \`s\` from the stack, and throws an exception if it is not empty.",
          "fift": "ENDS",
          "fift_examples": [],
          "gas": "18/68",
          "opcode": "D1",
          "stack": "s - ",
        },
        "mnemonic": "ENDS",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "s",
                "type": "simple",
                "value_types": [
                  "Slice",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [],
          },
        },
      },
      "operands": [],
    },
  },
  {
    "hash": "fe9530d3243853083ef2ef0b4c2908c0abf6fa1c31ea243aacaa5bf8c7d753f1",
    "length": 8,
    "offset": 704,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [],
          "prefix": "A4",
          "tlb": "#A4",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "arithm_basic",
          "description": "Equivalent to \`1 ADDCONST\`.",
          "fift": "INC",
          "fift_examples": [],
          "gas": "18",
          "opcode": "A4",
          "stack": "x - x+1",
        },
        "mnemonic": "INC",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "x",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [
              {
                "name": "result",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
            ],
          },
        },
      },
      "operands": [],
    },
  },
  {
    "hash": "fe9530d3243853083ef2ef0b4c2908c0abf6fa1c31ea243aacaa5bf8c7d753f1",
    "length": 8,
    "offset": 712,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [],
          "prefix": "C8",
          "tlb": "#C8",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "cell_build",
          "description": "Creates a new empty _Builder_.",
          "fift": "NEWC",
          "fift_examples": [],
          "gas": "18",
          "opcode": "C8",
          "stack": "- b",
        },
        "mnemonic": "NEWC",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [],
          },
          "outputs": {
            "registers": [],
            "stack": [
              {
                "name": "b",
                "type": "simple",
                "value_types": [
                  "Builder",
                ],
              },
            ],
          },
        },
      },
      "operands": [],
    },
  },
  {
    "hash": "fe9530d3243853083ef2ef0b4c2908c0abf6fa1c31ea243aacaa5bf8c7d753f1",
    "length": 16,
    "offset": 720,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "display_hints": [
                {
                  "type": "add",
                  "value": 1,
                },
              ],
              "max_value": 255,
              "min_value": 0,
              "name": "c",
              "size": 8,
              "type": "uint",
            },
          ],
          "prefix": "CB",
          "tlb": "#CB cc:uint8",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "cell_build",
          "description": "Stores an unsigned \`cc+1\`-bit integer \`x\` into _Builder_ \`b\`. In all other respects it is similar to \`STI\`.",
          "fift": "[cc+1] STU",
          "fift_examples": [],
          "gas": "26",
          "opcode": "CBcc",
          "stack": "x b - b'",
        },
        "mnemonic": "STU",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "x",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
              {
                "name": "b",
                "type": "simple",
                "value_types": [
                  "Builder",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [
              {
                "name": "b2",
                "type": "simple",
                "value_types": [
                  "Builder",
                ],
              },
            ],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "display_hints": [
              {
                "type": "add",
                "value": 1,
              },
            ],
            "max_value": 255,
            "min_value": 0,
            "name": "c",
            "size": 8,
            "type": "uint",
          },
          "type": "numeric",
          "value": 31,
        },
      ],
    },
  },
  {
    "hash": "fe9530d3243853083ef2ef0b4c2908c0abf6fa1c31ea243aacaa5bf8c7d753f1",
    "length": 16,
    "offset": 736,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "display_hints": [
                {
                  "type": "add",
                  "value": 1,
                },
              ],
              "max_value": 255,
              "min_value": 0,
              "name": "c",
              "size": 8,
              "type": "uint",
            },
          ],
          "prefix": "CB",
          "tlb": "#CB cc:uint8",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "cell_build",
          "description": "Stores an unsigned \`cc+1\`-bit integer \`x\` into _Builder_ \`b\`. In all other respects it is similar to \`STI\`.",
          "fift": "[cc+1] STU",
          "fift_examples": [],
          "gas": "26",
          "opcode": "CBcc",
          "stack": "x b - b'",
        },
        "mnemonic": "STU",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "x",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
              {
                "name": "b",
                "type": "simple",
                "value_types": [
                  "Builder",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [
              {
                "name": "b2",
                "type": "simple",
                "value_types": [
                  "Builder",
                ],
              },
            ],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "display_hints": [
              {
                "type": "add",
                "value": 1,
              },
            ],
            "max_value": 255,
            "min_value": 0,
            "name": "c",
            "size": 8,
            "type": "uint",
          },
          "type": "numeric",
          "value": 255,
        },
      ],
    },
  },
  {
    "hash": "fe9530d3243853083ef2ef0b4c2908c0abf6fa1c31ea243aacaa5bf8c7d753f1",
    "length": 8,
    "offset": 752,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [],
          "prefix": "C9",
          "tlb": "#C9",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "cell_build",
          "description": "Converts a _Builder_ into an ordinary _Cell_.",
          "fift": "ENDC",
          "fift_examples": [],
          "gas": "518",
          "opcode": "C9",
          "stack": "b - c",
        },
        "mnemonic": "ENDC",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "b",
                "type": "simple",
                "value_types": [
                  "Builder",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [
              {
                "name": "c",
                "type": "simple",
                "value_types": [
                  "Cell",
                ],
              },
            ],
          },
        },
      },
      "operands": [],
    },
  },
  {
    "hash": "fe9530d3243853083ef2ef0b4c2908c0abf6fa1c31ea243aacaa5bf8c7d753f1",
    "length": 16,
    "offset": 760,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "display_hints": [
                {
                  "type": "register",
                },
              ],
              "max_value": 15,
              "min_value": 0,
              "name": "i",
              "size": 4,
              "type": "uint",
            },
          ],
          "prefix": "ED5",
          "tlb": "#ED5 i:uint4",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "cont_registers",
          "description": "Pops a value \`x\` from the stack and stores it into control register \`c(i)\`, if supported in the current codepage. Notice that if a control register accepts only values of a specific type, a type-checking exception may occur.",
          "fift": "c[i] POPCTR
c[i] POP",
          "fift_examples": [],
          "gas": "26",
          "opcode": "ED5i",
          "stack": "x - ",
        },
        "mnemonic": "POPCTR",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "x",
                "type": "simple",
              },
            ],
          },
          "outputs": {
            "registers": [
              {
                "type": "variable",
                "var_name": "i",
              },
            ],
            "stack": [],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "display_hints": [
              {
                "type": "register",
              },
            ],
            "max_value": 15,
            "min_value": 0,
            "name": "i",
            "size": 4,
            "type": "uint",
          },
          "type": "numeric",
          "value": 4,
        },
      ],
    },
  },
]
`;

exports[`decompiler should decompile a simple contract 6`] = `
[
  {
    "hash": "b61041a58a7980b946e8fb9e198e3c904d24799ffa36574ea4251c41a566f581",
    "length": 16,
    "offset": 0,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "display_hints": [],
              "max_value": 239,
              "min_value": 0,
              "name": "n",
              "size": 8,
              "type": "uint",
            },
          ],
          "operands_range_check": {
            "from": 0,
            "length": 8,
            "to": 239,
          },
          "prefix": "FF",
          "tlb": "#FF nn:(#<= 239)",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "codepage",
          "description": "Selects TVM codepage \`0 <= nn < 240\`. If the codepage is not supported, throws an invalid opcode exception.",
          "fift": "[nn] SETCP",
          "fift_examples": [],
          "gas": "26",
          "opcode": "FFnn",
          "stack": "-",
        },
        "mnemonic": "SETCP",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [],
          },
          "outputs": {
            "registers": [],
            "stack": [],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "display_hints": [],
            "max_value": 239,
            "min_value": 0,
            "name": "n",
            "size": 8,
            "type": "uint",
          },
          "type": "numeric",
          "value": 0,
        },
      ],
    },
  },
  {
    "hash": "b61041a58a7980b946e8fb9e198e3c904d24799ffa36574ea4251c41a566f581",
    "length": 8,
    "offset": 16,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "display_hints": [
                {
                  "type": "stack",
                },
              ],
              "max_value": 15,
              "min_value": 0,
              "name": "i",
              "size": 4,
              "type": "uint",
            },
          ],
          "prefix": "2",
          "tlb": "#2 i:uint4",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "stack_basic",
          "description": "Pushes a copy of the old \`s[i]\` into the stack.",
          "fift": "s[i] PUSH",
          "fift_examples": [],
          "gas": "18",
          "opcode": "2i",
          "stack": "",
        },
        "mnemonic": "PUSH",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
          },
          "outputs": {
            "registers": [],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "display_hints": [
              {
                "type": "stack",
              },
            ],
            "max_value": 15,
            "min_value": 0,
            "name": "i",
            "size": 4,
            "type": "uint",
          },
          "type": "numeric",
          "value": 0,
        },
      ],
    },
  },
  {
    "hash": "b61041a58a7980b946e8fb9e198e3c904d24799ffa36574ea4251c41a566f581",
    "length": 8,
    "offset": 24,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [],
          "prefix": "DD",
          "tlb": "#DD",
        },
        "control_flow": {
          "branches": [
            {
              "index": 0,
              "type": "register",
            },
          ],
          "nobranch": true,
        },
        "doc": {
          "category": "cont_conditional",
          "description": "Performs a \`RET\`, but only if integer \`f\` is zero.",
          "fift": "IFNOTRET
IF:",
          "fift_examples": [],
          "gas": "18",
          "opcode": "DD",
          "stack": "f - ",
        },
        "mnemonic": "IFNOTRET",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "f",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [],
          },
        },
      },
      "operands": [],
    },
  },
  {
    "hash": "b61041a58a7980b946e8fb9e198e3c904d24799ffa36574ea4251c41a566f581",
    "length": 8,
    "offset": 32,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "display_hints": [
                {
                  "type": "stack",
                },
              ],
              "max_value": 15,
              "min_value": 0,
              "name": "i",
              "size": 4,
              "type": "uint",
            },
          ],
          "prefix": "2",
          "tlb": "#2 i:uint4",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "stack_basic",
          "description": "Pushes a copy of the old \`s[i]\` into the stack.",
          "fift": "s[i] PUSH",
          "fift_examples": [],
          "gas": "18",
          "opcode": "2i",
          "stack": "",
        },
        "mnemonic": "PUSH",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
          },
          "outputs": {
            "registers": [],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "display_hints": [
              {
                "type": "stack",
              },
            ],
            "max_value": 15,
            "min_value": 0,
            "name": "i",
            "size": 4,
            "type": "uint",
          },
          "type": "numeric",
          "value": 0,
        },
      ],
    },
  },
  {
    "hash": "b61041a58a7980b946e8fb9e198e3c904d24799ffa36574ea4251c41a566f581",
    "length": 32,
    "offset": 40,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "name": "x",
              "type": "pushint_long",
            },
          ],
          "operands_range_check": {
            "from": 0,
            "length": 5,
            "to": 30,
          },
          "prefix": "82",
          "tlb": "#82 l:(## 5) xxx:(int (8 * l + 19))",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "const_int",
          "description": "Pushes integer \`xxx\`.
_Details:_ 5-bit \`0 <= l <= 30\` determines the length \`n=8l+19\` of signed big-endian integer \`xxx\`.
The total length of this instruction is \`l+4\` bytes or \`n+13=8l+32\` bits.",
          "fift": "[xxx] PUSHINT
[xxx] INT",
          "fift_examples": [],
          "gas": "23",
          "opcode": "82lxxx",
          "stack": "- xxx",
        },
        "mnemonic": "PUSHINT_LONG",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [],
          },
          "outputs": {
            "registers": [],
            "stack": [
              {
                "name": "x",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
            ],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "name": "x",
            "type": "pushint_long",
          },
          "type": "bigint",
          "value": 85143n,
        },
      ],
    },
  },
  {
    "hash": "b61041a58a7980b946e8fb9e198e3c904d24799ffa36574ea4251c41a566f581",
    "length": 8,
    "offset": 72,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [],
          "prefix": "BA",
          "tlb": "#BA",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "compare_int",
          "description": "Returns \`-1\` if \`x=y\`, \`0\` otherwise.",
          "fift": "EQUAL",
          "fift_examples": [],
          "gas": "18",
          "opcode": "BA",
          "stack": "x y - x=y",
        },
        "mnemonic": "EQUAL",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "x",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
              {
                "name": "y",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [
              {
                "name": "result",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
            ],
          },
        },
      },
      "operands": [],
    },
  },
  {
    "hash": "b61041a58a7980b946e8fb9e198e3c904d24799ffa36574ea4251c41a566f581",
    "length": 64,
    "offset": 80,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "bits_length_var_size": 4,
              "bits_padding": 0,
              "completion_tag": false,
              "display_hints": [
                {
                  "type": "continuation",
                },
              ],
              "max_bits": 120,
              "max_refs": 0,
              "min_bits": 0,
              "min_refs": 0,
              "name": "s",
              "type": "subslice",
            },
          ],
          "prefix": "9",
          "tlb": "#9 x:(## 4) ssss:((8 * x) * Bit)",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "const_data",
          "description": "Pushes a continuation made from \`builder\`.
_Details:_ Pushes an \`x\`-byte continuation for \`0 <= x <= 15\`.",
          "fift": "[builder] PUSHCONT
[builder] CONT",
          "fift_examples": [
            {
              "description": "Pushes a continuation with code \`code\`. Note that the assembler can replace \`PUSHCONT\` with \`PUSHREFCONT\` in certain situations (e.g. if there's not enough space in the current continuation).",
              "fift": "<{ code }> PUSHCONT <{ code }> CONT CONT:<{ code }>",
            },
          ],
          "gas": "18",
          "opcode": "9xccc",
          "stack": "- c",
        },
        "mnemonic": "PUSHCONT_SHORT",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [],
          },
          "outputs": {
            "registers": [],
            "stack": [
              {
                "name": "c",
                "type": "simple",
                "value_types": [
                  "Continuation",
                ],
              },
            ],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "bits_length_var_size": 4,
            "bits_padding": 0,
            "completion_tag": false,
            "display_hints": [
              {
                "type": "continuation",
              },
            ],
            "max_bits": 120,
            "max_refs": 0,
            "min_bits": 0,
            "min_refs": 0,
            "name": "s",
            "type": "subslice",
          },
          "limitBits": 56,
          "limitRefs": 0,
          "offsetBits": 88,
          "offsetRefs": 0,
          "source": Cell {
            "_depths": [
              0,
              0,
              0,
              0,
            ],
            "_hashes": [
              {
                "data": [
                  182,
                  16,
                  65,
                  165,
                  138,
                  121,
                  128,
                  185,
                  70,
                  232,
                  251,
                  158,
                  25,
                  142,
                  60,
                  144,
                  77,
                  36,
                  121,
                  159,
                  250,
                  54,
                  87,
                  78,
                  164,
                  37,
                  28,
                  65,
                  165,
                  102,
                  245,
                  129,
                ],
                "type": "Buffer",
              },
              {
                "data": [
                  182,
                  16,
                  65,
                  165,
                  138,
                  121,
                  128,
                  185,
                  70,
                  232,
                  251,
                  158,
                  25,
                  142,
                  60,
                  144,
                  77,
                  36,
                  121,
                  159,
                  250,
                  54,
                  87,
                  78,
                  164,
                  37,
                  28,
                  65,
                  165,
                  102,
                  245,
                  129,
                ],
                "type": "Buffer",
              },
              {
                "data": [
                  182,
                  16,
                  65,
                  165,
                  138,
                  121,
                  128,
                  185,
                  70,
                  232,
                  251,
                  158,
                  25,
                  142,
                  60,
                  144,
                  77,
                  36,
                  121,
                  159,
                  250,
                  54,
                  87,
                  78,
                  164,
                  37,
                  28,
                  65,
                  165,
                  102,
                  245,
                  129,
                ],
                "type": "Buffer",
              },
              {
                "data": [
                  182,
                  16,
                  65,
                  165,
                  138,
                  121,
                  128,
                  185,
                  70,
                  232,
                  251,
                  158,
                  25,
                  142,
                  60,
                  144,
                  77,
                  36,
                  121,
                  159,
                  250,
                  54,
                  87,
                  78,
                  164,
                  37,
                  28,
                  65,
                  165,
                  102,
                  245,
                  129,
                ],
                "type": "Buffer",
              },
            ],
            "beginParse": [Function],
            "bits": BitString {
              "_data": {
                "data": [
                  0,
                  192,
                  255,
                  0,
                  32,
                  221,
                  32,
                  130,
                  1,
                  76,
                  151,
                  186,
                  151,
                  48,
                  237,
                  68,
                  208,
                  215,
                  11,
                  31,
                  224,
                  164,
                  242,
                  96,
                  131,
                  8,
                  215,
                  24,
                  32,
                  211,
                  31,
                  211,
                  31,
                  211,
                  31,
                  248,
                  35,
                  19,
                  187,
                  242,
                  99,
                  237,
                  68,
                  208,
                  211,
                  31,
                  211,
                  31,
                  211,
                  255,
                  209,
                  81,
                  50,
                  186,
                  242,
                  161,
                  81,
                  68,
                  186,
                  242,
                  162,
                  4,
                  249,
                  1,
                  84,
                  16,
                  85,
                  249,
                  16,
                  242,
                  163,
                  248,
                  0,
                  147,
                  32,
                  215,
                  74,
                  150,
                  211,
                  7,
                  212,
                  2,
                  251,
                  0,
                  232,
                  209,
                  1,
                  164,
                  200,
                  203,
                  31,
                  203,
                  31,
                  203,
                  255,
                  201,
                  237,
                  84,
                ],
                "type": "Buffer",
              },
              "_length": 768,
              "_offset": 16,
              Symbol(nodejs.util.inspect.custom): [Function],
            },
            "depth": [Function],
            "equals": [Function],
            "hash": [Function],
            "level": [Function],
            "mask": LevelMask {
              "_hashCount": 1,
              "_hashIndex": 0,
              "_mask": 0,
            },
            "refs": [],
            "type": -1,
            Symbol(nodejs.util.inspect.custom): [Function],
          },
          "type": "subslice",
          "value": Cell {
            "_depths": [
              0,
              0,
              0,
              0,
            ],
            "_hashes": [
              {
                "data": [
                  146,
                  248,
                  50,
                  13,
                  116,
                  175,
                  128,
                  184,
                  139,
                  28,
                  143,
                  253,
                  28,
                  131,
                  113,
                  132,
                  54,
                  195,
                  69,
                  224,
                  22,
                  141,
                  255,
                  225,
                  160,
                  13,
                  49,
                  130,
                  97,
                  193,
                  233,
                  54,
                ],
                "type": "Buffer",
              },
              {
                "data": [
                  146,
                  248,
                  50,
                  13,
                  116,
                  175,
                  128,
                  184,
                  139,
                  28,
                  143,
                  253,
                  28,
                  131,
                  113,
                  132,
                  54,
                  195,
                  69,
                  224,
                  22,
                  141,
                  255,
                  225,
                  160,
                  13,
                  49,
                  130,
                  97,
                  193,
                  233,
                  54,
                ],
                "type": "Buffer",
              },
              {
                "data": [
                  146,
                  248,
                  50,
                  13,
                  116,
                  175,
                  128,
                  184,
                  139,
                  28,
                  143,
                  253,
                  28,
                  131,
                  113,
                  132,
                  54,
                  195,
                  69,
                  224,
                  22,
                  141,
                  255,
                  225,
                  160,
                  13,
                  49,
                  130,
                  97,
                  193,
                  233,
                  54,
                ],
                "type": "Buffer",
              },
              {
                "data": [
                  146,
                  248,
                  50,
                  13,
                  116,
                  175,
                  128,
                  184,
                  139,
                  28,
                  143,
                  253,
                  28,
                  131,
                  113,
                  132,
                  54,
                  195,
                  69,
                  224,
                  22,
                  141,
                  255,
                  225,
                  160,
                  13,
                  49,
                  130,
                  97,
                  193,
                  233,
                  54,
                ],
                "type": "Buffer",
              },
            ],
            "beginParse": [Function],
            "bits": BitString {
              "_data": {
                "data": [
                  48,
                  237,
                  68,
                  208,
                  215,
                  11,
                  31,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                ],
                "type": "Buffer",
              },
              "_length": 56,
              "_offset": 0,
              Symbol(nodejs.util.inspect.custom): [Function],
            },
            "depth": [Function],
            "equals": [Function],
            "hash": [Function],
            "level": [Function],
            "mask": LevelMask {
              "_hashCount": 1,
              "_hashIndex": 0,
              "_mask": 0,
            },
            "refs": [],
            "type": -1,
            Symbol(nodejs.util.inspect.custom): [Function],
          },
        },
      ],
    },
  },
  {
    "hash": "b61041a58a7980b946e8fb9e198e3c904d24799ffa36574ea4251c41a566f581",
    "length": 8,
    "offset": 144,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [],
          "prefix": "E0",
          "tlb": "#E0",
        },
        "control_flow": {
          "branches": [
            {
              "type": "variable",
              "var_name": "c",
            },
          ],
          "nobranch": true,
        },
        "doc": {
          "category": "cont_conditional",
          "description": "Jumps to \`c\` (similarly to \`JMPX\`), but only if \`f\` is non-zero.",
          "fift": "IFJMP",
          "fift_examples": [
            {
              "description": "Equivalent to \`<{ code }> CONT\` \`IFJMP\`.",
              "fift": "IFJMP:<{ code }>",
            },
          ],
          "gas": "18",
          "opcode": "E0",
          "stack": "f c - ",
        },
        "mnemonic": "IFJMP",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "f",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
              {
                "name": "c",
                "type": "simple",
                "value_types": [
                  "Continuation",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [],
          },
        },
      },
      "operands": [],
    },
  },
  {
    "hash": "b61041a58a7980b946e8fb9e198e3c904d24799ffa36574ea4251c41a566f581",
    "length": 8,
    "offset": 152,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [],
          "prefix": "A4",
          "tlb": "#A4",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "arithm_basic",
          "description": "Equivalent to \`1 ADDCONST\`.",
          "fift": "INC",
          "fift_examples": [],
          "gas": "18",
          "opcode": "A4",
          "stack": "x - x+1",
        },
        "mnemonic": "INC",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "x",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [
              {
                "name": "result",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
            ],
          },
        },
      },
      "operands": [],
    },
  },
  {
    "hash": "b61041a58a7980b946e8fb9e198e3c904d24799ffa36574ea4251c41a566f581",
    "length": 16,
    "offset": 160,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "display_hints": [],
              "max_value": 63,
              "min_value": 0,
              "name": "n",
              "size": 6,
              "type": "uint",
            },
          ],
          "prefix": "F26_",
          "tlb": "#F26_ n:uint6",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "exceptions",
          "description": "Throws exception \`0 <= n <= 63\` with  parameter zero only if integer \`f!=0\`.",
          "fift": "[n] THROWIF",
          "fift_examples": [],
          "gas": "26/76",
          "opcode": "F26_n",
          "stack": "f - ",
        },
        "mnemonic": "THROWIF_SHORT",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "f",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "display_hints": [],
            "max_value": 63,
            "min_value": 0,
            "name": "n",
            "size": 6,
            "type": "uint",
          },
          "type": "numeric",
          "value": 32,
        },
      ],
    },
  },
  {
    "hash": "b61041a58a7980b946e8fb9e198e3c904d24799ffa36574ea4251c41a566f581",
    "length": 16,
    "offset": 176,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "display_hints": [
                {
                  "type": "add",
                  "value": 1,
                },
              ],
              "max_value": 254,
              "min_value": 0,
              "name": "x",
              "size": 8,
              "type": "uint",
            },
          ],
          "operands_range_check": {
            "from": 0,
            "length": 8,
            "to": 254,
          },
          "prefix": "83",
          "tlb": "#83 xx:uint8",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "const_int",
          "description": "(Quietly) pushes \`2^(xx+1)\` for \`0 <= xx <= 255\`.
\`2^256\` is a \`NaN\`.",
          "fift": "[xx+1] PUSHPOW2",
          "fift_examples": [],
          "gas": "26",
          "opcode": "83xx",
          "stack": "- 2^(xx+1)",
        },
        "mnemonic": "PUSHPOW2",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [],
          },
          "outputs": {
            "registers": [],
            "stack": [
              {
                "name": "result",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
            ],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "display_hints": [
              {
                "type": "add",
                "value": 1,
              },
            ],
            "max_value": 254,
            "min_value": 0,
            "name": "x",
            "size": 8,
            "type": "uint",
          },
          "type": "numeric",
          "value": 8,
        },
      ],
    },
  },
  {
    "hash": "b61041a58a7980b946e8fb9e198e3c904d24799ffa36574ea4251c41a566f581",
    "length": 16,
    "offset": 192,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [],
          "prefix": "D718",
          "tlb": "#D718",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "cell_parse",
          "description": "Loads the first \`0 <= l <= 1023\` bits from _Slice_ \`s\` into a separate _Slice_ \`s''\`, returning the remainder of \`s\` as \`s'\`.",
          "fift": "LDSLICEX",
          "fift_examples": [],
          "gas": "26",
          "opcode": "D718",
          "stack": "s l - s'' s'",
        },
        "mnemonic": "LDSLICEX",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "s",
                "type": "simple",
                "value_types": [
                  "Slice",
                ],
              },
              {
                "name": "l",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [
              {
                "name": "s3",
                "type": "simple",
                "value_types": [
                  "Slice",
                ],
              },
              {
                "name": "s2",
                "type": "simple",
                "value_types": [
                  "Slice",
                ],
              },
            ],
          },
        },
      },
      "operands": [],
    },
  },
  {
    "hash": "b61041a58a7980b946e8fb9e198e3c904d24799ffa36574ea4251c41a566f581",
    "length": 8,
    "offset": 208,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "display_hints": [
                {
                  "type": "stack",
                },
              ],
              "max_value": 15,
              "min_value": 0,
              "name": "i",
              "size": 4,
              "type": "uint",
            },
          ],
          "prefix": "2",
          "tlb": "#2 i:uint4",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "stack_basic",
          "description": "Pushes a copy of the old \`s[i]\` into the stack.",
          "fift": "s[i] PUSH",
          "fift_examples": [],
          "gas": "18",
          "opcode": "2i",
          "stack": "",
        },
        "mnemonic": "PUSH",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
          },
          "outputs": {
            "registers": [],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "display_hints": [
              {
                "type": "stack",
              },
            ],
            "max_value": 15,
            "min_value": 0,
            "name": "i",
            "size": 4,
            "type": "uint",
          },
          "type": "numeric",
          "value": 0,
        },
      ],
    },
  },
  {
    "hash": "b61041a58a7980b946e8fb9e198e3c904d24799ffa36574ea4251c41a566f581",
    "length": 16,
    "offset": 216,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "display_hints": [
                {
                  "type": "add",
                  "value": 1,
                },
              ],
              "max_value": 255,
              "min_value": 0,
              "name": "c",
              "size": 8,
              "type": "uint",
            },
          ],
          "prefix": "D3",
          "tlb": "#D3 cc:uint8",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "cell_parse",
          "description": "Loads an unsigned \`cc+1\`-bit integer \`x\` from _Slice_ \`s\`.",
          "fift": "[cc+1] LDU",
          "fift_examples": [],
          "gas": "26",
          "opcode": "D3cc",
          "stack": "s - x s'",
        },
        "mnemonic": "LDU",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "s",
                "type": "simple",
                "value_types": [
                  "Slice",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [
              {
                "name": "x",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
              {
                "name": "s2",
                "type": "simple",
                "value_types": [
                  "Slice",
                ],
              },
            ],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "display_hints": [
              {
                "type": "add",
                "value": 1,
              },
            ],
            "max_value": 255,
            "min_value": 0,
            "name": "c",
            "size": 8,
            "type": "uint",
          },
          "type": "numeric",
          "value": 31,
        },
      ],
    },
  },
  {
    "hash": "b61041a58a7980b946e8fb9e198e3c904d24799ffa36574ea4251c41a566f581",
    "length": 16,
    "offset": 232,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "display_hints": [
                {
                  "type": "add",
                  "value": 1,
                },
              ],
              "max_value": 255,
              "min_value": 0,
              "name": "c",
              "size": 8,
              "type": "uint",
            },
          ],
          "prefix": "D3",
          "tlb": "#D3 cc:uint8",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "cell_parse",
          "description": "Loads an unsigned \`cc+1\`-bit integer \`x\` from _Slice_ \`s\`.",
          "fift": "[cc+1] LDU",
          "fift_examples": [],
          "gas": "26",
          "opcode": "D3cc",
          "stack": "s - x s'",
        },
        "mnemonic": "LDU",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "s",
                "type": "simple",
                "value_types": [
                  "Slice",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [
              {
                "name": "x",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
              {
                "name": "s2",
                "type": "simple",
                "value_types": [
                  "Slice",
                ],
              },
            ],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "display_hints": [
              {
                "type": "add",
                "value": 1,
              },
            ],
            "max_value": 255,
            "min_value": 0,
            "name": "c",
            "size": 8,
            "type": "uint",
          },
          "type": "numeric",
          "value": 31,
        },
      ],
    },
  },
  {
    "hash": "b61041a58a7980b946e8fb9e198e3c904d24799ffa36574ea4251c41a566f581",
    "length": 16,
    "offset": 248,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "display_hints": [
                {
                  "type": "add",
                  "value": 1,
                },
              ],
              "max_value": 255,
              "min_value": 0,
              "name": "c",
              "size": 8,
              "type": "uint",
            },
          ],
          "prefix": "D3",
          "tlb": "#D3 cc:uint8",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "cell_parse",
          "description": "Loads an unsigned \`cc+1\`-bit integer \`x\` from _Slice_ \`s\`.",
          "fift": "[cc+1] LDU",
          "fift_examples": [],
          "gas": "26",
          "opcode": "D3cc",
          "stack": "s - x s'",
        },
        "mnemonic": "LDU",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "s",
                "type": "simple",
                "value_types": [
                  "Slice",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [
              {
                "name": "x",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
              {
                "name": "s2",
                "type": "simple",
                "value_types": [
                  "Slice",
                ],
              },
            ],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "display_hints": [
              {
                "type": "add",
                "value": 1,
              },
            ],
            "max_value": 255,
            "min_value": 0,
            "name": "c",
            "size": 8,
            "type": "uint",
          },
          "type": "numeric",
          "value": 31,
        },
      ],
    },
  },
  {
    "hash": "b61041a58a7980b946e8fb9e198e3c904d24799ffa36574ea4251c41a566f581",
    "length": 16,
    "offset": 264,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "display_hints": [],
              "max_value": 15,
              "min_value": 0,
              "name": "i",
              "size": 4,
              "type": "uint",
            },
          ],
          "prefix": "F82",
          "tlb": "#F82 i:uint4",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "app_config",
          "description": "Returns the \`i\`-th parameter from the _Tuple_ provided at \`c7\` for \`0 <= i <= 15\`. Equivalent to \`c7 PUSHCTR\` \`FIRST\` \`[i] INDEX\`.
If one of these internal operations fails, throws an appropriate type checking or range checking exception.",
          "fift": "[i] GETPARAM",
          "fift_examples": [],
          "gas": "26",
          "opcode": "F82i",
          "stack": " - x",
        },
        "mnemonic": "GETPARAM",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [
              {
                "index": 7,
                "type": "constant",
              },
            ],
            "stack": [],
          },
          "outputs": {
            "registers": [],
            "stack": [
              {
                "name": "x",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
            ],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "display_hints": [],
            "max_value": 15,
            "min_value": 0,
            "name": "i",
            "size": 4,
            "type": "uint",
          },
          "type": "numeric",
          "value": 3,
        },
      ],
    },
  },
  {
    "hash": "b61041a58a7980b946e8fb9e198e3c904d24799ffa36574ea4251c41a566f581",
    "length": 8,
    "offset": 280,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "display_hints": [
                {
                  "type": "stack",
                },
              ],
              "max_value": 15,
              "min_value": 2,
              "name": "i",
              "size": 4,
              "type": "uint",
            },
          ],
          "operands_range_check": {
            "from": 2,
            "length": 4,
            "to": 15,
          },
          "prefix": "1",
          "tlb": "#1 i:(## 4) {2 <= i}",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "stack_basic",
          "description": "Interchanges \`s1\` with \`s[i]\`, \`2 <= i <= 15\`.",
          "fift": "s1 s[i] XCHG",
          "fift_examples": [],
          "gas": "18",
          "opcode": "1i",
          "stack": "",
        },
        "mnemonic": "XCHG_1I",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
          },
          "outputs": {
            "registers": [],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "display_hints": [
              {
                "type": "stack",
              },
            ],
            "max_value": 15,
            "min_value": 2,
            "name": "i",
            "size": 4,
            "type": "uint",
          },
          "type": "numeric",
          "value": 3,
        },
      ],
    },
  },
  {
    "hash": "b61041a58a7980b946e8fb9e198e3c904d24799ffa36574ea4251c41a566f581",
    "length": 8,
    "offset": 288,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [],
          "prefix": "BB",
          "tlb": "#BB",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "compare_int",
          "description": "",
          "fift": "LEQ",
          "fift_examples": [],
          "gas": "18",
          "opcode": "BB",
          "stack": "x y - x<=y",
        },
        "mnemonic": "LEQ",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "x",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
              {
                "name": "y",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [
              {
                "name": "result",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
            ],
          },
        },
      },
      "operands": [],
    },
  },
  {
    "hash": "b61041a58a7980b946e8fb9e198e3c904d24799ffa36574ea4251c41a566f581",
    "length": 16,
    "offset": 296,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "display_hints": [],
              "max_value": 63,
              "min_value": 0,
              "name": "n",
              "size": 6,
              "type": "uint",
            },
          ],
          "prefix": "F26_",
          "tlb": "#F26_ n:uint6",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "exceptions",
          "description": "Throws exception \`0 <= n <= 63\` with  parameter zero only if integer \`f!=0\`.",
          "fift": "[n] THROWIF",
          "fift_examples": [],
          "gas": "26/76",
          "opcode": "F26_n",
          "stack": "f - ",
        },
        "mnemonic": "THROWIF_SHORT",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "f",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "display_hints": [],
            "max_value": 63,
            "min_value": 0,
            "name": "n",
            "size": 6,
            "type": "uint",
          },
          "type": "numeric",
          "value": 35,
        },
      ],
    },
  },
  {
    "hash": "b61041a58a7980b946e8fb9e198e3c904d24799ffa36574ea4251c41a566f581",
    "length": 16,
    "offset": 312,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "display_hints": [
                {
                  "type": "register",
                },
              ],
              "max_value": 15,
              "min_value": 0,
              "name": "i",
              "size": 4,
              "type": "uint",
            },
          ],
          "prefix": "ED4",
          "tlb": "#ED4 i:uint4",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "cont_registers",
          "description": "Pushes the current value of control register \`c(i)\`. If the control register is not supported in the current codepage, or if it does not have a value, an exception is triggered.",
          "fift": "c[i] PUSHCTR
c[i] PUSH",
          "fift_examples": [],
          "gas": "26",
          "opcode": "ED4i",
          "stack": "- x",
        },
        "mnemonic": "PUSHCTR",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [
              {
                "type": "variable",
                "var_name": "i",
              },
            ],
            "stack": [],
          },
          "outputs": {
            "registers": [],
            "stack": [
              {
                "name": "x",
                "type": "simple",
              },
            ],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "display_hints": [
              {
                "type": "register",
              },
            ],
            "max_value": 15,
            "min_value": 0,
            "name": "i",
            "size": 4,
            "type": "uint",
          },
          "type": "numeric",
          "value": 4,
        },
      ],
    },
  },
  {
    "hash": "b61041a58a7980b946e8fb9e198e3c904d24799ffa36574ea4251c41a566f581",
    "length": 8,
    "offset": 328,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [],
          "prefix": "D0",
          "tlb": "#D0",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "cell_parse",
          "description": "Converts a _Cell_ into a _Slice_. Notice that \`c\` must be either an ordinary cell, or an exotic cell which is automatically _loaded_ to yield an ordinary cell \`c'\`, converted into a _Slice_ afterwards.",
          "fift": "CTOS",
          "fift_examples": [],
          "gas": "118/43",
          "opcode": "D0",
          "stack": "c - s",
        },
        "mnemonic": "CTOS",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "c",
                "type": "simple",
                "value_types": [
                  "Cell",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [
              {
                "name": "s",
                "type": "simple",
                "value_types": [
                  "Slice",
                ],
              },
            ],
          },
        },
      },
      "operands": [],
    },
  },
  {
    "hash": "b61041a58a7980b946e8fb9e198e3c904d24799ffa36574ea4251c41a566f581",
    "length": 16,
    "offset": 336,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "display_hints": [
                {
                  "type": "add",
                  "value": 1,
                },
              ],
              "max_value": 255,
              "min_value": 0,
              "name": "c",
              "size": 8,
              "type": "uint",
            },
          ],
          "prefix": "D3",
          "tlb": "#D3 cc:uint8",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "cell_parse",
          "description": "Loads an unsigned \`cc+1\`-bit integer \`x\` from _Slice_ \`s\`.",
          "fift": "[cc+1] LDU",
          "fift_examples": [],
          "gas": "26",
          "opcode": "D3cc",
          "stack": "s - x s'",
        },
        "mnemonic": "LDU",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "s",
                "type": "simple",
                "value_types": [
                  "Slice",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [
              {
                "name": "x",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
              {
                "name": "s2",
                "type": "simple",
                "value_types": [
                  "Slice",
                ],
              },
            ],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "display_hints": [
              {
                "type": "add",
                "value": 1,
              },
            ],
            "max_value": 255,
            "min_value": 0,
            "name": "c",
            "size": 8,
            "type": "uint",
          },
          "type": "numeric",
          "value": 31,
        },
      ],
    },
  },
  {
    "hash": "b61041a58a7980b946e8fb9e198e3c904d24799ffa36574ea4251c41a566f581",
    "length": 16,
    "offset": 352,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "display_hints": [
                {
                  "type": "add",
                  "value": 1,
                },
              ],
              "max_value": 255,
              "min_value": 0,
              "name": "c",
              "size": 8,
              "type": "uint",
            },
          ],
          "prefix": "D3",
          "tlb": "#D3 cc:uint8",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "cell_parse",
          "description": "Loads an unsigned \`cc+1\`-bit integer \`x\` from _Slice_ \`s\`.",
          "fift": "[cc+1] LDU",
          "fift_examples": [],
          "gas": "26",
          "opcode": "D3cc",
          "stack": "s - x s'",
        },
        "mnemonic": "LDU",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "s",
                "type": "simple",
                "value_types": [
                  "Slice",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [
              {
                "name": "x",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
              {
                "name": "s2",
                "type": "simple",
                "value_types": [
                  "Slice",
                ],
              },
            ],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "display_hints": [
              {
                "type": "add",
                "value": 1,
              },
            ],
            "max_value": 255,
            "min_value": 0,
            "name": "c",
            "size": 8,
            "type": "uint",
          },
          "type": "numeric",
          "value": 31,
        },
      ],
    },
  },
  {
    "hash": "b61041a58a7980b946e8fb9e198e3c904d24799ffa36574ea4251c41a566f581",
    "length": 16,
    "offset": 368,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "display_hints": [
                {
                  "type": "add",
                  "value": 1,
                },
              ],
              "max_value": 255,
              "min_value": 0,
              "name": "c",
              "size": 8,
              "type": "uint",
            },
          ],
          "prefix": "D3",
          "tlb": "#D3 cc:uint8",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "cell_parse",
          "description": "Loads an unsigned \`cc+1\`-bit integer \`x\` from _Slice_ \`s\`.",
          "fift": "[cc+1] LDU",
          "fift_examples": [],
          "gas": "26",
          "opcode": "D3cc",
          "stack": "s - x s'",
        },
        "mnemonic": "LDU",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "s",
                "type": "simple",
                "value_types": [
                  "Slice",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [
              {
                "name": "x",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
              {
                "name": "s2",
                "type": "simple",
                "value_types": [
                  "Slice",
                ],
              },
            ],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "display_hints": [
              {
                "type": "add",
                "value": 1,
              },
            ],
            "max_value": 255,
            "min_value": 0,
            "name": "c",
            "size": 8,
            "type": "uint",
          },
          "type": "numeric",
          "value": 255,
        },
      ],
    },
  },
  {
    "hash": "b61041a58a7980b946e8fb9e198e3c904d24799ffa36574ea4251c41a566f581",
    "length": 8,
    "offset": 384,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [],
          "prefix": "D1",
          "tlb": "#D1",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "cell_parse",
          "description": "Removes a _Slice_ \`s\` from the stack, and throws an exception if it is not empty.",
          "fift": "ENDS",
          "fift_examples": [],
          "gas": "18/68",
          "opcode": "D1",
          "stack": "s - ",
        },
        "mnemonic": "ENDS",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "s",
                "type": "simple",
                "value_types": [
                  "Slice",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [],
          },
        },
      },
      "operands": [],
    },
  },
  {
    "hash": "b61041a58a7980b946e8fb9e198e3c904d24799ffa36574ea4251c41a566f581",
    "length": 16,
    "offset": 392,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "display_hints": [
                {
                  "type": "stack",
                },
              ],
              "max_value": 15,
              "min_value": 0,
              "name": "i",
              "size": 4,
              "type": "uint",
            },
            {
              "display_hints": [
                {
                  "type": "stack",
                },
              ],
              "max_value": 15,
              "min_value": 0,
              "name": "j",
              "size": 4,
              "type": "uint",
            },
          ],
          "prefix": "51",
          "tlb": "#51 i:uint4 j:uint4",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "stack_complex",
          "description": "Equivalent to \`s[i] XCHG0\` \`s[j] PUSH\`.",
          "fift": "s[i] s[j] XCPU",
          "fift_examples": [],
          "gas": "26",
          "opcode": "51ij",
          "stack": "",
        },
        "mnemonic": "XCPU",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
          },
          "outputs": {
            "registers": [],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "display_hints": [
              {
                "type": "stack",
              },
            ],
            "max_value": 15,
            "min_value": 0,
            "name": "i",
            "size": 4,
            "type": "uint",
          },
          "type": "numeric",
          "value": 3,
        },
        {
          "definition": {
            "display_hints": [
              {
                "type": "stack",
              },
            ],
            "max_value": 15,
            "min_value": 0,
            "name": "j",
            "size": 4,
            "type": "uint",
          },
          "type": "numeric",
          "value": 2,
        },
      ],
    },
  },
  {
    "hash": "b61041a58a7980b946e8fb9e198e3c904d24799ffa36574ea4251c41a566f581",
    "length": 8,
    "offset": 408,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [],
          "prefix": "BA",
          "tlb": "#BA",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "compare_int",
          "description": "Returns \`-1\` if \`x=y\`, \`0\` otherwise.",
          "fift": "EQUAL",
          "fift_examples": [],
          "gas": "18",
          "opcode": "BA",
          "stack": "x y - x=y",
        },
        "mnemonic": "EQUAL",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "x",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
              {
                "name": "y",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [
              {
                "name": "result",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
            ],
          },
        },
      },
      "operands": [],
    },
  },
  {
    "hash": "b61041a58a7980b946e8fb9e198e3c904d24799ffa36574ea4251c41a566f581",
    "length": 16,
    "offset": 416,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "display_hints": [],
              "max_value": 63,
              "min_value": 0,
              "name": "n",
              "size": 6,
              "type": "uint",
            },
          ],
          "prefix": "F2A_",
          "tlb": "#F2A_ n:uint6",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "exceptions",
          "description": "Throws exception \`0 <= n <= 63\` with parameter zero only if integer \`f=0\`.",
          "fift": "[n] THROWIFNOT",
          "fift_examples": [],
          "gas": "26/76",
          "opcode": "F2A_n",
          "stack": "f - ",
        },
        "mnemonic": "THROWIFNOT_SHORT",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "f",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "display_hints": [],
            "max_value": 63,
            "min_value": 0,
            "name": "n",
            "size": 6,
            "type": "uint",
          },
          "type": "numeric",
          "value": 33,
        },
      ],
    },
  },
  {
    "hash": "b61041a58a7980b946e8fb9e198e3c904d24799ffa36574ea4251c41a566f581",
    "length": 16,
    "offset": 432,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "display_hints": [
                {
                  "type": "stack",
                },
              ],
              "max_value": 15,
              "min_value": 0,
              "name": "i",
              "size": 4,
              "type": "uint",
            },
            {
              "display_hints": [
                {
                  "type": "stack",
                },
              ],
              "max_value": 15,
              "min_value": 0,
              "name": "j",
              "size": 4,
              "type": "uint",
            },
          ],
          "prefix": "51",
          "tlb": "#51 i:uint4 j:uint4",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "stack_complex",
          "description": "Equivalent to \`s[i] XCHG0\` \`s[j] PUSH\`.",
          "fift": "s[i] s[j] XCPU",
          "fift_examples": [],
          "gas": "26",
          "opcode": "51ij",
          "stack": "",
        },
        "mnemonic": "XCPU",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
          },
          "outputs": {
            "registers": [],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "display_hints": [
              {
                "type": "stack",
              },
            ],
            "max_value": 15,
            "min_value": 0,
            "name": "i",
            "size": 4,
            "type": "uint",
          },
          "type": "numeric",
          "value": 4,
        },
        {
          "definition": {
            "display_hints": [
              {
                "type": "stack",
              },
            ],
            "max_value": 15,
            "min_value": 0,
            "name": "j",
            "size": 4,
            "type": "uint",
          },
          "type": "numeric",
          "value": 4,
        },
      ],
    },
  },
  {
    "hash": "b61041a58a7980b946e8fb9e198e3c904d24799ffa36574ea4251c41a566f581",
    "length": 8,
    "offset": 448,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [],
          "prefix": "BA",
          "tlb": "#BA",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "compare_int",
          "description": "Returns \`-1\` if \`x=y\`, \`0\` otherwise.",
          "fift": "EQUAL",
          "fift_examples": [],
          "gas": "18",
          "opcode": "BA",
          "stack": "x y - x=y",
        },
        "mnemonic": "EQUAL",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "x",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
              {
                "name": "y",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [
              {
                "name": "result",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
            ],
          },
        },
      },
      "operands": [],
    },
  },
  {
    "hash": "b61041a58a7980b946e8fb9e198e3c904d24799ffa36574ea4251c41a566f581",
    "length": 16,
    "offset": 456,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "display_hints": [],
              "max_value": 63,
              "min_value": 0,
              "name": "n",
              "size": 6,
              "type": "uint",
            },
          ],
          "prefix": "F2A_",
          "tlb": "#F2A_ n:uint6",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "exceptions",
          "description": "Throws exception \`0 <= n <= 63\` with parameter zero only if integer \`f=0\`.",
          "fift": "[n] THROWIFNOT",
          "fift_examples": [],
          "gas": "26/76",
          "opcode": "F2A_n",
          "stack": "f - ",
        },
        "mnemonic": "THROWIFNOT_SHORT",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "f",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "display_hints": [],
            "max_value": 63,
            "min_value": 0,
            "name": "n",
            "size": 6,
            "type": "uint",
          },
          "type": "numeric",
          "value": 34,
        },
      ],
    },
  },
  {
    "hash": "b61041a58a7980b946e8fb9e198e3c904d24799ffa36574ea4251c41a566f581",
    "length": 8,
    "offset": 472,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "display_hints": [
                {
                  "type": "stack",
                },
              ],
              "max_value": 15,
              "min_value": 1,
              "name": "i",
              "size": 4,
              "type": "uint",
            },
          ],
          "operands_range_check": {
            "from": 1,
            "length": 4,
            "to": 15,
          },
          "prefix": "0",
          "tlb": "#0 i:(## 4) {1 <= i}",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "stack_basic",
          "description": "Interchanges \`s0\` with \`s[i]\`, \`1 <= i <= 15\`.",
          "fift": "s[i] XCHG0",
          "fift_examples": [],
          "gas": "18",
          "opcode": "0i",
          "stack": "",
        },
        "mnemonic": "XCHG_0I",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
          },
          "outputs": {
            "registers": [],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "display_hints": [
              {
                "type": "stack",
              },
            ],
            "max_value": 15,
            "min_value": 1,
            "name": "i",
            "size": 4,
            "type": "uint",
          },
          "type": "numeric",
          "value": 4,
        },
      ],
    },
  },
  {
    "hash": "b61041a58a7980b946e8fb9e198e3c904d24799ffa36574ea4251c41a566f581",
    "length": 16,
    "offset": 480,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [],
          "prefix": "F901",
          "tlb": "#F901",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "app_crypto",
          "description": "Computes the hash of a _Slice_ \`s\` and returns it as a 256-bit unsigned integer \`x\`. The result is the same as if an ordinary cell containing only data and references from \`s\` had been created and its hash computed by \`HASHCU\`.",
          "fift": "HASHSU",
          "fift_examples": [],
          "gas": "526",
          "opcode": "F901",
          "stack": "s - x",
        },
        "mnemonic": "HASHSU",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "s",
                "type": "simple",
                "value_types": [
                  "Slice",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [
              {
                "name": "x",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
            ],
          },
        },
      },
      "operands": [],
    },
  },
  {
    "hash": "b61041a58a7980b946e8fb9e198e3c904d24799ffa36574ea4251c41a566f581",
    "length": 24,
    "offset": 496,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "display_hints": [
                {
                  "type": "stack",
                },
              ],
              "max_value": 15,
              "min_value": 0,
              "name": "i",
              "size": 4,
              "type": "uint",
            },
            {
              "display_hints": [
                {
                  "type": "stack",
                },
              ],
              "max_value": 15,
              "min_value": 0,
              "name": "j",
              "size": 4,
              "type": "uint",
            },
            {
              "display_hints": [
                {
                  "type": "stack",
                },
              ],
              "max_value": 15,
              "min_value": 0,
              "name": "k",
              "size": 4,
              "type": "uint",
            },
          ],
          "prefix": "541",
          "tlb": "#541 i:uint4 j:uint4 k:uint4",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "stack_complex",
          "description": "Equivalent to \`s[i] s[j] XCHG2\` \`s[k] PUSH\`.",
          "fift": "s[i] s[j] s[k] XC2PU",
          "fift_examples": [],
          "gas": "34",
          "opcode": "541ijk",
          "stack": "",
        },
        "mnemonic": "XC2PU",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
          },
          "outputs": {
            "registers": [],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "display_hints": [
              {
                "type": "stack",
              },
            ],
            "max_value": 15,
            "min_value": 0,
            "name": "i",
            "size": 4,
            "type": "uint",
          },
          "type": "numeric",
          "value": 0,
        },
        {
          "definition": {
            "display_hints": [
              {
                "type": "stack",
              },
            ],
            "max_value": 15,
            "min_value": 0,
            "name": "j",
            "size": 4,
            "type": "uint",
          },
          "type": "numeric",
          "value": 5,
        },
        {
          "definition": {
            "display_hints": [
              {
                "type": "stack",
              },
            ],
            "max_value": 15,
            "min_value": 0,
            "name": "k",
            "size": 4,
            "type": "uint",
          },
          "type": "numeric",
          "value": 5,
        },
      ],
    },
  },
  {
    "hash": "b61041a58a7980b946e8fb9e198e3c904d24799ffa36574ea4251c41a566f581",
    "length": 16,
    "offset": 520,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [],
          "prefix": "F910",
          "tlb": "#F910",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "app_crypto",
          "description": "Checks the Ed25519-signature \`s\` of a hash \`h\` (a 256-bit unsigned integer, usually computed as the hash of some data) using public key \`k\` (also represented by a 256-bit unsigned integer).
The signature \`s\` must be a _Slice_ containing at least 512 data bits; only the first 512 bits are used. The result is \`-1\` if the signature is valid, \`0\` otherwise.
Notice that \`CHKSIGNU\` is equivalent to \`ROT\` \`NEWC\` \`256 STU\` \`ENDC\` \`ROTREV\` \`CHKSIGNS\`, i.e., to \`CHKSIGNS\` with the first argument \`d\` set to 256-bit _Slice_ containing \`h\`. Therefore, if \`h\` is computed as the hash of some data, these data are hashed _twice_, the second hashing occurring inside \`CHKSIGNS\`.",
          "fift": "CHKSIGNU",
          "fift_examples": [],
          "gas": "26",
          "opcode": "F910",
          "stack": "h s k - ?",
        },
        "mnemonic": "CHKSIGNU",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "h",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
              {
                "name": "s",
                "type": "simple",
                "value_types": [
                  "Slice",
                ],
              },
              {
                "name": "k",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [
              {
                "name": "result",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
            ],
          },
        },
      },
      "operands": [],
    },
  },
  {
    "hash": "b61041a58a7980b946e8fb9e198e3c904d24799ffa36574ea4251c41a566f581",
    "length": 16,
    "offset": 536,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "display_hints": [],
              "max_value": 63,
              "min_value": 0,
              "name": "n",
              "size": 6,
              "type": "uint",
            },
          ],
          "prefix": "F2A_",
          "tlb": "#F2A_ n:uint6",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "exceptions",
          "description": "Throws exception \`0 <= n <= 63\` with parameter zero only if integer \`f=0\`.",
          "fift": "[n] THROWIFNOT",
          "fift_examples": [],
          "gas": "26/76",
          "opcode": "F2A_n",
          "stack": "f - ",
        },
        "mnemonic": "THROWIFNOT_SHORT",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "f",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "display_hints": [],
            "max_value": 63,
            "min_value": 0,
            "name": "n",
            "size": 6,
            "type": "uint",
          },
          "type": "numeric",
          "value": 35,
        },
      ],
    },
  },
  {
    "hash": "b61041a58a7980b946e8fb9e198e3c904d24799ffa36574ea4251c41a566f581",
    "length": 16,
    "offset": 552,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [],
          "prefix": "F800",
          "tlb": "#F800",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "app_gas",
          "description": "Sets current gas limit \`g_l\` to its maximal allowed value \`g_m\`, and resets the gas credit \`g_c\` to zero, decreasing the value of \`g_r\` by \`g_c\` in the process.
In other words, the current smart contract agrees to buy some gas to finish the current transaction. This action is required to process external messages, which bring no value (hence no gas) with themselves.",
          "fift": "ACCEPT",
          "fift_examples": [],
          "gas": "26",
          "opcode": "F800",
          "stack": "-",
        },
        "mnemonic": "ACCEPT",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [
              {
                "name": "gas",
                "type": "special",
              },
            ],
            "stack": [],
          },
          "outputs": {
            "registers": [
              {
                "name": "gas",
                "type": "special",
              },
            ],
            "stack": [],
          },
        },
      },
      "operands": [],
    },
  },
  {
    "hash": "b61041a58a7980b946e8fb9e198e3c904d24799ffa36574ea4251c41a566f581",
    "length": 32,
    "offset": 568,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "bits_length_var_size": 4,
              "bits_padding": 0,
              "completion_tag": false,
              "display_hints": [
                {
                  "type": "continuation",
                },
              ],
              "max_bits": 120,
              "max_refs": 0,
              "min_bits": 0,
              "min_refs": 0,
              "name": "s",
              "type": "subslice",
            },
          ],
          "prefix": "9",
          "tlb": "#9 x:(## 4) ssss:((8 * x) * Bit)",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "const_data",
          "description": "Pushes a continuation made from \`builder\`.
_Details:_ Pushes an \`x\`-byte continuation for \`0 <= x <= 15\`.",
          "fift": "[builder] PUSHCONT
[builder] CONT",
          "fift_examples": [
            {
              "description": "Pushes a continuation with code \`code\`. Note that the assembler can replace \`PUSHCONT\` with \`PUSHREFCONT\` in certain situations (e.g. if there's not enough space in the current continuation).",
              "fift": "<{ code }> PUSHCONT <{ code }> CONT CONT:<{ code }>",
            },
          ],
          "gas": "18",
          "opcode": "9xccc",
          "stack": "- c",
        },
        "mnemonic": "PUSHCONT_SHORT",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [],
          },
          "outputs": {
            "registers": [],
            "stack": [
              {
                "name": "c",
                "type": "simple",
                "value_types": [
                  "Continuation",
                ],
              },
            ],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "bits_length_var_size": 4,
            "bits_padding": 0,
            "completion_tag": false,
            "display_hints": [
              {
                "type": "continuation",
              },
            ],
            "max_bits": 120,
            "max_refs": 0,
            "min_bits": 0,
            "min_refs": 0,
            "name": "s",
            "type": "subslice",
          },
          "limitBits": 24,
          "limitRefs": 0,
          "offsetBits": 576,
          "offsetRefs": 0,
          "source": Cell {
            "_depths": [
              0,
              0,
              0,
              0,
            ],
            "_hashes": [
              {
                "data": [
                  182,
                  16,
                  65,
                  165,
                  138,
                  121,
                  128,
                  185,
                  70,
                  232,
                  251,
                  158,
                  25,
                  142,
                  60,
                  144,
                  77,
                  36,
                  121,
                  159,
                  250,
                  54,
                  87,
                  78,
                  164,
                  37,
                  28,
                  65,
                  165,
                  102,
                  245,
                  129,
                ],
                "type": "Buffer",
              },
              {
                "data": [
                  182,
                  16,
                  65,
                  165,
                  138,
                  121,
                  128,
                  185,
                  70,
                  232,
                  251,
                  158,
                  25,
                  142,
                  60,
                  144,
                  77,
                  36,
                  121,
                  159,
                  250,
                  54,
                  87,
                  78,
                  164,
                  37,
                  28,
                  65,
                  165,
                  102,
                  245,
                  129,
                ],
                "type": "Buffer",
              },
              {
                "data": [
                  182,
                  16,
                  65,
                  165,
                  138,
                  121,
                  128,
                  185,
                  70,
                  232,
                  251,
                  158,
                  25,
                  142,
                  60,
                  144,
                  77,
                  36,
                  121,
                  159,
                  250,
                  54,
                  87,
                  78,
                  164,
                  37,
                  28,
                  65,
                  165,
                  102,
                  245,
                  129,
                ],
                "type": "Buffer",
              },
              {
                "data": [
                  182,
                  16,
                  65,
                  165,
                  138,
                  121,
                  128,
                  185,
                  70,
                  232,
                  251,
                  158,
                  25,
                  142,
                  60,
                  144,
                  77,
                  36,
                  121,
                  159,
                  250,
                  54,
                  87,
                  78,
                  164,
                  37,
                  28,
                  65,
                  165,
                  102,
                  245,
                  129,
                ],
                "type": "Buffer",
              },
            ],
            "beginParse": [Function],
            "bits": BitString {
              "_data": {
                "data": [
                  0,
                  192,
                  255,
                  0,
                  32,
                  221,
                  32,
                  130,
                  1,
                  76,
                  151,
                  186,
                  151,
                  48,
                  237,
                  68,
                  208,
                  215,
                  11,
                  31,
                  224,
                  164,
                  242,
                  96,
                  131,
                  8,
                  215,
                  24,
                  32,
                  211,
                  31,
                  211,
                  31,
                  211,
                  31,
                  248,
                  35,
                  19,
                  187,
                  242,
                  99,
                  237,
                  68,
                  208,
                  211,
                  31,
                  211,
                  31,
                  211,
                  255,
                  209,
                  81,
                  50,
                  186,
                  242,
                  161,
                  81,
                  68,
                  186,
                  242,
                  162,
                  4,
                  249,
                  1,
                  84,
                  16,
                  85,
                  249,
                  16,
                  242,
                  163,
                  248,
                  0,
                  147,
                  32,
                  215,
                  74,
                  150,
                  211,
                  7,
                  212,
                  2,
                  251,
                  0,
                  232,
                  209,
                  1,
                  164,
                  200,
                  203,
                  31,
                  203,
                  31,
                  203,
                  255,
                  201,
                  237,
                  84,
                ],
                "type": "Buffer",
              },
              "_length": 768,
              "_offset": 16,
              Symbol(nodejs.util.inspect.custom): [Function],
            },
            "depth": [Function],
            "equals": [Function],
            "hash": [Function],
            "level": [Function],
            "mask": LevelMask {
              "_hashCount": 1,
              "_hashIndex": 0,
              "_mask": 0,
            },
            "refs": [],
            "type": -1,
            Symbol(nodejs.util.inspect.custom): [Function],
          },
          "type": "subslice",
          "value": Cell {
            "_depths": [
              0,
              0,
              0,
              0,
            ],
            "_hashes": [
              {
                "data": [
                  98,
                  44,
                  20,
                  148,
                  189,
                  180,
                  138,
                  130,
                  174,
                  44,
                  239,
                  18,
                  138,
                  4,
                  250,
                  32,
                  130,
                  121,
                  233,
                  213,
                  92,
                  74,
                  67,
                  5,
                  144,
                  105,
                  176,
                  117,
                  36,
                  154,
                  62,
                  182,
                ],
                "type": "Buffer",
              },
              {
                "data": [
                  98,
                  44,
                  20,
                  148,
                  189,
                  180,
                  138,
                  130,
                  174,
                  44,
                  239,
                  18,
                  138,
                  4,
                  250,
                  32,
                  130,
                  121,
                  233,
                  213,
                  92,
                  74,
                  67,
                  5,
                  144,
                  105,
                  176,
                  117,
                  36,
                  154,
                  62,
                  182,
                ],
                "type": "Buffer",
              },
              {
                "data": [
                  98,
                  44,
                  20,
                  148,
                  189,
                  180,
                  138,
                  130,
                  174,
                  44,
                  239,
                  18,
                  138,
                  4,
                  250,
                  32,
                  130,
                  121,
                  233,
                  213,
                  92,
                  74,
                  67,
                  5,
                  144,
                  105,
                  176,
                  117,
                  36,
                  154,
                  62,
                  182,
                ],
                "type": "Buffer",
              },
              {
                "data": [
                  98,
                  44,
                  20,
                  148,
                  189,
                  180,
                  138,
                  130,
                  174,
                  44,
                  239,
                  18,
                  138,
                  4,
                  250,
                  32,
                  130,
                  121,
                  233,
                  213,
                  92,
                  74,
                  67,
                  5,
                  144,
                  105,
                  176,
                  117,
                  36,
                  154,
                  62,
                  182,
                ],
                "type": "Buffer",
              },
            ],
            "beginParse": [Function],
            "bits": BitString {
              "_data": {
                "data": [
                  32,
                  215,
                  74,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                ],
                "type": "Buffer",
              },
              "_length": 24,
              "_offset": 0,
              Symbol(nodejs.util.inspect.custom): [Function],
            },
            "depth": [Function],
            "equals": [Function],
            "hash": [Function],
            "level": [Function],
            "mask": LevelMask {
              "_hashCount": 1,
              "_hashIndex": 0,
              "_mask": 0,
            },
            "refs": [],
            "type": -1,
            Symbol(nodejs.util.inspect.custom): [Function],
          },
        },
      ],
    },
  },
  {
    "hash": "b61041a58a7980b946e8fb9e198e3c904d24799ffa36574ea4251c41a566f581",
    "length": 56,
    "offset": 600,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "bits_length_var_size": 4,
              "bits_padding": 0,
              "completion_tag": false,
              "display_hints": [
                {
                  "type": "continuation",
                },
              ],
              "max_bits": 120,
              "max_refs": 0,
              "min_bits": 0,
              "min_refs": 0,
              "name": "s",
              "type": "subslice",
            },
          ],
          "prefix": "9",
          "tlb": "#9 x:(## 4) ssss:((8 * x) * Bit)",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "const_data",
          "description": "Pushes a continuation made from \`builder\`.
_Details:_ Pushes an \`x\`-byte continuation for \`0 <= x <= 15\`.",
          "fift": "[builder] PUSHCONT
[builder] CONT",
          "fift_examples": [
            {
              "description": "Pushes a continuation with code \`code\`. Note that the assembler can replace \`PUSHCONT\` with \`PUSHREFCONT\` in certain situations (e.g. if there's not enough space in the current continuation).",
              "fift": "<{ code }> PUSHCONT <{ code }> CONT CONT:<{ code }>",
            },
          ],
          "gas": "18",
          "opcode": "9xccc",
          "stack": "- c",
        },
        "mnemonic": "PUSHCONT_SHORT",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [],
          },
          "outputs": {
            "registers": [],
            "stack": [
              {
                "name": "c",
                "type": "simple",
                "value_types": [
                  "Continuation",
                ],
              },
            ],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "bits_length_var_size": 4,
            "bits_padding": 0,
            "completion_tag": false,
            "display_hints": [
              {
                "type": "continuation",
              },
            ],
            "max_bits": 120,
            "max_refs": 0,
            "min_bits": 0,
            "min_refs": 0,
            "name": "s",
            "type": "subslice",
          },
          "limitBits": 48,
          "limitRefs": 0,
          "offsetBits": 608,
          "offsetRefs": 0,
          "source": Cell {
            "_depths": [
              0,
              0,
              0,
              0,
            ],
            "_hashes": [
              {
                "data": [
                  182,
                  16,
                  65,
                  165,
                  138,
                  121,
                  128,
                  185,
                  70,
                  232,
                  251,
                  158,
                  25,
                  142,
                  60,
                  144,
                  77,
                  36,
                  121,
                  159,
                  250,
                  54,
                  87,
                  78,
                  164,
                  37,
                  28,
                  65,
                  165,
                  102,
                  245,
                  129,
                ],
                "type": "Buffer",
              },
              {
                "data": [
                  182,
                  16,
                  65,
                  165,
                  138,
                  121,
                  128,
                  185,
                  70,
                  232,
                  251,
                  158,
                  25,
                  142,
                  60,
                  144,
                  77,
                  36,
                  121,
                  159,
                  250,
                  54,
                  87,
                  78,
                  164,
                  37,
                  28,
                  65,
                  165,
                  102,
                  245,
                  129,
                ],
                "type": "Buffer",
              },
              {
                "data": [
                  182,
                  16,
                  65,
                  165,
                  138,
                  121,
                  128,
                  185,
                  70,
                  232,
                  251,
                  158,
                  25,
                  142,
                  60,
                  144,
                  77,
                  36,
                  121,
                  159,
                  250,
                  54,
                  87,
                  78,
                  164,
                  37,
                  28,
                  65,
                  165,
                  102,
                  245,
                  129,
                ],
                "type": "Buffer",
              },
              {
                "data": [
                  182,
                  16,
                  65,
                  165,
                  138,
                  121,
                  128,
                  185,
                  70,
                  232,
                  251,
                  158,
                  25,
                  142,
                  60,
                  144,
                  77,
                  36,
                  121,
                  159,
                  250,
                  54,
                  87,
                  78,
                  164,
                  37,
                  28,
                  65,
                  165,
                  102,
                  245,
                  129,
                ],
                "type": "Buffer",
              },
            ],
            "beginParse": [Function],
            "bits": BitString {
              "_data": {
                "data": [
                  0,
                  192,
                  255,
                  0,
                  32,
                  221,
                  32,
                  130,
                  1,
                  76,
                  151,
                  186,
                  151,
                  48,
                  237,
                  68,
                  208,
                  215,
                  11,
                  31,
                  224,
                  164,
                  242,
                  96,
                  131,
                  8,
                  215,
                  24,
                  32,
                  211,
                  31,
                  211,
                  31,
                  211,
                  31,
                  248,
                  35,
                  19,
                  187,
                  242,
                  99,
                  237,
                  68,
                  208,
                  211,
                  31,
                  211,
                  31,
                  211,
                  255,
                  209,
                  81,
                  50,
                  186,
                  242,
                  161,
                  81,
                  68,
                  186,
                  242,
                  162,
                  4,
                  249,
                  1,
                  84,
                  16,
                  85,
                  249,
                  16,
                  242,
                  163,
                  248,
                  0,
                  147,
                  32,
                  215,
                  74,
                  150,
                  211,
                  7,
                  212,
                  2,
                  251,
                  0,
                  232,
                  209,
                  1,
                  164,
                  200,
                  203,
                  31,
                  203,
                  31,
                  203,
                  255,
                  201,
                  237,
                  84,
                ],
                "type": "Buffer",
              },
              "_length": 768,
              "_offset": 16,
              Symbol(nodejs.util.inspect.custom): [Function],
            },
            "depth": [Function],
            "equals": [Function],
            "hash": [Function],
            "level": [Function],
            "mask": LevelMask {
              "_hashCount": 1,
              "_hashIndex": 0,
              "_mask": 0,
            },
            "refs": [],
            "type": -1,
            Symbol(nodejs.util.inspect.custom): [Function],
          },
          "type": "subslice",
          "value": Cell {
            "_depths": [
              0,
              0,
              0,
              0,
            ],
            "_hashes": [
              {
                "data": [
                  201,
                  205,
                  146,
                  164,
                  137,
                  234,
                  45,
                  255,
                  227,
                  41,
                  235,
                  253,
                  131,
                  99,
                  251,
                  105,
                  11,
                  159,
                  159,
                  102,
                  189,
                  83,
                  186,
                  82,
                  108,
                  134,
                  46,
                  238,
                  227,
                  84,
                  192,
                  24,
                ],
                "type": "Buffer",
              },
              {
                "data": [
                  201,
                  205,
                  146,
                  164,
                  137,
                  234,
                  45,
                  255,
                  227,
                  41,
                  235,
                  253,
                  131,
                  99,
                  251,
                  105,
                  11,
                  159,
                  159,
                  102,
                  189,
                  83,
                  186,
                  82,
                  108,
                  134,
                  46,
                  238,
                  227,
                  84,
                  192,
                  24,
                ],
                "type": "Buffer",
              },
              {
                "data": [
                  201,
                  205,
                  146,
                  164,
                  137,
                  234,
                  45,
                  255,
                  227,
                  41,
                  235,
                  253,
                  131,
                  99,
                  251,
                  105,
                  11,
                  159,
                  159,
                  102,
                  189,
                  83,
                  186,
                  82,
                  108,
                  134,
                  46,
                  238,
                  227,
                  84,
                  192,
                  24,
                ],
                "type": "Buffer",
              },
              {
                "data": [
                  201,
                  205,
                  146,
                  164,
                  137,
                  234,
                  45,
                  255,
                  227,
                  41,
                  235,
                  253,
                  131,
                  99,
                  251,
                  105,
                  11,
                  159,
                  159,
                  102,
                  189,
                  83,
                  186,
                  82,
                  108,
                  134,
                  46,
                  238,
                  227,
                  84,
                  192,
                  24,
                ],
                "type": "Buffer",
              },
            ],
            "beginParse": [Function],
            "bits": BitString {
              "_data": {
                "data": [
                  211,
                  7,
                  212,
                  2,
                  251,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                ],
                "type": "Buffer",
              },
              "_length": 48,
              "_offset": 0,
              Symbol(nodejs.util.inspect.custom): [Function],
            },
            "depth": [Function],
            "equals": [Function],
            "hash": [Function],
            "level": [Function],
            "mask": LevelMask {
              "_hashCount": 1,
              "_hashIndex": 0,
              "_mask": 0,
            },
            "refs": [],
            "type": -1,
            Symbol(nodejs.util.inspect.custom): [Function],
          },
        },
      ],
    },
  },
  {
    "hash": "b61041a58a7980b946e8fb9e198e3c904d24799ffa36574ea4251c41a566f581",
    "length": 8,
    "offset": 656,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [],
          "prefix": "E8",
          "tlb": "#E8",
        },
        "control_flow": {
          "branches": [
            {
              "save": {
                "c0": {
                  "args": {
                    "after": {
                      "save": {
                        "c0": {
                          "index": 0,
                          "type": "register",
                        },
                      },
                      "type": "cc",
                    },
                    "body": {
                      "type": "variable",
                      "var_name": "c",
                    },
                    "cond": {
                      "type": "variable",
                      "var_name": "c2",
                    },
                  },
                  "name": "while",
                  "type": "special",
                },
              },
              "type": "variable",
              "var_name": "c2",
            },
          ],
          "nobranch": false,
        },
        "doc": {
          "category": "cont_loops",
          "description": "Executes \`c'\` and pops an integer \`x\` from the resulting stack. If \`x\` is zero, exists the loop and transfers control to the original \`cc\`. If \`x\` is non-zero, executes \`c\`, and then begins a new iteration.",
          "fift": "WHILE",
          "fift_examples": [
            {
              "description": "Equivalent to \`<{ cond }> CONT\` \`<{ code }> CONT\` \`WHILE\`.",
              "fift": "WHILE:<{ cond }>DO<{ code }>",
            },
          ],
          "gas": "18",
          "opcode": "E8",
          "stack": "c' c - ",
        },
        "mnemonic": "WHILE",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "c2",
                "type": "simple",
                "value_types": [
                  "Continuation",
                ],
              },
              {
                "name": "c",
                "type": "simple",
                "value_types": [
                  "Continuation",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [],
          },
        },
      },
      "operands": [],
    },
  },
  {
    "hash": "b61041a58a7980b946e8fb9e198e3c904d24799ffa36574ea4251c41a566f581",
    "length": 8,
    "offset": 664,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [],
          "prefix": "D1",
          "tlb": "#D1",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "cell_parse",
          "description": "Removes a _Slice_ \`s\` from the stack, and throws an exception if it is not empty.",
          "fift": "ENDS",
          "fift_examples": [],
          "gas": "18/68",
          "opcode": "D1",
          "stack": "s - ",
        },
        "mnemonic": "ENDS",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "s",
                "type": "simple",
                "value_types": [
                  "Slice",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [],
          },
        },
      },
      "operands": [],
    },
  },
  {
    "hash": "b61041a58a7980b946e8fb9e198e3c904d24799ffa36574ea4251c41a566f581",
    "length": 8,
    "offset": 672,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "display_hints": [
                {
                  "type": "stack",
                },
              ],
              "max_value": 15,
              "min_value": 1,
              "name": "i",
              "size": 4,
              "type": "uint",
            },
          ],
          "operands_range_check": {
            "from": 1,
            "length": 4,
            "to": 15,
          },
          "prefix": "0",
          "tlb": "#0 i:(## 4) {1 <= i}",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "stack_basic",
          "description": "Interchanges \`s0\` with \`s[i]\`, \`1 <= i <= 15\`.",
          "fift": "s[i] XCHG0",
          "fift_examples": [],
          "gas": "18",
          "opcode": "0i",
          "stack": "",
        },
        "mnemonic": "XCHG_0I",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
          },
          "outputs": {
            "registers": [],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "display_hints": [
              {
                "type": "stack",
              },
            ],
            "max_value": 15,
            "min_value": 1,
            "name": "i",
            "size": 4,
            "type": "uint",
          },
          "type": "numeric",
          "value": 1,
        },
      ],
    },
  },
  {
    "hash": "b61041a58a7980b946e8fb9e198e3c904d24799ffa36574ea4251c41a566f581",
    "length": 8,
    "offset": 680,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [],
          "prefix": "A4",
          "tlb": "#A4",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "arithm_basic",
          "description": "Equivalent to \`1 ADDCONST\`.",
          "fift": "INC",
          "fift_examples": [],
          "gas": "18",
          "opcode": "A4",
          "stack": "x - x+1",
        },
        "mnemonic": "INC",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "x",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [
              {
                "name": "result",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
            ],
          },
        },
      },
      "operands": [],
    },
  },
  {
    "hash": "b61041a58a7980b946e8fb9e198e3c904d24799ffa36574ea4251c41a566f581",
    "length": 8,
    "offset": 688,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [],
          "prefix": "C8",
          "tlb": "#C8",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "cell_build",
          "description": "Creates a new empty _Builder_.",
          "fift": "NEWC",
          "fift_examples": [],
          "gas": "18",
          "opcode": "C8",
          "stack": "- b",
        },
        "mnemonic": "NEWC",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [],
          },
          "outputs": {
            "registers": [],
            "stack": [
              {
                "name": "b",
                "type": "simple",
                "value_types": [
                  "Builder",
                ],
              },
            ],
          },
        },
      },
      "operands": [],
    },
  },
  {
    "hash": "b61041a58a7980b946e8fb9e198e3c904d24799ffa36574ea4251c41a566f581",
    "length": 16,
    "offset": 696,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "display_hints": [
                {
                  "type": "add",
                  "value": 1,
                },
              ],
              "max_value": 255,
              "min_value": 0,
              "name": "c",
              "size": 8,
              "type": "uint",
            },
          ],
          "prefix": "CB",
          "tlb": "#CB cc:uint8",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "cell_build",
          "description": "Stores an unsigned \`cc+1\`-bit integer \`x\` into _Builder_ \`b\`. In all other respects it is similar to \`STI\`.",
          "fift": "[cc+1] STU",
          "fift_examples": [],
          "gas": "26",
          "opcode": "CBcc",
          "stack": "x b - b'",
        },
        "mnemonic": "STU",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "x",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
              {
                "name": "b",
                "type": "simple",
                "value_types": [
                  "Builder",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [
              {
                "name": "b2",
                "type": "simple",
                "value_types": [
                  "Builder",
                ],
              },
            ],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "display_hints": [
              {
                "type": "add",
                "value": 1,
              },
            ],
            "max_value": 255,
            "min_value": 0,
            "name": "c",
            "size": 8,
            "type": "uint",
          },
          "type": "numeric",
          "value": 31,
        },
      ],
    },
  },
  {
    "hash": "b61041a58a7980b946e8fb9e198e3c904d24799ffa36574ea4251c41a566f581",
    "length": 16,
    "offset": 712,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "display_hints": [
                {
                  "type": "add",
                  "value": 1,
                },
              ],
              "max_value": 255,
              "min_value": 0,
              "name": "c",
              "size": 8,
              "type": "uint",
            },
          ],
          "prefix": "CB",
          "tlb": "#CB cc:uint8",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "cell_build",
          "description": "Stores an unsigned \`cc+1\`-bit integer \`x\` into _Builder_ \`b\`. In all other respects it is similar to \`STI\`.",
          "fift": "[cc+1] STU",
          "fift_examples": [],
          "gas": "26",
          "opcode": "CBcc",
          "stack": "x b - b'",
        },
        "mnemonic": "STU",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "x",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
              {
                "name": "b",
                "type": "simple",
                "value_types": [
                  "Builder",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [
              {
                "name": "b2",
                "type": "simple",
                "value_types": [
                  "Builder",
                ],
              },
            ],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "display_hints": [
              {
                "type": "add",
                "value": 1,
              },
            ],
            "max_value": 255,
            "min_value": 0,
            "name": "c",
            "size": 8,
            "type": "uint",
          },
          "type": "numeric",
          "value": 31,
        },
      ],
    },
  },
  {
    "hash": "b61041a58a7980b946e8fb9e198e3c904d24799ffa36574ea4251c41a566f581",
    "length": 16,
    "offset": 728,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "display_hints": [
                {
                  "type": "add",
                  "value": 1,
                },
              ],
              "max_value": 255,
              "min_value": 0,
              "name": "c",
              "size": 8,
              "type": "uint",
            },
          ],
          "prefix": "CB",
          "tlb": "#CB cc:uint8",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "cell_build",
          "description": "Stores an unsigned \`cc+1\`-bit integer \`x\` into _Builder_ \`b\`. In all other respects it is similar to \`STI\`.",
          "fift": "[cc+1] STU",
          "fift_examples": [],
          "gas": "26",
          "opcode": "CBcc",
          "stack": "x b - b'",
        },
        "mnemonic": "STU",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "x",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
              {
                "name": "b",
                "type": "simple",
                "value_types": [
                  "Builder",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [
              {
                "name": "b2",
                "type": "simple",
                "value_types": [
                  "Builder",
                ],
              },
            ],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "display_hints": [
              {
                "type": "add",
                "value": 1,
              },
            ],
            "max_value": 255,
            "min_value": 0,
            "name": "c",
            "size": 8,
            "type": "uint",
          },
          "type": "numeric",
          "value": 255,
        },
      ],
    },
  },
  {
    "hash": "b61041a58a7980b946e8fb9e198e3c904d24799ffa36574ea4251c41a566f581",
    "length": 8,
    "offset": 744,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [],
          "prefix": "C9",
          "tlb": "#C9",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "cell_build",
          "description": "Converts a _Builder_ into an ordinary _Cell_.",
          "fift": "ENDC",
          "fift_examples": [],
          "gas": "518",
          "opcode": "C9",
          "stack": "b - c",
        },
        "mnemonic": "ENDC",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "b",
                "type": "simple",
                "value_types": [
                  "Builder",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [
              {
                "name": "c",
                "type": "simple",
                "value_types": [
                  "Cell",
                ],
              },
            ],
          },
        },
      },
      "operands": [],
    },
  },
  {
    "hash": "b61041a58a7980b946e8fb9e198e3c904d24799ffa36574ea4251c41a566f581",
    "length": 16,
    "offset": 752,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "display_hints": [
                {
                  "type": "register",
                },
              ],
              "max_value": 15,
              "min_value": 0,
              "name": "i",
              "size": 4,
              "type": "uint",
            },
          ],
          "prefix": "ED5",
          "tlb": "#ED5 i:uint4",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "cont_registers",
          "description": "Pops a value \`x\` from the stack and stores it into control register \`c(i)\`, if supported in the current codepage. Notice that if a control register accepts only values of a specific type, a type-checking exception may occur.",
          "fift": "c[i] POPCTR
c[i] POP",
          "fift_examples": [],
          "gas": "26",
          "opcode": "ED5i",
          "stack": "x - ",
        },
        "mnemonic": "POPCTR",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "x",
                "type": "simple",
              },
            ],
          },
          "outputs": {
            "registers": [
              {
                "type": "variable",
                "var_name": "i",
              },
            ],
            "stack": [],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "display_hints": [
              {
                "type": "register",
              },
            ],
            "max_value": 15,
            "min_value": 0,
            "name": "i",
            "size": 4,
            "type": "uint",
          },
          "type": "numeric",
          "value": 4,
        },
      ],
    },
  },
]
`;

exports[`decompiler should decompile a simple contract 7`] = `
[
  {
    "hash": "84dafa449f98a6987789ba232358072bc0f76dc4524002a5d0918b9a75d2d599",
    "length": 16,
    "offset": 0,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "display_hints": [],
              "max_value": 239,
              "min_value": 0,
              "name": "n",
              "size": 8,
              "type": "uint",
            },
          ],
          "operands_range_check": {
            "from": 0,
            "length": 8,
            "to": 239,
          },
          "prefix": "FF",
          "tlb": "#FF nn:(#<= 239)",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "codepage",
          "description": "Selects TVM codepage \`0 <= nn < 240\`. If the codepage is not supported, throws an invalid opcode exception.",
          "fift": "[nn] SETCP",
          "fift_examples": [],
          "gas": "26",
          "opcode": "FFnn",
          "stack": "-",
        },
        "mnemonic": "SETCP",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [],
          },
          "outputs": {
            "registers": [],
            "stack": [],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "display_hints": [],
            "max_value": 239,
            "min_value": 0,
            "name": "n",
            "size": 8,
            "type": "uint",
          },
          "type": "numeric",
          "value": 0,
        },
      ],
    },
  },
  {
    "hash": "84dafa449f98a6987789ba232358072bc0f76dc4524002a5d0918b9a75d2d599",
    "length": 8,
    "offset": 16,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "display_hints": [
                {
                  "type": "stack",
                },
              ],
              "max_value": 15,
              "min_value": 0,
              "name": "i",
              "size": 4,
              "type": "uint",
            },
          ],
          "prefix": "2",
          "tlb": "#2 i:uint4",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "stack_basic",
          "description": "Pushes a copy of the old \`s[i]\` into the stack.",
          "fift": "s[i] PUSH",
          "fift_examples": [],
          "gas": "18",
          "opcode": "2i",
          "stack": "",
        },
        "mnemonic": "PUSH",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
          },
          "outputs": {
            "registers": [],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "display_hints": [
              {
                "type": "stack",
              },
            ],
            "max_value": 15,
            "min_value": 0,
            "name": "i",
            "size": 4,
            "type": "uint",
          },
          "type": "numeric",
          "value": 0,
        },
      ],
    },
  },
  {
    "hash": "84dafa449f98a6987789ba232358072bc0f76dc4524002a5d0918b9a75d2d599",
    "length": 8,
    "offset": 24,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [],
          "prefix": "DD",
          "tlb": "#DD",
        },
        "control_flow": {
          "branches": [
            {
              "index": 0,
              "type": "register",
            },
          ],
          "nobranch": true,
        },
        "doc": {
          "category": "cont_conditional",
          "description": "Performs a \`RET\`, but only if integer \`f\` is zero.",
          "fift": "IFNOTRET
IF:",
          "fift_examples": [],
          "gas": "18",
          "opcode": "DD",
          "stack": "f - ",
        },
        "mnemonic": "IFNOTRET",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "f",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [],
          },
        },
      },
      "operands": [],
    },
  },
  {
    "hash": "84dafa449f98a6987789ba232358072bc0f76dc4524002a5d0918b9a75d2d599",
    "length": 8,
    "offset": 32,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "display_hints": [
                {
                  "type": "stack",
                },
              ],
              "max_value": 15,
              "min_value": 0,
              "name": "i",
              "size": 4,
              "type": "uint",
            },
          ],
          "prefix": "2",
          "tlb": "#2 i:uint4",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "stack_basic",
          "description": "Pushes a copy of the old \`s[i]\` into the stack.",
          "fift": "s[i] PUSH",
          "fift_examples": [],
          "gas": "18",
          "opcode": "2i",
          "stack": "",
        },
        "mnemonic": "PUSH",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
          },
          "outputs": {
            "registers": [],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "display_hints": [
              {
                "type": "stack",
              },
            ],
            "max_value": 15,
            "min_value": 0,
            "name": "i",
            "size": 4,
            "type": "uint",
          },
          "type": "numeric",
          "value": 0,
        },
      ],
    },
  },
  {
    "hash": "84dafa449f98a6987789ba232358072bc0f76dc4524002a5d0918b9a75d2d599",
    "length": 32,
    "offset": 40,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "name": "x",
              "type": "pushint_long",
            },
          ],
          "operands_range_check": {
            "from": 0,
            "length": 5,
            "to": 30,
          },
          "prefix": "82",
          "tlb": "#82 l:(## 5) xxx:(int (8 * l + 19))",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "const_int",
          "description": "Pushes integer \`xxx\`.
_Details:_ 5-bit \`0 <= l <= 30\` determines the length \`n=8l+19\` of signed big-endian integer \`xxx\`.
The total length of this instruction is \`l+4\` bytes or \`n+13=8l+32\` bits.",
          "fift": "[xxx] PUSHINT
[xxx] INT",
          "fift_examples": [],
          "gas": "23",
          "opcode": "82lxxx",
          "stack": "- xxx",
        },
        "mnemonic": "PUSHINT_LONG",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [],
          },
          "outputs": {
            "registers": [],
            "stack": [
              {
                "name": "x",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
            ],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "name": "x",
            "type": "pushint_long",
          },
          "type": "bigint",
          "value": 85143n,
        },
      ],
    },
  },
  {
    "hash": "84dafa449f98a6987789ba232358072bc0f76dc4524002a5d0918b9a75d2d599",
    "length": 8,
    "offset": 72,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [],
          "prefix": "BA",
          "tlb": "#BA",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "compare_int",
          "description": "Returns \`-1\` if \`x=y\`, \`0\` otherwise.",
          "fift": "EQUAL",
          "fift_examples": [],
          "gas": "18",
          "opcode": "BA",
          "stack": "x y - x=y",
        },
        "mnemonic": "EQUAL",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "x",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
              {
                "name": "y",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [
              {
                "name": "result",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
            ],
          },
        },
      },
      "operands": [],
    },
  },
  {
    "hash": "84dafa449f98a6987789ba232358072bc0f76dc4524002a5d0918b9a75d2d599",
    "length": 8,
    "offset": 80,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "display_hints": [
                {
                  "type": "stack",
                },
              ],
              "max_value": 15,
              "min_value": 0,
              "name": "i",
              "size": 4,
              "type": "uint",
            },
          ],
          "prefix": "2",
          "tlb": "#2 i:uint4",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "stack_basic",
          "description": "Pushes a copy of the old \`s[i]\` into the stack.",
          "fift": "s[i] PUSH",
          "fift_examples": [],
          "gas": "18",
          "opcode": "2i",
          "stack": "",
        },
        "mnemonic": "PUSH",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
          },
          "outputs": {
            "registers": [],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "display_hints": [
              {
                "type": "stack",
              },
            ],
            "max_value": 15,
            "min_value": 0,
            "name": "i",
            "size": 4,
            "type": "uint",
          },
          "type": "numeric",
          "value": 1,
        },
      ],
    },
  },
  {
    "hash": "84dafa449f98a6987789ba232358072bc0f76dc4524002a5d0918b9a75d2d599",
    "length": 32,
    "offset": 88,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "name": "x",
              "type": "pushint_long",
            },
          ],
          "operands_range_check": {
            "from": 0,
            "length": 5,
            "to": 30,
          },
          "prefix": "82",
          "tlb": "#82 l:(## 5) xxx:(int (8 * l + 19))",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "const_int",
          "description": "Pushes integer \`xxx\`.
_Details:_ 5-bit \`0 <= l <= 30\` determines the length \`n=8l+19\` of signed big-endian integer \`xxx\`.
The total length of this instruction is \`l+4\` bytes or \`n+13=8l+32\` bits.",
          "fift": "[xxx] PUSHINT
[xxx] INT",
          "fift_examples": [],
          "gas": "23",
          "opcode": "82lxxx",
          "stack": "- xxx",
        },
        "mnemonic": "PUSHINT_LONG",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [],
          },
          "outputs": {
            "registers": [],
            "stack": [
              {
                "name": "x",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
            ],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "name": "x",
            "type": "pushint_long",
          },
          "type": "bigint",
          "value": 78748n,
        },
      ],
    },
  },
  {
    "hash": "84dafa449f98a6987789ba232358072bc0f76dc4524002a5d0918b9a75d2d599",
    "length": 8,
    "offset": 120,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [],
          "prefix": "BA",
          "tlb": "#BA",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "compare_int",
          "description": "Returns \`-1\` if \`x=y\`, \`0\` otherwise.",
          "fift": "EQUAL",
          "fift_examples": [],
          "gas": "18",
          "opcode": "BA",
          "stack": "x y - x=y",
        },
        "mnemonic": "EQUAL",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "x",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
              {
                "name": "y",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [
              {
                "name": "result",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
            ],
          },
        },
      },
      "operands": [],
    },
  },
  {
    "hash": "84dafa449f98a6987789ba232358072bc0f76dc4524002a5d0918b9a75d2d599",
    "length": 8,
    "offset": 128,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [],
          "prefix": "B1",
          "tlb": "#B1",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "arithm_logical",
          "description": "Bitwise or of two integers.",
          "fift": "OR",
          "fift_examples": [],
          "gas": "18",
          "opcode": "B1",
          "stack": "x y - x|y",
        },
        "mnemonic": "OR",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "x",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
              {
                "name": "y",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [
              {
                "name": "result",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
            ],
          },
        },
      },
      "operands": [],
    },
  },
  {
    "hash": "84dafa449f98a6987789ba232358072bc0f76dc4524002a5d0918b9a75d2d599",
    "length": 128,
    "offset": 136,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "bits_length_var_size": 4,
              "bits_padding": 0,
              "completion_tag": false,
              "display_hints": [
                {
                  "type": "continuation",
                },
              ],
              "max_bits": 120,
              "max_refs": 0,
              "min_bits": 0,
              "min_refs": 0,
              "name": "s",
              "type": "subslice",
            },
          ],
          "prefix": "9",
          "tlb": "#9 x:(## 4) ssss:((8 * x) * Bit)",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "const_data",
          "description": "Pushes a continuation made from \`builder\`.
_Details:_ Pushes an \`x\`-byte continuation for \`0 <= x <= 15\`.",
          "fift": "[builder] PUSHCONT
[builder] CONT",
          "fift_examples": [
            {
              "description": "Pushes a continuation with code \`code\`. Note that the assembler can replace \`PUSHCONT\` with \`PUSHREFCONT\` in certain situations (e.g. if there's not enough space in the current continuation).",
              "fift": "<{ code }> PUSHCONT <{ code }> CONT CONT:<{ code }>",
            },
          ],
          "gas": "18",
          "opcode": "9xccc",
          "stack": "- c",
        },
        "mnemonic": "PUSHCONT_SHORT",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [],
          },
          "outputs": {
            "registers": [],
            "stack": [
              {
                "name": "c",
                "type": "simple",
                "value_types": [
                  "Continuation",
                ],
              },
            ],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "bits_length_var_size": 4,
            "bits_padding": 0,
            "completion_tag": false,
            "display_hints": [
              {
                "type": "continuation",
              },
            ],
            "max_bits": 120,
            "max_refs": 0,
            "min_bits": 0,
            "min_refs": 0,
            "name": "s",
            "type": "subslice",
          },
          "limitBits": 120,
          "limitRefs": 0,
          "offsetBits": 144,
          "offsetRefs": 0,
          "source": Cell {
            "_depths": [
              0,
              0,
              0,
              0,
            ],
            "_hashes": [
              {
                "data": [
                  132,
                  218,
                  250,
                  68,
                  159,
                  152,
                  166,
                  152,
                  119,
                  137,
                  186,
                  35,
                  35,
                  88,
                  7,
                  43,
                  192,
                  247,
                  109,
                  196,
                  82,
                  64,
                  2,
                  165,
                  208,
                  145,
                  139,
                  154,
                  117,
                  210,
                  213,
                  153,
                ],
                "type": "Buffer",
              },
              {
                "data": [
                  132,
                  218,
                  250,
                  68,
                  159,
                  152,
                  166,
                  152,
                  119,
                  137,
                  186,
                  35,
                  35,
                  88,
                  7,
                  43,
                  192,
                  247,
                  109,
                  196,
                  82,
                  64,
                  2,
                  165,
                  208,
                  145,
                  139,
                  154,
                  117,
                  210,
                  213,
                  153,
                ],
                "type": "Buffer",
              },
              {
                "data": [
                  132,
                  218,
                  250,
                  68,
                  159,
                  152,
                  166,
                  152,
                  119,
                  137,
                  186,
                  35,
                  35,
                  88,
                  7,
                  43,
                  192,
                  247,
                  109,
                  196,
                  82,
                  64,
                  2,
                  165,
                  208,
                  145,
                  139,
                  154,
                  117,
                  210,
                  213,
                  153,
                ],
                "type": "Buffer",
              },
              {
                "data": [
                  132,
                  218,
                  250,
                  68,
                  159,
                  152,
                  166,
                  152,
                  119,
                  137,
                  186,
                  35,
                  35,
                  88,
                  7,
                  43,
                  192,
                  247,
                  109,
                  196,
                  82,
                  64,
                  2,
                  165,
                  208,
                  145,
                  139,
                  154,
                  117,
                  210,
                  213,
                  153,
                ],
                "type": "Buffer",
              },
            ],
            "beginParse": [Function],
            "bits": BitString {
              "_data": {
                "data": [
                  0,
                  222,
                  255,
                  0,
                  32,
                  221,
                  32,
                  130,
                  1,
                  76,
                  151,
                  186,
                  33,
                  130,
                  1,
                  51,
                  156,
                  186,
                  177,
                  159,
                  113,
                  176,
                  237,
                  68,
                  208,
                  211,
                  31,
                  211,
                  31,
                  49,
                  215,
                  11,
                  255,
                  227,
                  4,
                  224,
                  164,
                  242,
                  96,
                  131,
                  8,
                  215,
                  24,
                  32,
                  211,
                  31,
                  211,
                  31,
                  211,
                  31,
                  248,
                  35,
                  19,
                  187,
                  242,
                  99,
                  237,
                  68,
                  208,
                  211,
                  31,
                  211,
                  31,
                  211,
                  255,
                  209,
                  81,
                  50,
                  186,
                  242,
                  161,
                  81,
                  68,
                  186,
                  242,
                  162,
                  4,
                  249,
                  1,
                  84,
                  16,
                  85,
                  249,
                  16,
                  242,
                  163,
                  248,
                  0,
                  147,
                  32,
                  215,
                  74,
                  150,
                  211,
                  7,
                  212,
                  2,
                  251,
                  0,
                  232,
                  209,
                  1,
                  164,
                  200,
                  203,
                  31,
                  203,
                  31,
                  203,
                  255,
                  201,
                  237,
                  84,
                ],
                "type": "Buffer",
              },
              "_length": 888,
              "_offset": 16,
              Symbol(nodejs.util.inspect.custom): [Function],
            },
            "depth": [Function],
            "equals": [Function],
            "hash": [Function],
            "level": [Function],
            "mask": LevelMask {
              "_hashCount": 1,
              "_hashIndex": 0,
              "_mask": 0,
            },
            "refs": [],
            "type": -1,
            Symbol(nodejs.util.inspect.custom): [Function],
          },
          "type": "subslice",
          "value": Cell {
            "_depths": [
              0,
              0,
              0,
              0,
            ],
            "_hashes": [
              {
                "data": [
                  37,
                  188,
                  141,
                  185,
                  119,
                  143,
                  210,
                  220,
                  159,
                  153,
                  121,
                  184,
                  141,
                  160,
                  161,
                  78,
                  156,
                  46,
                  122,
                  1,
                  119,
                  195,
                  126,
                  134,
                  26,
                  0,
                  178,
                  136,
                  141,
                  88,
                  210,
                  91,
                ],
                "type": "Buffer",
              },
              {
                "data": [
                  37,
                  188,
                  141,
                  185,
                  119,
                  143,
                  210,
                  220,
                  159,
                  153,
                  121,
                  184,
                  141,
                  160,
                  161,
                  78,
                  156,
                  46,
                  122,
                  1,
                  119,
                  195,
                  126,
                  134,
                  26,
                  0,
                  178,
                  136,
                  141,
                  88,
                  210,
                  91,
                ],
                "type": "Buffer",
              },
              {
                "data": [
                  37,
                  188,
                  141,
                  185,
                  119,
                  143,
                  210,
                  220,
                  159,
                  153,
                  121,
                  184,
                  141,
                  160,
                  161,
                  78,
                  156,
                  46,
                  122,
                  1,
                  119,
                  195,
                  126,
                  134,
                  26,
                  0,
                  178,
                  136,
                  141,
                  88,
                  210,
                  91,
                ],
                "type": "Buffer",
              },
              {
                "data": [
                  37,
                  188,
                  141,
                  185,
                  119,
                  143,
                  210,
                  220,
                  159,
                  153,
                  121,
                  184,
                  141,
                  160,
                  161,
                  78,
                  156,
                  46,
                  122,
                  1,
                  119,
                  195,
                  126,
                  134,
                  26,
                  0,
                  178,
                  136,
                  141,
                  88,
                  210,
                  91,
                ],
                "type": "Buffer",
              },
            ],
            "beginParse": [Function],
            "bits": BitString {
              "_data": {
                "data": [
                  113,
                  176,
                  237,
                  68,
                  208,
                  211,
                  31,
                  211,
                  31,
                  49,
                  215,
                  11,
                  255,
                  227,
                  4,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                ],
                "type": "Buffer",
              },
              "_length": 120,
              "_offset": 0,
              Symbol(nodejs.util.inspect.custom): [Function],
            },
            "depth": [Function],
            "equals": [Function],
            "hash": [Function],
            "level": [Function],
            "mask": LevelMask {
              "_hashCount": 1,
              "_hashIndex": 0,
              "_mask": 0,
            },
            "refs": [],
            "type": -1,
            Symbol(nodejs.util.inspect.custom): [Function],
          },
        },
      ],
    },
  },
  {
    "hash": "84dafa449f98a6987789ba232358072bc0f76dc4524002a5d0918b9a75d2d599",
    "length": 8,
    "offset": 264,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [],
          "prefix": "E0",
          "tlb": "#E0",
        },
        "control_flow": {
          "branches": [
            {
              "type": "variable",
              "var_name": "c",
            },
          ],
          "nobranch": true,
        },
        "doc": {
          "category": "cont_conditional",
          "description": "Jumps to \`c\` (similarly to \`JMPX\`), but only if \`f\` is non-zero.",
          "fift": "IFJMP",
          "fift_examples": [
            {
              "description": "Equivalent to \`<{ code }> CONT\` \`IFJMP\`.",
              "fift": "IFJMP:<{ code }>",
            },
          ],
          "gas": "18",
          "opcode": "E0",
          "stack": "f c - ",
        },
        "mnemonic": "IFJMP",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "f",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
              {
                "name": "c",
                "type": "simple",
                "value_types": [
                  "Continuation",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [],
          },
        },
      },
      "operands": [],
    },
  },
  {
    "hash": "84dafa449f98a6987789ba232358072bc0f76dc4524002a5d0918b9a75d2d599",
    "length": 8,
    "offset": 272,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [],
          "prefix": "A4",
          "tlb": "#A4",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "arithm_basic",
          "description": "Equivalent to \`1 ADDCONST\`.",
          "fift": "INC",
          "fift_examples": [],
          "gas": "18",
          "opcode": "A4",
          "stack": "x - x+1",
        },
        "mnemonic": "INC",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "x",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [
              {
                "name": "result",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
            ],
          },
        },
      },
      "operands": [],
    },
  },
  {
    "hash": "84dafa449f98a6987789ba232358072bc0f76dc4524002a5d0918b9a75d2d599",
    "length": 16,
    "offset": 280,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "display_hints": [],
              "max_value": 63,
              "min_value": 0,
              "name": "n",
              "size": 6,
              "type": "uint",
            },
          ],
          "prefix": "F26_",
          "tlb": "#F26_ n:uint6",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "exceptions",
          "description": "Throws exception \`0 <= n <= 63\` with  parameter zero only if integer \`f!=0\`.",
          "fift": "[n] THROWIF",
          "fift_examples": [],
          "gas": "26/76",
          "opcode": "F26_n",
          "stack": "f - ",
        },
        "mnemonic": "THROWIF_SHORT",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "f",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "display_hints": [],
            "max_value": 63,
            "min_value": 0,
            "name": "n",
            "size": 6,
            "type": "uint",
          },
          "type": "numeric",
          "value": 32,
        },
      ],
    },
  },
  {
    "hash": "84dafa449f98a6987789ba232358072bc0f76dc4524002a5d0918b9a75d2d599",
    "length": 16,
    "offset": 296,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "display_hints": [
                {
                  "type": "add",
                  "value": 1,
                },
              ],
              "max_value": 254,
              "min_value": 0,
              "name": "x",
              "size": 8,
              "type": "uint",
            },
          ],
          "operands_range_check": {
            "from": 0,
            "length": 8,
            "to": 254,
          },
          "prefix": "83",
          "tlb": "#83 xx:uint8",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "const_int",
          "description": "(Quietly) pushes \`2^(xx+1)\` for \`0 <= xx <= 255\`.
\`2^256\` is a \`NaN\`.",
          "fift": "[xx+1] PUSHPOW2",
          "fift_examples": [],
          "gas": "26",
          "opcode": "83xx",
          "stack": "- 2^(xx+1)",
        },
        "mnemonic": "PUSHPOW2",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [],
          },
          "outputs": {
            "registers": [],
            "stack": [
              {
                "name": "result",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
            ],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "display_hints": [
              {
                "type": "add",
                "value": 1,
              },
            ],
            "max_value": 254,
            "min_value": 0,
            "name": "x",
            "size": 8,
            "type": "uint",
          },
          "type": "numeric",
          "value": 8,
        },
      ],
    },
  },
  {
    "hash": "84dafa449f98a6987789ba232358072bc0f76dc4524002a5d0918b9a75d2d599",
    "length": 16,
    "offset": 312,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [],
          "prefix": "D718",
          "tlb": "#D718",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "cell_parse",
          "description": "Loads the first \`0 <= l <= 1023\` bits from _Slice_ \`s\` into a separate _Slice_ \`s''\`, returning the remainder of \`s\` as \`s'\`.",
          "fift": "LDSLICEX",
          "fift_examples": [],
          "gas": "26",
          "opcode": "D718",
          "stack": "s l - s'' s'",
        },
        "mnemonic": "LDSLICEX",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "s",
                "type": "simple",
                "value_types": [
                  "Slice",
                ],
              },
              {
                "name": "l",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [
              {
                "name": "s3",
                "type": "simple",
                "value_types": [
                  "Slice",
                ],
              },
              {
                "name": "s2",
                "type": "simple",
                "value_types": [
                  "Slice",
                ],
              },
            ],
          },
        },
      },
      "operands": [],
    },
  },
  {
    "hash": "84dafa449f98a6987789ba232358072bc0f76dc4524002a5d0918b9a75d2d599",
    "length": 8,
    "offset": 328,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "display_hints": [
                {
                  "type": "stack",
                },
              ],
              "max_value": 15,
              "min_value": 0,
              "name": "i",
              "size": 4,
              "type": "uint",
            },
          ],
          "prefix": "2",
          "tlb": "#2 i:uint4",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "stack_basic",
          "description": "Pushes a copy of the old \`s[i]\` into the stack.",
          "fift": "s[i] PUSH",
          "fift_examples": [],
          "gas": "18",
          "opcode": "2i",
          "stack": "",
        },
        "mnemonic": "PUSH",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
          },
          "outputs": {
            "registers": [],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "display_hints": [
              {
                "type": "stack",
              },
            ],
            "max_value": 15,
            "min_value": 0,
            "name": "i",
            "size": 4,
            "type": "uint",
          },
          "type": "numeric",
          "value": 0,
        },
      ],
    },
  },
  {
    "hash": "84dafa449f98a6987789ba232358072bc0f76dc4524002a5d0918b9a75d2d599",
    "length": 16,
    "offset": 336,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "display_hints": [
                {
                  "type": "add",
                  "value": 1,
                },
              ],
              "max_value": 255,
              "min_value": 0,
              "name": "c",
              "size": 8,
              "type": "uint",
            },
          ],
          "prefix": "D3",
          "tlb": "#D3 cc:uint8",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "cell_parse",
          "description": "Loads an unsigned \`cc+1\`-bit integer \`x\` from _Slice_ \`s\`.",
          "fift": "[cc+1] LDU",
          "fift_examples": [],
          "gas": "26",
          "opcode": "D3cc",
          "stack": "s - x s'",
        },
        "mnemonic": "LDU",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "s",
                "type": "simple",
                "value_types": [
                  "Slice",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [
              {
                "name": "x",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
              {
                "name": "s2",
                "type": "simple",
                "value_types": [
                  "Slice",
                ],
              },
            ],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "display_hints": [
              {
                "type": "add",
                "value": 1,
              },
            ],
            "max_value": 255,
            "min_value": 0,
            "name": "c",
            "size": 8,
            "type": "uint",
          },
          "type": "numeric",
          "value": 31,
        },
      ],
    },
  },
  {
    "hash": "84dafa449f98a6987789ba232358072bc0f76dc4524002a5d0918b9a75d2d599",
    "length": 16,
    "offset": 352,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "display_hints": [
                {
                  "type": "add",
                  "value": 1,
                },
              ],
              "max_value": 255,
              "min_value": 0,
              "name": "c",
              "size": 8,
              "type": "uint",
            },
          ],
          "prefix": "D3",
          "tlb": "#D3 cc:uint8",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "cell_parse",
          "description": "Loads an unsigned \`cc+1\`-bit integer \`x\` from _Slice_ \`s\`.",
          "fift": "[cc+1] LDU",
          "fift_examples": [],
          "gas": "26",
          "opcode": "D3cc",
          "stack": "s - x s'",
        },
        "mnemonic": "LDU",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "s",
                "type": "simple",
                "value_types": [
                  "Slice",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [
              {
                "name": "x",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
              {
                "name": "s2",
                "type": "simple",
                "value_types": [
                  "Slice",
                ],
              },
            ],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "display_hints": [
              {
                "type": "add",
                "value": 1,
              },
            ],
            "max_value": 255,
            "min_value": 0,
            "name": "c",
            "size": 8,
            "type": "uint",
          },
          "type": "numeric",
          "value": 31,
        },
      ],
    },
  },
  {
    "hash": "84dafa449f98a6987789ba232358072bc0f76dc4524002a5d0918b9a75d2d599",
    "length": 16,
    "offset": 368,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "display_hints": [
                {
                  "type": "add",
                  "value": 1,
                },
              ],
              "max_value": 255,
              "min_value": 0,
              "name": "c",
              "size": 8,
              "type": "uint",
            },
          ],
          "prefix": "D3",
          "tlb": "#D3 cc:uint8",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "cell_parse",
          "description": "Loads an unsigned \`cc+1\`-bit integer \`x\` from _Slice_ \`s\`.",
          "fift": "[cc+1] LDU",
          "fift_examples": [],
          "gas": "26",
          "opcode": "D3cc",
          "stack": "s - x s'",
        },
        "mnemonic": "LDU",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "s",
                "type": "simple",
                "value_types": [
                  "Slice",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [
              {
                "name": "x",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
              {
                "name": "s2",
                "type": "simple",
                "value_types": [
                  "Slice",
                ],
              },
            ],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "display_hints": [
              {
                "type": "add",
                "value": 1,
              },
            ],
            "max_value": 255,
            "min_value": 0,
            "name": "c",
            "size": 8,
            "type": "uint",
          },
          "type": "numeric",
          "value": 31,
        },
      ],
    },
  },
  {
    "hash": "84dafa449f98a6987789ba232358072bc0f76dc4524002a5d0918b9a75d2d599",
    "length": 16,
    "offset": 384,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "display_hints": [],
              "max_value": 15,
              "min_value": 0,
              "name": "i",
              "size": 4,
              "type": "uint",
            },
          ],
          "prefix": "F82",
          "tlb": "#F82 i:uint4",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "app_config",
          "description": "Returns the \`i\`-th parameter from the _Tuple_ provided at \`c7\` for \`0 <= i <= 15\`. Equivalent to \`c7 PUSHCTR\` \`FIRST\` \`[i] INDEX\`.
If one of these internal operations fails, throws an appropriate type checking or range checking exception.",
          "fift": "[i] GETPARAM",
          "fift_examples": [],
          "gas": "26",
          "opcode": "F82i",
          "stack": " - x",
        },
        "mnemonic": "GETPARAM",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [
              {
                "index": 7,
                "type": "constant",
              },
            ],
            "stack": [],
          },
          "outputs": {
            "registers": [],
            "stack": [
              {
                "name": "x",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
            ],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "display_hints": [],
            "max_value": 15,
            "min_value": 0,
            "name": "i",
            "size": 4,
            "type": "uint",
          },
          "type": "numeric",
          "value": 3,
        },
      ],
    },
  },
  {
    "hash": "84dafa449f98a6987789ba232358072bc0f76dc4524002a5d0918b9a75d2d599",
    "length": 8,
    "offset": 400,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "display_hints": [
                {
                  "type": "stack",
                },
              ],
              "max_value": 15,
              "min_value": 2,
              "name": "i",
              "size": 4,
              "type": "uint",
            },
          ],
          "operands_range_check": {
            "from": 2,
            "length": 4,
            "to": 15,
          },
          "prefix": "1",
          "tlb": "#1 i:(## 4) {2 <= i}",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "stack_basic",
          "description": "Interchanges \`s1\` with \`s[i]\`, \`2 <= i <= 15\`.",
          "fift": "s1 s[i] XCHG",
          "fift_examples": [],
          "gas": "18",
          "opcode": "1i",
          "stack": "",
        },
        "mnemonic": "XCHG_1I",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
          },
          "outputs": {
            "registers": [],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "display_hints": [
              {
                "type": "stack",
              },
            ],
            "max_value": 15,
            "min_value": 2,
            "name": "i",
            "size": 4,
            "type": "uint",
          },
          "type": "numeric",
          "value": 3,
        },
      ],
    },
  },
  {
    "hash": "84dafa449f98a6987789ba232358072bc0f76dc4524002a5d0918b9a75d2d599",
    "length": 8,
    "offset": 408,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [],
          "prefix": "BB",
          "tlb": "#BB",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "compare_int",
          "description": "",
          "fift": "LEQ",
          "fift_examples": [],
          "gas": "18",
          "opcode": "BB",
          "stack": "x y - x<=y",
        },
        "mnemonic": "LEQ",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "x",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
              {
                "name": "y",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [
              {
                "name": "result",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
            ],
          },
        },
      },
      "operands": [],
    },
  },
  {
    "hash": "84dafa449f98a6987789ba232358072bc0f76dc4524002a5d0918b9a75d2d599",
    "length": 16,
    "offset": 416,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "display_hints": [],
              "max_value": 63,
              "min_value": 0,
              "name": "n",
              "size": 6,
              "type": "uint",
            },
          ],
          "prefix": "F26_",
          "tlb": "#F26_ n:uint6",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "exceptions",
          "description": "Throws exception \`0 <= n <= 63\` with  parameter zero only if integer \`f!=0\`.",
          "fift": "[n] THROWIF",
          "fift_examples": [],
          "gas": "26/76",
          "opcode": "F26_n",
          "stack": "f - ",
        },
        "mnemonic": "THROWIF_SHORT",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "f",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "display_hints": [],
            "max_value": 63,
            "min_value": 0,
            "name": "n",
            "size": 6,
            "type": "uint",
          },
          "type": "numeric",
          "value": 35,
        },
      ],
    },
  },
  {
    "hash": "84dafa449f98a6987789ba232358072bc0f76dc4524002a5d0918b9a75d2d599",
    "length": 16,
    "offset": 432,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "display_hints": [
                {
                  "type": "register",
                },
              ],
              "max_value": 15,
              "min_value": 0,
              "name": "i",
              "size": 4,
              "type": "uint",
            },
          ],
          "prefix": "ED4",
          "tlb": "#ED4 i:uint4",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "cont_registers",
          "description": "Pushes the current value of control register \`c(i)\`. If the control register is not supported in the current codepage, or if it does not have a value, an exception is triggered.",
          "fift": "c[i] PUSHCTR
c[i] PUSH",
          "fift_examples": [],
          "gas": "26",
          "opcode": "ED4i",
          "stack": "- x",
        },
        "mnemonic": "PUSHCTR",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [
              {
                "type": "variable",
                "var_name": "i",
              },
            ],
            "stack": [],
          },
          "outputs": {
            "registers": [],
            "stack": [
              {
                "name": "x",
                "type": "simple",
              },
            ],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "display_hints": [
              {
                "type": "register",
              },
            ],
            "max_value": 15,
            "min_value": 0,
            "name": "i",
            "size": 4,
            "type": "uint",
          },
          "type": "numeric",
          "value": 4,
        },
      ],
    },
  },
  {
    "hash": "84dafa449f98a6987789ba232358072bc0f76dc4524002a5d0918b9a75d2d599",
    "length": 8,
    "offset": 448,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [],
          "prefix": "D0",
          "tlb": "#D0",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "cell_parse",
          "description": "Converts a _Cell_ into a _Slice_. Notice that \`c\` must be either an ordinary cell, or an exotic cell which is automatically _loaded_ to yield an ordinary cell \`c'\`, converted into a _Slice_ afterwards.",
          "fift": "CTOS",
          "fift_examples": [],
          "gas": "118/43",
          "opcode": "D0",
          "stack": "c - s",
        },
        "mnemonic": "CTOS",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "c",
                "type": "simple",
                "value_types": [
                  "Cell",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [
              {
                "name": "s",
                "type": "simple",
                "value_types": [
                  "Slice",
                ],
              },
            ],
          },
        },
      },
      "operands": [],
    },
  },
  {
    "hash": "84dafa449f98a6987789ba232358072bc0f76dc4524002a5d0918b9a75d2d599",
    "length": 16,
    "offset": 456,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "display_hints": [
                {
                  "type": "add",
                  "value": 1,
                },
              ],
              "max_value": 255,
              "min_value": 0,
              "name": "c",
              "size": 8,
              "type": "uint",
            },
          ],
          "prefix": "D3",
          "tlb": "#D3 cc:uint8",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "cell_parse",
          "description": "Loads an unsigned \`cc+1\`-bit integer \`x\` from _Slice_ \`s\`.",
          "fift": "[cc+1] LDU",
          "fift_examples": [],
          "gas": "26",
          "opcode": "D3cc",
          "stack": "s - x s'",
        },
        "mnemonic": "LDU",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "s",
                "type": "simple",
                "value_types": [
                  "Slice",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [
              {
                "name": "x",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
              {
                "name": "s2",
                "type": "simple",
                "value_types": [
                  "Slice",
                ],
              },
            ],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "display_hints": [
              {
                "type": "add",
                "value": 1,
              },
            ],
            "max_value": 255,
            "min_value": 0,
            "name": "c",
            "size": 8,
            "type": "uint",
          },
          "type": "numeric",
          "value": 31,
        },
      ],
    },
  },
  {
    "hash": "84dafa449f98a6987789ba232358072bc0f76dc4524002a5d0918b9a75d2d599",
    "length": 16,
    "offset": 472,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "display_hints": [
                {
                  "type": "add",
                  "value": 1,
                },
              ],
              "max_value": 255,
              "min_value": 0,
              "name": "c",
              "size": 8,
              "type": "uint",
            },
          ],
          "prefix": "D3",
          "tlb": "#D3 cc:uint8",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "cell_parse",
          "description": "Loads an unsigned \`cc+1\`-bit integer \`x\` from _Slice_ \`s\`.",
          "fift": "[cc+1] LDU",
          "fift_examples": [],
          "gas": "26",
          "opcode": "D3cc",
          "stack": "s - x s'",
        },
        "mnemonic": "LDU",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "s",
                "type": "simple",
                "value_types": [
                  "Slice",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [
              {
                "name": "x",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
              {
                "name": "s2",
                "type": "simple",
                "value_types": [
                  "Slice",
                ],
              },
            ],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "display_hints": [
              {
                "type": "add",
                "value": 1,
              },
            ],
            "max_value": 255,
            "min_value": 0,
            "name": "c",
            "size": 8,
            "type": "uint",
          },
          "type": "numeric",
          "value": 31,
        },
      ],
    },
  },
  {
    "hash": "84dafa449f98a6987789ba232358072bc0f76dc4524002a5d0918b9a75d2d599",
    "length": 16,
    "offset": 488,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "display_hints": [
                {
                  "type": "add",
                  "value": 1,
                },
              ],
              "max_value": 255,
              "min_value": 0,
              "name": "c",
              "size": 8,
              "type": "uint",
            },
          ],
          "prefix": "D3",
          "tlb": "#D3 cc:uint8",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "cell_parse",
          "description": "Loads an unsigned \`cc+1\`-bit integer \`x\` from _Slice_ \`s\`.",
          "fift": "[cc+1] LDU",
          "fift_examples": [],
          "gas": "26",
          "opcode": "D3cc",
          "stack": "s - x s'",
        },
        "mnemonic": "LDU",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "s",
                "type": "simple",
                "value_types": [
                  "Slice",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [
              {
                "name": "x",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
              {
                "name": "s2",
                "type": "simple",
                "value_types": [
                  "Slice",
                ],
              },
            ],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "display_hints": [
              {
                "type": "add",
                "value": 1,
              },
            ],
            "max_value": 255,
            "min_value": 0,
            "name": "c",
            "size": 8,
            "type": "uint",
          },
          "type": "numeric",
          "value": 255,
        },
      ],
    },
  },
  {
    "hash": "84dafa449f98a6987789ba232358072bc0f76dc4524002a5d0918b9a75d2d599",
    "length": 8,
    "offset": 504,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [],
          "prefix": "D1",
          "tlb": "#D1",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "cell_parse",
          "description": "Removes a _Slice_ \`s\` from the stack, and throws an exception if it is not empty.",
          "fift": "ENDS",
          "fift_examples": [],
          "gas": "18/68",
          "opcode": "D1",
          "stack": "s - ",
        },
        "mnemonic": "ENDS",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "s",
                "type": "simple",
                "value_types": [
                  "Slice",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [],
          },
        },
      },
      "operands": [],
    },
  },
  {
    "hash": "84dafa449f98a6987789ba232358072bc0f76dc4524002a5d0918b9a75d2d599",
    "length": 16,
    "offset": 512,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "display_hints": [
                {
                  "type": "stack",
                },
              ],
              "max_value": 15,
              "min_value": 0,
              "name": "i",
              "size": 4,
              "type": "uint",
            },
            {
              "display_hints": [
                {
                  "type": "stack",
                },
              ],
              "max_value": 15,
              "min_value": 0,
              "name": "j",
              "size": 4,
              "type": "uint",
            },
          ],
          "prefix": "51",
          "tlb": "#51 i:uint4 j:uint4",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "stack_complex",
          "description": "Equivalent to \`s[i] XCHG0\` \`s[j] PUSH\`.",
          "fift": "s[i] s[j] XCPU",
          "fift_examples": [],
          "gas": "26",
          "opcode": "51ij",
          "stack": "",
        },
        "mnemonic": "XCPU",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
          },
          "outputs": {
            "registers": [],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "display_hints": [
              {
                "type": "stack",
              },
            ],
            "max_value": 15,
            "min_value": 0,
            "name": "i",
            "size": 4,
            "type": "uint",
          },
          "type": "numeric",
          "value": 3,
        },
        {
          "definition": {
            "display_hints": [
              {
                "type": "stack",
              },
            ],
            "max_value": 15,
            "min_value": 0,
            "name": "j",
            "size": 4,
            "type": "uint",
          },
          "type": "numeric",
          "value": 2,
        },
      ],
    },
  },
  {
    "hash": "84dafa449f98a6987789ba232358072bc0f76dc4524002a5d0918b9a75d2d599",
    "length": 8,
    "offset": 528,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [],
          "prefix": "BA",
          "tlb": "#BA",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "compare_int",
          "description": "Returns \`-1\` if \`x=y\`, \`0\` otherwise.",
          "fift": "EQUAL",
          "fift_examples": [],
          "gas": "18",
          "opcode": "BA",
          "stack": "x y - x=y",
        },
        "mnemonic": "EQUAL",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "x",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
              {
                "name": "y",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [
              {
                "name": "result",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
            ],
          },
        },
      },
      "operands": [],
    },
  },
  {
    "hash": "84dafa449f98a6987789ba232358072bc0f76dc4524002a5d0918b9a75d2d599",
    "length": 16,
    "offset": 536,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "display_hints": [],
              "max_value": 63,
              "min_value": 0,
              "name": "n",
              "size": 6,
              "type": "uint",
            },
          ],
          "prefix": "F2A_",
          "tlb": "#F2A_ n:uint6",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "exceptions",
          "description": "Throws exception \`0 <= n <= 63\` with parameter zero only if integer \`f=0\`.",
          "fift": "[n] THROWIFNOT",
          "fift_examples": [],
          "gas": "26/76",
          "opcode": "F2A_n",
          "stack": "f - ",
        },
        "mnemonic": "THROWIFNOT_SHORT",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "f",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "display_hints": [],
            "max_value": 63,
            "min_value": 0,
            "name": "n",
            "size": 6,
            "type": "uint",
          },
          "type": "numeric",
          "value": 33,
        },
      ],
    },
  },
  {
    "hash": "84dafa449f98a6987789ba232358072bc0f76dc4524002a5d0918b9a75d2d599",
    "length": 16,
    "offset": 552,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "display_hints": [
                {
                  "type": "stack",
                },
              ],
              "max_value": 15,
              "min_value": 0,
              "name": "i",
              "size": 4,
              "type": "uint",
            },
            {
              "display_hints": [
                {
                  "type": "stack",
                },
              ],
              "max_value": 15,
              "min_value": 0,
              "name": "j",
              "size": 4,
              "type": "uint",
            },
          ],
          "prefix": "51",
          "tlb": "#51 i:uint4 j:uint4",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "stack_complex",
          "description": "Equivalent to \`s[i] XCHG0\` \`s[j] PUSH\`.",
          "fift": "s[i] s[j] XCPU",
          "fift_examples": [],
          "gas": "26",
          "opcode": "51ij",
          "stack": "",
        },
        "mnemonic": "XCPU",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
          },
          "outputs": {
            "registers": [],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "display_hints": [
              {
                "type": "stack",
              },
            ],
            "max_value": 15,
            "min_value": 0,
            "name": "i",
            "size": 4,
            "type": "uint",
          },
          "type": "numeric",
          "value": 4,
        },
        {
          "definition": {
            "display_hints": [
              {
                "type": "stack",
              },
            ],
            "max_value": 15,
            "min_value": 0,
            "name": "j",
            "size": 4,
            "type": "uint",
          },
          "type": "numeric",
          "value": 4,
        },
      ],
    },
  },
  {
    "hash": "84dafa449f98a6987789ba232358072bc0f76dc4524002a5d0918b9a75d2d599",
    "length": 8,
    "offset": 568,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [],
          "prefix": "BA",
          "tlb": "#BA",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "compare_int",
          "description": "Returns \`-1\` if \`x=y\`, \`0\` otherwise.",
          "fift": "EQUAL",
          "fift_examples": [],
          "gas": "18",
          "opcode": "BA",
          "stack": "x y - x=y",
        },
        "mnemonic": "EQUAL",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "x",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
              {
                "name": "y",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [
              {
                "name": "result",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
            ],
          },
        },
      },
      "operands": [],
    },
  },
  {
    "hash": "84dafa449f98a6987789ba232358072bc0f76dc4524002a5d0918b9a75d2d599",
    "length": 16,
    "offset": 576,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "display_hints": [],
              "max_value": 63,
              "min_value": 0,
              "name": "n",
              "size": 6,
              "type": "uint",
            },
          ],
          "prefix": "F2A_",
          "tlb": "#F2A_ n:uint6",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "exceptions",
          "description": "Throws exception \`0 <= n <= 63\` with parameter zero only if integer \`f=0\`.",
          "fift": "[n] THROWIFNOT",
          "fift_examples": [],
          "gas": "26/76",
          "opcode": "F2A_n",
          "stack": "f - ",
        },
        "mnemonic": "THROWIFNOT_SHORT",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "f",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "display_hints": [],
            "max_value": 63,
            "min_value": 0,
            "name": "n",
            "size": 6,
            "type": "uint",
          },
          "type": "numeric",
          "value": 34,
        },
      ],
    },
  },
  {
    "hash": "84dafa449f98a6987789ba232358072bc0f76dc4524002a5d0918b9a75d2d599",
    "length": 8,
    "offset": 592,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "display_hints": [
                {
                  "type": "stack",
                },
              ],
              "max_value": 15,
              "min_value": 1,
              "name": "i",
              "size": 4,
              "type": "uint",
            },
          ],
          "operands_range_check": {
            "from": 1,
            "length": 4,
            "to": 15,
          },
          "prefix": "0",
          "tlb": "#0 i:(## 4) {1 <= i}",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "stack_basic",
          "description": "Interchanges \`s0\` with \`s[i]\`, \`1 <= i <= 15\`.",
          "fift": "s[i] XCHG0",
          "fift_examples": [],
          "gas": "18",
          "opcode": "0i",
          "stack": "",
        },
        "mnemonic": "XCHG_0I",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
          },
          "outputs": {
            "registers": [],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "display_hints": [
              {
                "type": "stack",
              },
            ],
            "max_value": 15,
            "min_value": 1,
            "name": "i",
            "size": 4,
            "type": "uint",
          },
          "type": "numeric",
          "value": 4,
        },
      ],
    },
  },
  {
    "hash": "84dafa449f98a6987789ba232358072bc0f76dc4524002a5d0918b9a75d2d599",
    "length": 16,
    "offset": 600,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [],
          "prefix": "F901",
          "tlb": "#F901",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "app_crypto",
          "description": "Computes the hash of a _Slice_ \`s\` and returns it as a 256-bit unsigned integer \`x\`. The result is the same as if an ordinary cell containing only data and references from \`s\` had been created and its hash computed by \`HASHCU\`.",
          "fift": "HASHSU",
          "fift_examples": [],
          "gas": "526",
          "opcode": "F901",
          "stack": "s - x",
        },
        "mnemonic": "HASHSU",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "s",
                "type": "simple",
                "value_types": [
                  "Slice",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [
              {
                "name": "x",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
            ],
          },
        },
      },
      "operands": [],
    },
  },
  {
    "hash": "84dafa449f98a6987789ba232358072bc0f76dc4524002a5d0918b9a75d2d599",
    "length": 24,
    "offset": 616,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "display_hints": [
                {
                  "type": "stack",
                },
              ],
              "max_value": 15,
              "min_value": 0,
              "name": "i",
              "size": 4,
              "type": "uint",
            },
            {
              "display_hints": [
                {
                  "type": "stack",
                },
              ],
              "max_value": 15,
              "min_value": 0,
              "name": "j",
              "size": 4,
              "type": "uint",
            },
            {
              "display_hints": [
                {
                  "type": "stack",
                },
              ],
              "max_value": 15,
              "min_value": 0,
              "name": "k",
              "size": 4,
              "type": "uint",
            },
          ],
          "prefix": "541",
          "tlb": "#541 i:uint4 j:uint4 k:uint4",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "stack_complex",
          "description": "Equivalent to \`s[i] s[j] XCHG2\` \`s[k] PUSH\`.",
          "fift": "s[i] s[j] s[k] XC2PU",
          "fift_examples": [],
          "gas": "34",
          "opcode": "541ijk",
          "stack": "",
        },
        "mnemonic": "XC2PU",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
          },
          "outputs": {
            "registers": [],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "display_hints": [
              {
                "type": "stack",
              },
            ],
            "max_value": 15,
            "min_value": 0,
            "name": "i",
            "size": 4,
            "type": "uint",
          },
          "type": "numeric",
          "value": 0,
        },
        {
          "definition": {
            "display_hints": [
              {
                "type": "stack",
              },
            ],
            "max_value": 15,
            "min_value": 0,
            "name": "j",
            "size": 4,
            "type": "uint",
          },
          "type": "numeric",
          "value": 5,
        },
        {
          "definition": {
            "display_hints": [
              {
                "type": "stack",
              },
            ],
            "max_value": 15,
            "min_value": 0,
            "name": "k",
            "size": 4,
            "type": "uint",
          },
          "type": "numeric",
          "value": 5,
        },
      ],
    },
  },
  {
    "hash": "84dafa449f98a6987789ba232358072bc0f76dc4524002a5d0918b9a75d2d599",
    "length": 16,
    "offset": 640,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [],
          "prefix": "F910",
          "tlb": "#F910",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "app_crypto",
          "description": "Checks the Ed25519-signature \`s\` of a hash \`h\` (a 256-bit unsigned integer, usually computed as the hash of some data) using public key \`k\` (also represented by a 256-bit unsigned integer).
The signature \`s\` must be a _Slice_ containing at least 512 data bits; only the first 512 bits are used. The result is \`-1\` if the signature is valid, \`0\` otherwise.
Notice that \`CHKSIGNU\` is equivalent to \`ROT\` \`NEWC\` \`256 STU\` \`ENDC\` \`ROTREV\` \`CHKSIGNS\`, i.e., to \`CHKSIGNS\` with the first argument \`d\` set to 256-bit _Slice_ containing \`h\`. Therefore, if \`h\` is computed as the hash of some data, these data are hashed _twice_, the second hashing occurring inside \`CHKSIGNS\`.",
          "fift": "CHKSIGNU",
          "fift_examples": [],
          "gas": "26",
          "opcode": "F910",
          "stack": "h s k - ?",
        },
        "mnemonic": "CHKSIGNU",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "h",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
              {
                "name": "s",
                "type": "simple",
                "value_types": [
                  "Slice",
                ],
              },
              {
                "name": "k",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [
              {
                "name": "result",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
            ],
          },
        },
      },
      "operands": [],
    },
  },
  {
    "hash": "84dafa449f98a6987789ba232358072bc0f76dc4524002a5d0918b9a75d2d599",
    "length": 16,
    "offset": 656,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "display_hints": [],
              "max_value": 63,
              "min_value": 0,
              "name": "n",
              "size": 6,
              "type": "uint",
            },
          ],
          "prefix": "F2A_",
          "tlb": "#F2A_ n:uint6",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "exceptions",
          "description": "Throws exception \`0 <= n <= 63\` with parameter zero only if integer \`f=0\`.",
          "fift": "[n] THROWIFNOT",
          "fift_examples": [],
          "gas": "26/76",
          "opcode": "F2A_n",
          "stack": "f - ",
        },
        "mnemonic": "THROWIFNOT_SHORT",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "f",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "display_hints": [],
            "max_value": 63,
            "min_value": 0,
            "name": "n",
            "size": 6,
            "type": "uint",
          },
          "type": "numeric",
          "value": 35,
        },
      ],
    },
  },
  {
    "hash": "84dafa449f98a6987789ba232358072bc0f76dc4524002a5d0918b9a75d2d599",
    "length": 16,
    "offset": 672,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [],
          "prefix": "F800",
          "tlb": "#F800",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "app_gas",
          "description": "Sets current gas limit \`g_l\` to its maximal allowed value \`g_m\`, and resets the gas credit \`g_c\` to zero, decreasing the value of \`g_r\` by \`g_c\` in the process.
In other words, the current smart contract agrees to buy some gas to finish the current transaction. This action is required to process external messages, which bring no value (hence no gas) with themselves.",
          "fift": "ACCEPT",
          "fift_examples": [],
          "gas": "26",
          "opcode": "F800",
          "stack": "-",
        },
        "mnemonic": "ACCEPT",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [
              {
                "name": "gas",
                "type": "special",
              },
            ],
            "stack": [],
          },
          "outputs": {
            "registers": [
              {
                "name": "gas",
                "type": "special",
              },
            ],
            "stack": [],
          },
        },
      },
      "operands": [],
    },
  },
  {
    "hash": "84dafa449f98a6987789ba232358072bc0f76dc4524002a5d0918b9a75d2d599",
    "length": 32,
    "offset": 688,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "bits_length_var_size": 4,
              "bits_padding": 0,
              "completion_tag": false,
              "display_hints": [
                {
                  "type": "continuation",
                },
              ],
              "max_bits": 120,
              "max_refs": 0,
              "min_bits": 0,
              "min_refs": 0,
              "name": "s",
              "type": "subslice",
            },
          ],
          "prefix": "9",
          "tlb": "#9 x:(## 4) ssss:((8 * x) * Bit)",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "const_data",
          "description": "Pushes a continuation made from \`builder\`.
_Details:_ Pushes an \`x\`-byte continuation for \`0 <= x <= 15\`.",
          "fift": "[builder] PUSHCONT
[builder] CONT",
          "fift_examples": [
            {
              "description": "Pushes a continuation with code \`code\`. Note that the assembler can replace \`PUSHCONT\` with \`PUSHREFCONT\` in certain situations (e.g. if there's not enough space in the current continuation).",
              "fift": "<{ code }> PUSHCONT <{ code }> CONT CONT:<{ code }>",
            },
          ],
          "gas": "18",
          "opcode": "9xccc",
          "stack": "- c",
        },
        "mnemonic": "PUSHCONT_SHORT",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [],
          },
          "outputs": {
            "registers": [],
            "stack": [
              {
                "name": "c",
                "type": "simple",
                "value_types": [
                  "Continuation",
                ],
              },
            ],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "bits_length_var_size": 4,
            "bits_padding": 0,
            "completion_tag": false,
            "display_hints": [
              {
                "type": "continuation",
              },
            ],
            "max_bits": 120,
            "max_refs": 0,
            "min_bits": 0,
            "min_refs": 0,
            "name": "s",
            "type": "subslice",
          },
          "limitBits": 24,
          "limitRefs": 0,
          "offsetBits": 696,
          "offsetRefs": 0,
          "source": Cell {
            "_depths": [
              0,
              0,
              0,
              0,
            ],
            "_hashes": [
              {
                "data": [
                  132,
                  218,
                  250,
                  68,
                  159,
                  152,
                  166,
                  152,
                  119,
                  137,
                  186,
                  35,
                  35,
                  88,
                  7,
                  43,
                  192,
                  247,
                  109,
                  196,
                  82,
                  64,
                  2,
                  165,
                  208,
                  145,
                  139,
                  154,
                  117,
                  210,
                  213,
                  153,
                ],
                "type": "Buffer",
              },
              {
                "data": [
                  132,
                  218,
                  250,
                  68,
                  159,
                  152,
                  166,
                  152,
                  119,
                  137,
                  186,
                  35,
                  35,
                  88,
                  7,
                  43,
                  192,
                  247,
                  109,
                  196,
                  82,
                  64,
                  2,
                  165,
                  208,
                  145,
                  139,
                  154,
                  117,
                  210,
                  213,
                  153,
                ],
                "type": "Buffer",
              },
              {
                "data": [
                  132,
                  218,
                  250,
                  68,
                  159,
                  152,
                  166,
                  152,
                  119,
                  137,
                  186,
                  35,
                  35,
                  88,
                  7,
                  43,
                  192,
                  247,
                  109,
                  196,
                  82,
                  64,
                  2,
                  165,
                  208,
                  145,
                  139,
                  154,
                  117,
                  210,
                  213,
                  153,
                ],
                "type": "Buffer",
              },
              {
                "data": [
                  132,
                  218,
                  250,
                  68,
                  159,
                  152,
                  166,
                  152,
                  119,
                  137,
                  186,
                  35,
                  35,
                  88,
                  7,
                  43,
                  192,
                  247,
                  109,
                  196,
                  82,
                  64,
                  2,
                  165,
                  208,
                  145,
                  139,
                  154,
                  117,
                  210,
                  213,
                  153,
                ],
                "type": "Buffer",
              },
            ],
            "beginParse": [Function],
            "bits": BitString {
              "_data": {
                "data": [
                  0,
                  222,
                  255,
                  0,
                  32,
                  221,
                  32,
                  130,
                  1,
                  76,
                  151,
                  186,
                  33,
                  130,
                  1,
                  51,
                  156,
                  186,
                  177,
                  159,
                  113,
                  176,
                  237,
                  68,
                  208,
                  211,
                  31,
                  211,
                  31,
                  49,
                  215,
                  11,
                  255,
                  227,
                  4,
                  224,
                  164,
                  242,
                  96,
                  131,
                  8,
                  215,
                  24,
                  32,
                  211,
                  31,
                  211,
                  31,
                  211,
                  31,
                  248,
                  35,
                  19,
                  187,
                  242,
                  99,
                  237,
                  68,
                  208,
                  211,
                  31,
                  211,
                  31,
                  211,
                  255,
                  209,
                  81,
                  50,
                  186,
                  242,
                  161,
                  81,
                  68,
                  186,
                  242,
                  162,
                  4,
                  249,
                  1,
                  84,
                  16,
                  85,
                  249,
                  16,
                  242,
                  163,
                  248,
                  0,
                  147,
                  32,
                  215,
                  74,
                  150,
                  211,
                  7,
                  212,
                  2,
                  251,
                  0,
                  232,
                  209,
                  1,
                  164,
                  200,
                  203,
                  31,
                  203,
                  31,
                  203,
                  255,
                  201,
                  237,
                  84,
                ],
                "type": "Buffer",
              },
              "_length": 888,
              "_offset": 16,
              Symbol(nodejs.util.inspect.custom): [Function],
            },
            "depth": [Function],
            "equals": [Function],
            "hash": [Function],
            "level": [Function],
            "mask": LevelMask {
              "_hashCount": 1,
              "_hashIndex": 0,
              "_mask": 0,
            },
            "refs": [],
            "type": -1,
            Symbol(nodejs.util.inspect.custom): [Function],
          },
          "type": "subslice",
          "value": Cell {
            "_depths": [
              0,
              0,
              0,
              0,
            ],
            "_hashes": [
              {
                "data": [
                  98,
                  44,
                  20,
                  148,
                  189,
                  180,
                  138,
                  130,
                  174,
                  44,
                  239,
                  18,
                  138,
                  4,
                  250,
                  32,
                  130,
                  121,
                  233,
                  213,
                  92,
                  74,
                  67,
                  5,
                  144,
                  105,
                  176,
                  117,
                  36,
                  154,
                  62,
                  182,
                ],
                "type": "Buffer",
              },
              {
                "data": [
                  98,
                  44,
                  20,
                  148,
                  189,
                  180,
                  138,
                  130,
                  174,
                  44,
                  239,
                  18,
                  138,
                  4,
                  250,
                  32,
                  130,
                  121,
                  233,
                  213,
                  92,
                  74,
                  67,
                  5,
                  144,
                  105,
                  176,
                  117,
                  36,
                  154,
                  62,
                  182,
                ],
                "type": "Buffer",
              },
              {
                "data": [
                  98,
                  44,
                  20,
                  148,
                  189,
                  180,
                  138,
                  130,
                  174,
                  44,
                  239,
                  18,
                  138,
                  4,
                  250,
                  32,
                  130,
                  121,
                  233,
                  213,
                  92,
                  74,
                  67,
                  5,
                  144,
                  105,
                  176,
                  117,
                  36,
                  154,
                  62,
                  182,
                ],
                "type": "Buffer",
              },
              {
                "data": [
                  98,
                  44,
                  20,
                  148,
                  189,
                  180,
                  138,
                  130,
                  174,
                  44,
                  239,
                  18,
                  138,
                  4,
                  250,
                  32,
                  130,
                  121,
                  233,
                  213,
                  92,
                  74,
                  67,
                  5,
                  144,
                  105,
                  176,
                  117,
                  36,
                  154,
                  62,
                  182,
                ],
                "type": "Buffer",
              },
            ],
            "beginParse": [Function],
            "bits": BitString {
              "_data": {
                "data": [
                  32,
                  215,
                  74,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                ],
                "type": "Buffer",
              },
              "_length": 24,
              "_offset": 0,
              Symbol(nodejs.util.inspect.custom): [Function],
            },
            "depth": [Function],
            "equals": [Function],
            "hash": [Function],
            "level": [Function],
            "mask": LevelMask {
              "_hashCount": 1,
              "_hashIndex": 0,
              "_mask": 0,
            },
            "refs": [],
            "type": -1,
            Symbol(nodejs.util.inspect.custom): [Function],
          },
        },
      ],
    },
  },
  {
    "hash": "84dafa449f98a6987789ba232358072bc0f76dc4524002a5d0918b9a75d2d599",
    "length": 56,
    "offset": 720,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "bits_length_var_size": 4,
              "bits_padding": 0,
              "completion_tag": false,
              "display_hints": [
                {
                  "type": "continuation",
                },
              ],
              "max_bits": 120,
              "max_refs": 0,
              "min_bits": 0,
              "min_refs": 0,
              "name": "s",
              "type": "subslice",
            },
          ],
          "prefix": "9",
          "tlb": "#9 x:(## 4) ssss:((8 * x) * Bit)",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "const_data",
          "description": "Pushes a continuation made from \`builder\`.
_Details:_ Pushes an \`x\`-byte continuation for \`0 <= x <= 15\`.",
          "fift": "[builder] PUSHCONT
[builder] CONT",
          "fift_examples": [
            {
              "description": "Pushes a continuation with code \`code\`. Note that the assembler can replace \`PUSHCONT\` with \`PUSHREFCONT\` in certain situations (e.g. if there's not enough space in the current continuation).",
              "fift": "<{ code }> PUSHCONT <{ code }> CONT CONT:<{ code }>",
            },
          ],
          "gas": "18",
          "opcode": "9xccc",
          "stack": "- c",
        },
        "mnemonic": "PUSHCONT_SHORT",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [],
          },
          "outputs": {
            "registers": [],
            "stack": [
              {
                "name": "c",
                "type": "simple",
                "value_types": [
                  "Continuation",
                ],
              },
            ],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "bits_length_var_size": 4,
            "bits_padding": 0,
            "completion_tag": false,
            "display_hints": [
              {
                "type": "continuation",
              },
            ],
            "max_bits": 120,
            "max_refs": 0,
            "min_bits": 0,
            "min_refs": 0,
            "name": "s",
            "type": "subslice",
          },
          "limitBits": 48,
          "limitRefs": 0,
          "offsetBits": 728,
          "offsetRefs": 0,
          "source": Cell {
            "_depths": [
              0,
              0,
              0,
              0,
            ],
            "_hashes": [
              {
                "data": [
                  132,
                  218,
                  250,
                  68,
                  159,
                  152,
                  166,
                  152,
                  119,
                  137,
                  186,
                  35,
                  35,
                  88,
                  7,
                  43,
                  192,
                  247,
                  109,
                  196,
                  82,
                  64,
                  2,
                  165,
                  208,
                  145,
                  139,
                  154,
                  117,
                  210,
                  213,
                  153,
                ],
                "type": "Buffer",
              },
              {
                "data": [
                  132,
                  218,
                  250,
                  68,
                  159,
                  152,
                  166,
                  152,
                  119,
                  137,
                  186,
                  35,
                  35,
                  88,
                  7,
                  43,
                  192,
                  247,
                  109,
                  196,
                  82,
                  64,
                  2,
                  165,
                  208,
                  145,
                  139,
                  154,
                  117,
                  210,
                  213,
                  153,
                ],
                "type": "Buffer",
              },
              {
                "data": [
                  132,
                  218,
                  250,
                  68,
                  159,
                  152,
                  166,
                  152,
                  119,
                  137,
                  186,
                  35,
                  35,
                  88,
                  7,
                  43,
                  192,
                  247,
                  109,
                  196,
                  82,
                  64,
                  2,
                  165,
                  208,
                  145,
                  139,
                  154,
                  117,
                  210,
                  213,
                  153,
                ],
                "type": "Buffer",
              },
              {
                "data": [
                  132,
                  218,
                  250,
                  68,
                  159,
                  152,
                  166,
                  152,
                  119,
                  137,
                  186,
                  35,
                  35,
                  88,
                  7,
                  43,
                  192,
                  247,
                  109,
                  196,
                  82,
                  64,
                  2,
                  165,
                  208,
                  145,
                  139,
                  154,
                  117,
                  210,
                  213,
                  153,
                ],
                "type": "Buffer",
              },
            ],
            "beginParse": [Function],
            "bits": BitString {
              "_data": {
                "data": [
                  0,
                  222,
                  255,
                  0,
                  32,
                  221,
                  32,
                  130,
                  1,
                  76,
                  151,
                  186,
                  33,
                  130,
                  1,
                  51,
                  156,
                  186,
                  177,
                  159,
                  113,
                  176,
                  237,
                  68,
                  208,
                  211,
                  31,
                  211,
                  31,
                  49,
                  215,
                  11,
                  255,
                  227,
                  4,
                  224,
                  164,
                  242,
                  96,
                  131,
                  8,
                  215,
                  24,
                  32,
                  211,
                  31,
                  211,
                  31,
                  211,
                  31,
                  248,
                  35,
                  19,
                  187,
                  242,
                  99,
                  237,
                  68,
                  208,
                  211,
                  31,
                  211,
                  31,
                  211,
                  255,
                  209,
                  81,
                  50,
                  186,
                  242,
                  161,
                  81,
                  68,
                  186,
                  242,
                  162,
                  4,
                  249,
                  1,
                  84,
                  16,
                  85,
                  249,
                  16,
                  242,
                  163,
                  248,
                  0,
                  147,
                  32,
                  215,
                  74,
                  150,
                  211,
                  7,
                  212,
                  2,
                  251,
                  0,
                  232,
                  209,
                  1,
                  164,
                  200,
                  203,
                  31,
                  203,
                  31,
                  203,
                  255,
                  201,
                  237,
                  84,
                ],
                "type": "Buffer",
              },
              "_length": 888,
              "_offset": 16,
              Symbol(nodejs.util.inspect.custom): [Function],
            },
            "depth": [Function],
            "equals": [Function],
            "hash": [Function],
            "level": [Function],
            "mask": LevelMask {
              "_hashCount": 1,
              "_hashIndex": 0,
              "_mask": 0,
            },
            "refs": [],
            "type": -1,
            Symbol(nodejs.util.inspect.custom): [Function],
          },
          "type": "subslice",
          "value": Cell {
            "_depths": [
              0,
              0,
              0,
              0,
            ],
            "_hashes": [
              {
                "data": [
                  201,
                  205,
                  146,
                  164,
                  137,
                  234,
                  45,
                  255,
                  227,
                  41,
                  235,
                  253,
                  131,
                  99,
                  251,
                  105,
                  11,
                  159,
                  159,
                  102,
                  189,
                  83,
                  186,
                  82,
                  108,
                  134,
                  46,
                  238,
                  227,
                  84,
                  192,
                  24,
                ],
                "type": "Buffer",
              },
              {
                "data": [
                  201,
                  205,
                  146,
                  164,
                  137,
                  234,
                  45,
                  255,
                  227,
                  41,
                  235,
                  253,
                  131,
                  99,
                  251,
                  105,
                  11,
                  159,
                  159,
                  102,
                  189,
                  83,
                  186,
                  82,
                  108,
                  134,
                  46,
                  238,
                  227,
                  84,
                  192,
                  24,
                ],
                "type": "Buffer",
              },
              {
                "data": [
                  201,
                  205,
                  146,
                  164,
                  137,
                  234,
                  45,
                  255,
                  227,
                  41,
                  235,
                  253,
                  131,
                  99,
                  251,
                  105,
                  11,
                  159,
                  159,
                  102,
                  189,
                  83,
                  186,
                  82,
                  108,
                  134,
                  46,
                  238,
                  227,
                  84,
                  192,
                  24,
                ],
                "type": "Buffer",
              },
              {
                "data": [
                  201,
                  205,
                  146,
                  164,
                  137,
                  234,
                  45,
                  255,
                  227,
                  41,
                  235,
                  253,
                  131,
                  99,
                  251,
                  105,
                  11,
                  159,
                  159,
                  102,
                  189,
                  83,
                  186,
                  82,
                  108,
                  134,
                  46,
                  238,
                  227,
                  84,
                  192,
                  24,
                ],
                "type": "Buffer",
              },
            ],
            "beginParse": [Function],
            "bits": BitString {
              "_data": {
                "data": [
                  211,
                  7,
                  212,
                  2,
                  251,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                ],
                "type": "Buffer",
              },
              "_length": 48,
              "_offset": 0,
              Symbol(nodejs.util.inspect.custom): [Function],
            },
            "depth": [Function],
            "equals": [Function],
            "hash": [Function],
            "level": [Function],
            "mask": LevelMask {
              "_hashCount": 1,
              "_hashIndex": 0,
              "_mask": 0,
            },
            "refs": [],
            "type": -1,
            Symbol(nodejs.util.inspect.custom): [Function],
          },
        },
      ],
    },
  },
  {
    "hash": "84dafa449f98a6987789ba232358072bc0f76dc4524002a5d0918b9a75d2d599",
    "length": 8,
    "offset": 776,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [],
          "prefix": "E8",
          "tlb": "#E8",
        },
        "control_flow": {
          "branches": [
            {
              "save": {
                "c0": {
                  "args": {
                    "after": {
                      "save": {
                        "c0": {
                          "index": 0,
                          "type": "register",
                        },
                      },
                      "type": "cc",
                    },
                    "body": {
                      "type": "variable",
                      "var_name": "c",
                    },
                    "cond": {
                      "type": "variable",
                      "var_name": "c2",
                    },
                  },
                  "name": "while",
                  "type": "special",
                },
              },
              "type": "variable",
              "var_name": "c2",
            },
          ],
          "nobranch": false,
        },
        "doc": {
          "category": "cont_loops",
          "description": "Executes \`c'\` and pops an integer \`x\` from the resulting stack. If \`x\` is zero, exists the loop and transfers control to the original \`cc\`. If \`x\` is non-zero, executes \`c\`, and then begins a new iteration.",
          "fift": "WHILE",
          "fift_examples": [
            {
              "description": "Equivalent to \`<{ cond }> CONT\` \`<{ code }> CONT\` \`WHILE\`.",
              "fift": "WHILE:<{ cond }>DO<{ code }>",
            },
          ],
          "gas": "18",
          "opcode": "E8",
          "stack": "c' c - ",
        },
        "mnemonic": "WHILE",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "c2",
                "type": "simple",
                "value_types": [
                  "Continuation",
                ],
              },
              {
                "name": "c",
                "type": "simple",
                "value_types": [
                  "Continuation",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [],
          },
        },
      },
      "operands": [],
    },
  },
  {
    "hash": "84dafa449f98a6987789ba232358072bc0f76dc4524002a5d0918b9a75d2d599",
    "length": 8,
    "offset": 784,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [],
          "prefix": "D1",
          "tlb": "#D1",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "cell_parse",
          "description": "Removes a _Slice_ \`s\` from the stack, and throws an exception if it is not empty.",
          "fift": "ENDS",
          "fift_examples": [],
          "gas": "18/68",
          "opcode": "D1",
          "stack": "s - ",
        },
        "mnemonic": "ENDS",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "s",
                "type": "simple",
                "value_types": [
                  "Slice",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [],
          },
        },
      },
      "operands": [],
    },
  },
  {
    "hash": "84dafa449f98a6987789ba232358072bc0f76dc4524002a5d0918b9a75d2d599",
    "length": 8,
    "offset": 792,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "display_hints": [
                {
                  "type": "stack",
                },
              ],
              "max_value": 15,
              "min_value": 1,
              "name": "i",
              "size": 4,
              "type": "uint",
            },
          ],
          "operands_range_check": {
            "from": 1,
            "length": 4,
            "to": 15,
          },
          "prefix": "0",
          "tlb": "#0 i:(## 4) {1 <= i}",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "stack_basic",
          "description": "Interchanges \`s0\` with \`s[i]\`, \`1 <= i <= 15\`.",
          "fift": "s[i] XCHG0",
          "fift_examples": [],
          "gas": "18",
          "opcode": "0i",
          "stack": "",
        },
        "mnemonic": "XCHG_0I",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
          },
          "outputs": {
            "registers": [],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "display_hints": [
              {
                "type": "stack",
              },
            ],
            "max_value": 15,
            "min_value": 1,
            "name": "i",
            "size": 4,
            "type": "uint",
          },
          "type": "numeric",
          "value": 1,
        },
      ],
    },
  },
  {
    "hash": "84dafa449f98a6987789ba232358072bc0f76dc4524002a5d0918b9a75d2d599",
    "length": 8,
    "offset": 800,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [],
          "prefix": "A4",
          "tlb": "#A4",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "arithm_basic",
          "description": "Equivalent to \`1 ADDCONST\`.",
          "fift": "INC",
          "fift_examples": [],
          "gas": "18",
          "opcode": "A4",
          "stack": "x - x+1",
        },
        "mnemonic": "INC",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "x",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [
              {
                "name": "result",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
            ],
          },
        },
      },
      "operands": [],
    },
  },
  {
    "hash": "84dafa449f98a6987789ba232358072bc0f76dc4524002a5d0918b9a75d2d599",
    "length": 8,
    "offset": 808,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [],
          "prefix": "C8",
          "tlb": "#C8",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "cell_build",
          "description": "Creates a new empty _Builder_.",
          "fift": "NEWC",
          "fift_examples": [],
          "gas": "18",
          "opcode": "C8",
          "stack": "- b",
        },
        "mnemonic": "NEWC",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [],
          },
          "outputs": {
            "registers": [],
            "stack": [
              {
                "name": "b",
                "type": "simple",
                "value_types": [
                  "Builder",
                ],
              },
            ],
          },
        },
      },
      "operands": [],
    },
  },
  {
    "hash": "84dafa449f98a6987789ba232358072bc0f76dc4524002a5d0918b9a75d2d599",
    "length": 16,
    "offset": 816,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "display_hints": [
                {
                  "type": "add",
                  "value": 1,
                },
              ],
              "max_value": 255,
              "min_value": 0,
              "name": "c",
              "size": 8,
              "type": "uint",
            },
          ],
          "prefix": "CB",
          "tlb": "#CB cc:uint8",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "cell_build",
          "description": "Stores an unsigned \`cc+1\`-bit integer \`x\` into _Builder_ \`b\`. In all other respects it is similar to \`STI\`.",
          "fift": "[cc+1] STU",
          "fift_examples": [],
          "gas": "26",
          "opcode": "CBcc",
          "stack": "x b - b'",
        },
        "mnemonic": "STU",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "x",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
              {
                "name": "b",
                "type": "simple",
                "value_types": [
                  "Builder",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [
              {
                "name": "b2",
                "type": "simple",
                "value_types": [
                  "Builder",
                ],
              },
            ],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "display_hints": [
              {
                "type": "add",
                "value": 1,
              },
            ],
            "max_value": 255,
            "min_value": 0,
            "name": "c",
            "size": 8,
            "type": "uint",
          },
          "type": "numeric",
          "value": 31,
        },
      ],
    },
  },
  {
    "hash": "84dafa449f98a6987789ba232358072bc0f76dc4524002a5d0918b9a75d2d599",
    "length": 16,
    "offset": 832,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "display_hints": [
                {
                  "type": "add",
                  "value": 1,
                },
              ],
              "max_value": 255,
              "min_value": 0,
              "name": "c",
              "size": 8,
              "type": "uint",
            },
          ],
          "prefix": "CB",
          "tlb": "#CB cc:uint8",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "cell_build",
          "description": "Stores an unsigned \`cc+1\`-bit integer \`x\` into _Builder_ \`b\`. In all other respects it is similar to \`STI\`.",
          "fift": "[cc+1] STU",
          "fift_examples": [],
          "gas": "26",
          "opcode": "CBcc",
          "stack": "x b - b'",
        },
        "mnemonic": "STU",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "x",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
              {
                "name": "b",
                "type": "simple",
                "value_types": [
                  "Builder",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [
              {
                "name": "b2",
                "type": "simple",
                "value_types": [
                  "Builder",
                ],
              },
            ],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "display_hints": [
              {
                "type": "add",
                "value": 1,
              },
            ],
            "max_value": 255,
            "min_value": 0,
            "name": "c",
            "size": 8,
            "type": "uint",
          },
          "type": "numeric",
          "value": 31,
        },
      ],
    },
  },
  {
    "hash": "84dafa449f98a6987789ba232358072bc0f76dc4524002a5d0918b9a75d2d599",
    "length": 16,
    "offset": 848,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "display_hints": [
                {
                  "type": "add",
                  "value": 1,
                },
              ],
              "max_value": 255,
              "min_value": 0,
              "name": "c",
              "size": 8,
              "type": "uint",
            },
          ],
          "prefix": "CB",
          "tlb": "#CB cc:uint8",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "cell_build",
          "description": "Stores an unsigned \`cc+1\`-bit integer \`x\` into _Builder_ \`b\`. In all other respects it is similar to \`STI\`.",
          "fift": "[cc+1] STU",
          "fift_examples": [],
          "gas": "26",
          "opcode": "CBcc",
          "stack": "x b - b'",
        },
        "mnemonic": "STU",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "x",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
              {
                "name": "b",
                "type": "simple",
                "value_types": [
                  "Builder",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [
              {
                "name": "b2",
                "type": "simple",
                "value_types": [
                  "Builder",
                ],
              },
            ],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "display_hints": [
              {
                "type": "add",
                "value": 1,
              },
            ],
            "max_value": 255,
            "min_value": 0,
            "name": "c",
            "size": 8,
            "type": "uint",
          },
          "type": "numeric",
          "value": 255,
        },
      ],
    },
  },
  {
    "hash": "84dafa449f98a6987789ba232358072bc0f76dc4524002a5d0918b9a75d2d599",
    "length": 8,
    "offset": 864,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [],
          "prefix": "C9",
          "tlb": "#C9",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "cell_build",
          "description": "Converts a _Builder_ into an ordinary _Cell_.",
          "fift": "ENDC",
          "fift_examples": [],
          "gas": "518",
          "opcode": "C9",
          "stack": "b - c",
        },
        "mnemonic": "ENDC",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "b",
                "type": "simple",
                "value_types": [
                  "Builder",
                ],
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [
              {
                "name": "c",
                "type": "simple",
                "value_types": [
                  "Cell",
                ],
              },
            ],
          },
        },
      },
      "operands": [],
    },
  },
  {
    "hash": "84dafa449f98a6987789ba232358072bc0f76dc4524002a5d0918b9a75d2d599",
    "length": 16,
    "offset": 872,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "display_hints": [
                {
                  "type": "register",
                },
              ],
              "max_value": 15,
              "min_value": 0,
              "name": "i",
              "size": 4,
              "type": "uint",
            },
          ],
          "prefix": "ED5",
          "tlb": "#ED5 i:uint4",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "cont_registers",
          "description": "Pops a value \`x\` from the stack and stores it into control register \`c(i)\`, if supported in the current codepage. Notice that if a control register accepts only values of a specific type, a type-checking exception may occur.",
          "fift": "c[i] POPCTR
c[i] POP",
          "fift_examples": [],
          "gas": "26",
          "opcode": "ED5i",
          "stack": "x - ",
        },
        "mnemonic": "POPCTR",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "x",
                "type": "simple",
              },
            ],
          },
          "outputs": {
            "registers": [
              {
                "type": "variable",
                "var_name": "i",
              },
            ],
            "stack": [],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "display_hints": [
              {
                "type": "register",
              },
            ],
            "max_value": 15,
            "min_value": 0,
            "name": "i",
            "size": 4,
            "type": "uint",
          },
          "type": "numeric",
          "value": 4,
        },
      ],
    },
  },
]
`;

exports[`decompiler should decompile a simple contract 8`] = `
[
  {
    "hash": "feb5ff6820e2ff0d9483e7e0d62c817d846789fb4ae580c878866d959dabd5c0",
    "length": 16,
    "offset": 0,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "display_hints": [],
              "max_value": 239,
              "min_value": 0,
              "name": "n",
              "size": 8,
              "type": "uint",
            },
          ],
          "operands_range_check": {
            "from": 0,
            "length": 8,
            "to": 239,
          },
          "prefix": "FF",
          "tlb": "#FF nn:(#<= 239)",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "codepage",
          "description": "Selects TVM codepage \`0 <= nn < 240\`. If the codepage is not supported, throws an invalid opcode exception.",
          "fift": "[nn] SETCP",
          "fift_examples": [],
          "gas": "26",
          "opcode": "FFnn",
          "stack": "-",
        },
        "mnemonic": "SETCP",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [],
          },
          "outputs": {
            "registers": [],
            "stack": [],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "display_hints": [],
            "max_value": 239,
            "min_value": 0,
            "name": "n",
            "size": 8,
            "type": "uint",
          },
          "type": "numeric",
          "value": 0,
        },
      ],
    },
  },
  {
    "hash": "feb5ff6820e2ff0d9483e7e0d62c817d846789fb4ae580c878866d959dabd5c0",
    "length": 24,
    "offset": 16,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "display_hints": [
                {
                  "size_var": "n",
                  "type": "dictionary",
                },
              ],
              "name": "d",
              "type": "ref",
            },
            {
              "display_hints": [],
              "max_value": 1023,
              "min_value": 0,
              "name": "n",
              "size": 10,
              "type": "uint",
            },
          ],
          "prefix": "F4A6_",
          "tlb": "#F4A6_ d:^Cell n:uint10",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "dict_special",
          "description": "Pushes a non-empty constant dictionary \`D\` (as a \`Cell^?\`) along with its key length \`0 <= n <= 1023\`, stored as a part of the instruction. The dictionary itself is created from the first of remaining references of the current continuation. In this way, the complete \`DICTPUSHCONST\` instruction can be obtained by first serializing \`xF4A4_\`, then the non-empty dictionary itself (one \`1\` bit and a cell reference), and then the unsigned 10-bit integer \`n\` (as if by a \`STU 10\` instruction). An empty dictionary can be pushed by a \`NEWDICT\` primitive instead.",
          "fift": "[ref] [n] DICTPUSHCONST",
          "fift_examples": [],
          "gas": "34",
          "opcode": "F4A6_n",
          "stack": " - D n",
        },
        "mnemonic": "DICTPUSHCONST",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [],
          },
          "outputs": {
            "registers": [],
            "stack": [
              {
                "name": "D",
                "type": "simple",
                "value_types": [
                  "Slice",
                  "Null",
                ],
              },
              {
                "name": "n",
                "type": "simple",
                "value_types": [
                  "Integer",
                ],
              },
            ],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "display_hints": [
              {
                "size_var": "n",
                "type": "dictionary",
              },
            ],
            "name": "d",
            "type": "ref",
          },
          "type": "ref",
          "value": Cell {
            "_depths": [
              6,
              6,
              6,
              6,
            ],
            "_hashes": [
              {
                "data": [
                  216,
                  20,
                  100,
                  19,
                  100,
                  189,
                  19,
                  224,
                  168,
                  166,
                  70,
                  34,
                  109,
                  126,
                  182,
                  225,
                  116,
                  207,
                  212,
                  244,
                  114,
                  53,
                  248,
                  248,
                  178,
                  157,
                  31,
                  214,
                  140,
                  5,
                  163,
                  153,
                ],
                "type": "Buffer",
              },
              {
                "data": [
                  216,
                  20,
                  100,
                  19,
                  100,
                  189,
                  19,
                  224,
                  168,
                  166,
                  70,
                  34,
                  109,
                  126,
                  182,
                  225,
                  116,
                  207,
                  212,
                  244,
                  114,
                  53,
                  248,
                  248,
                  178,
                  157,
                  31,
                  214,
                  140,
                  5,
                  163,
                  153,
                ],
                "type": "Buffer",
              },
              {
                "data": [
                  216,
                  20,
                  100,
                  19,
                  100,
                  189,
                  19,
                  224,
                  168,
                  166,
                  70,
                  34,
                  109,
                  126,
                  182,
                  225,
                  116,
                  207,
                  212,
                  244,
                  114,
                  53,
                  248,
                  248,
                  178,
                  157,
                  31,
                  214,
                  140,
                  5,
                  163,
                  153,
                ],
                "type": "Buffer",
              },
              {
                "data": [
                  216,
                  20,
                  100,
                  19,
                  100,
                  189,
                  19,
                  224,
                  168,
                  166,
                  70,
                  34,
                  109,
                  126,
                  182,
                  225,
                  116,
                  207,
                  212,
                  244,
                  114,
                  53,
                  248,
                  248,
                  178,
                  157,
                  31,
                  214,
                  140,
                  5,
                  163,
                  153,
                ],
                "type": "Buffer",
              },
            ],
            "beginParse": [Function],
            "bits": BitString {
              "_data": {
                "data": [
                  1,
                  20,
                  255,
                  0,
                  244,
                  164,
                  19,
                  244,
                  188,
                  242,
                  200,
                  11,
                  1,
                  2,
                  1,
                  32,
                  2,
                  3,
                  2,
                  1,
                  72,
                  4,
                  5,
                  4,
                  248,
                  242,
                  131,
                  8,
                  215,
                  24,
                  32,
                  211,
                  31,
                  211,
                  31,
                  211,
                  31,
                  2,
                  248,
                  35,
                  187,
                  242,
                  100,
                  237,
                  68,
                  208,
                  211,
                  31,
                  211,
                  31,
                  211,
                  255,
                  244,
                  4,
                  209,
                  81,
                  67,
                  186,
                  242,
                  161,
                  81,
                  81,
                  186,
                  242,
                  162,
                  5,
                  249,
                  1,
                  84,
                  16,
                  100,
                  249,
                  16,
                  242,
                  163,
                  248,
                  0,
                  36,
                  164,
                  200,
                  203,
                  31,
                  82,
                  64,
                  203,
                  31,
                  82,
                  48,
                  203,
                  255,
                  82,
                  16,
                  244,
                  0,
                  201,
                  237,
                  84,
                  248,
                  15,
                  1,
                  211,
                  7,
                  33,
                  192,
                  0,
                  159,
                  108,
                  81,
                  147,
                  32,
                  215,
                  74,
                  150,
                  211,
                  7,
                  212,
                  2,
                  251,
                  0,
                  232,
                  48,
                  224,
                  33,
                  192,
                  1,
                  227,
                  0,
                  33,
                  192,
                  2,
                  227,
                  0,
                  1,
                  192,
                  3,
                  145,
                  48,
                  227,
                  13,
                  3,
                  164,
                  200,
                  203,
                  31,
                  18,
                  203,
                  31,
                  203,
                  255,
                  16,
                  17,
                  18,
                  19,
                  2,
                  230,
                  208,
                  1,
                  208,
                  211,
                  3,
                  33,
                  113,
                  176,
                  146,
                  95,
                  4,
                  224,
                  34,
                  215,
                  73,
                  193,
                  32,
                  146,
                  95,
                  4,
                  224,
                  2,
                  211,
                  31,
                  33,
                  130,
                  16,
                  112,
                  108,
                  117,
                  103,
                  189,
                  34,
                  130,
                  16,
                  100,
                  115,
                  116,
                  114,
                  189,
                  176,
                  146,
                  95,
                  5,
                  224,
                  3,
                  250,
                  64,
                  48,
                  32,
                  250,
                  68,
                  1,
                  200,
                  202,
                  7,
                  203,
                  255,
                  201,
                  208,
                  237,
                  68,
                  208,
                  129,
                  1,
                  64,
                  215,
                  33,
                  244,
                  4,
                  48,
                  92,
                  129,
                  1,
                  8,
                  244,
                  10,
                  111,
                  161,
                  49,
                  179,
                  146,
                  95,
                  7,
                  224,
                  5,
                  211,
                  63,
                  200,
                  37,
                  130,
                  16,
                  112,
                  108,
                  117,
                  103,
                  186,
                  146,
                  56,
                  48,
                  227,
                  13,
                  3,
                  130,
                  16,
                  100,
                  115,
                  116,
                  114,
                  186,
                  146,
                  95,
                  6,
                  227,
                  13,
                  6,
                  7,
                  2,
                  1,
                  32,
                  8,
                  9,
                  0,
                  120,
                  1,
                  250,
                  0,
                  244,
                  4,
                  48,
                  248,
                  39,
                  111,
                  34,
                  48,
                  80,
                  10,
                  161,
                  33,
                  190,
                  242,
                  224,
                  80,
                  130,
                  16,
                  112,
                  108,
                  117,
                  103,
                  131,
                  30,
                  177,
                  112,
                  128,
                  24,
                  80,
                  4,
                  203,
                  5,
                  38,
                  207,
                  22,
                  88,
                  250,
                  2,
                  25,
                  244,
                  0,
                  203,
                  105,
                  23,
                  203,
                  31,
                  82,
                  96,
                  203,
                  63,
                  32,
                  201,
                  128,
                  64,
                  251,
                  0,
                  6,
                  0,
                  138,
                  80,
                  4,
                  129,
                  1,
                  8,
                  244,
                  89,
                  48,
                  237,
                  68,
                  208,
                  129,
                  1,
                  64,
                  215,
                  32,
                  200,
                  1,
                  207,
                  22,
                  244,
                  0,
                  201,
                  237,
                  84,
                  1,
                  114,
                  176,
                  142,
                  35,
                  130,
                  16,
                  100,
                  115,
                  116,
                  114,
                  131,
                  30,
                  177,
                  112,
                  128,
                  24,
                  80,
                  5,
                  203,
                  5,
                  80,
                  3,
                  207,
                  22,
                  35,
                  250,
                  2,
                  19,
                  203,
                  106,
                  203,
                  31,
                  203,
                  63,
                  201,
                  128,
                  64,
                  251,
                  0,
                  146,
                  95,
                  3,
                  226,
                  2,
                  1,
                  32,
                  10,
                  11,
                  0,
                  89,
                  189,
                  36,
                  43,
                  111,
                  106,
                  38,
                  132,
                  8,
                  10,
                  6,
                  185,
                  15,
                  160,
                  33,
                  132,
                  112,
                  212,
                  8,
                  8,
                  71,
                  164,
                  147,
                  125,
                  41,
                  145,
                  12,
                  230,
                  144,
                  62,
                  159,
                  249,
                  131,
                  120,
                  18,
                  128,
                  27,
                  120,
                  16,
                  20,
                  137,
                  135,
                  21,
                  159,
                  49,
                  132,
                  2,
                  1,
                  88,
                  12,
                  13,
                  0,
                  17,
                  184,
                  201,
                  126,
                  212,
                  77,
                  13,
                  112,
                  177,
                  248,
                  0,
                  61,
                  178,
                  157,
                  251,
                  81,
                  52,
                  32,
                  64,
                  80,
                  53,
                  200,
                  125,
                  1,
                  12,
                  0,
                  178,
                  50,
                  129,
                  242,
                  255,
                  242,
                  116,
                  0,
                  96,
                  64,
                  66,
                  61,
                  2,
                  155,
                  232,
                  76,
                  96,
                  2,
                  1,
                  32,
                  14,
                  15,
                  0,
                  25,
                  173,
                  206,
                  118,
                  162,
                  104,
                  64,
                  32,
                  107,
                  144,
                  235,
                  133,
                  255,
                  192,
                  0,
                  25,
                  175,
                  29,
                  246,
                  162,
                  104,
                  64,
                  16,
                  107,
                  144,
                  235,
                  133,
                  143,
                  192,
                  0,
                  110,
                  210,
                  7,
                  250,
                  0,
                  212,
                  212,
                  34,
                  249,
                  0,
                  5,
                  200,
                  202,
                  7,
                  21,
                  203,
                  255,
                  201,
                  208,
                  119,
                  116,
                  128,
                  24,
                  200,
                  203,
                  5,
                  203,
                  2,
                  34,
                  207,
                  22,
                  80,
                  5,
                  250,
                  2,
                  20,
                  203,
                  107,
                  18,
                  204,
                  204,
                  201,
                  115,
                  251,
                  0,
                  200,
                  64,
                  20,
                  129,
                  1,
                  8,
                  244,
                  81,
                  242,
                  167,
                  2,
                  0,
                  112,
                  129,
                  1,
                  8,
                  215,
                  24,
                  250,
                  0,
                  211,
                  63,
                  200,
                  84,
                  32,
                  71,
                  129,
                  1,
                  8,
                  244,
                  81,
                  242,
                  167,
                  130,
                  16,
                  110,
                  111,
                  116,
                  101,
                  112,
                  116,
                  128,
                  24,
                  200,
                  203,
                  5,
                  203,
                  2,
                  80,
                  6,
                  207,
                  22,
                  80,
                  4,
                  250,
                  2,
                  20,
                  203,
                  106,
                  18,
                  203,
                  31,
                  203,
                  63,
                  201,
                  115,
                  251,
                  0,
                  2,
                  0,
                  108,
                  129,
                  1,
                  8,
                  215,
                  24,
                  250,
                  0,
                  211,
                  63,
                  48,
                  82,
                  36,
                  129,
                  1,
                  8,
                  244,
                  89,
                  242,
                  167,
                  130,
                  16,
                  100,
                  115,
                  116,
                  114,
                  112,
                  116,
                  128,
                  24,
                  200,
                  203,
                  5,
                  203,
                  2,
                  80,
                  5,
                  207,
                  22,
                  80,
                  3,
                  250,
                  2,
                  19,
                  203,
                  106,
                  203,
                  31,
                  18,
                  203,
                  63,
                  201,
                  115,
                  251,
                  0,
                  0,
                  10,
                  244,
                  0,
                  201,
                  237,
                  84,
                ],
                "type": "Buffer",
              },
              "_length": 2,
              "_offset": 120,
              Symbol(nodejs.util.inspect.custom): [Function],
            },
            "depth": [Function],
            "equals": [Function],
            "hash": [Function],
            "level": [Function],
            "mask": LevelMask {
              "_hashCount": 1,
              "_hashIndex": 0,
              "_mask": 0,
            },
            "refs": [
              Cell {
                "_depths": [
                  5,
                  5,
                  5,
                  5,
                ],
                "_hashes": [
                  {
                    "data": [
                      62,
                      149,
                      60,
                      253,
                      44,
                      56,
                      142,
                      232,
                      233,
                      132,
                      134,
                      158,
                      249,
                      66,
                      50,
                      190,
                      173,
                      194,
                      255,
                      57,
                      175,
                      0,
                      137,
                      99,
                      39,
                      160,
                      65,
                      197,
                      215,
                      116,
                      185,
                      243,
                    ],
                    "type": "Buffer",
                  },
                  {
                    "data": [
                      62,
                      149,
                      60,
                      253,
                      44,
                      56,
                      142,
                      232,
                      233,
                      132,
                      134,
                      158,
                      249,
                      66,
                      50,
                      190,
                      173,
                      194,
                      255,
                      57,
                      175,
                      0,
                      137,
                      99,
                      39,
                      160,
                      65,
                      197,
                      215,
                      116,
                      185,
                      243,
                    ],
                    "type": "Buffer",
                  },
                  {
                    "data": [
                      62,
                      149,
                      60,
                      253,
                      44,
                      56,
                      142,
                      232,
                      233,
                      132,
                      134,
                      158,
                      249,
                      66,
                      50,
                      190,
                      173,
                      194,
                      255,
                      57,
                      175,
                      0,
                      137,
                      99,
                      39,
                      160,
                      65,
                      197,
                      215,
                      116,
                      185,
                      243,
                    ],
                    "type": "Buffer",
                  },
                  {
                    "data": [
                      62,
                      149,
                      60,
                      253,
                      44,
                      56,
                      142,
                      232,
                      233,
                      132,
                      134,
                      158,
                      249,
                      66,
                      50,
                      190,
                      173,
                      194,
                      255,
                      57,
                      175,
                      0,
                      137,
                      99,
                      39,
                      160,
                      65,
                      197,
                      215,
                      116,
                      185,
                      243,
                    ],
                    "type": "Buffer",
                  },
                ],
                "beginParse": [Function],
                "bits": BitString {
                  "_data": {
                    "data": [
                      1,
                      20,
                      255,
                      0,
                      244,
                      164,
                      19,
                      244,
                      188,
                      242,
                      200,
                      11,
                      1,
                      2,
                      1,
                      32,
                      2,
                      3,
                      2,
                      1,
                      72,
                      4,
                      5,
                      4,
                      248,
                      242,
                      131,
                      8,
                      215,
                      24,
                      32,
                      211,
                      31,
                      211,
                      31,
                      211,
                      31,
                      2,
                      248,
                      35,
                      187,
                      242,
                      100,
                      237,
                      68,
                      208,
                      211,
                      31,
                      211,
                      31,
                      211,
                      255,
                      244,
                      4,
                      209,
                      81,
                      67,
                      186,
                      242,
                      161,
                      81,
                      81,
                      186,
                      242,
                      162,
                      5,
                      249,
                      1,
                      84,
                      16,
                      100,
                      249,
                      16,
                      242,
                      163,
                      248,
                      0,
                      36,
                      164,
                      200,
                      203,
                      31,
                      82,
                      64,
                      203,
                      31,
                      82,
                      48,
                      203,
                      255,
                      82,
                      16,
                      244,
                      0,
                      201,
                      237,
                      84,
                      248,
                      15,
                      1,
                      211,
                      7,
                      33,
                      192,
                      0,
                      159,
                      108,
                      81,
                      147,
                      32,
                      215,
                      74,
                      150,
                      211,
                      7,
                      212,
                      2,
                      251,
                      0,
                      232,
                      48,
                      224,
                      33,
                      192,
                      1,
                      227,
                      0,
                      33,
                      192,
                      2,
                      227,
                      0,
                      1,
                      192,
                      3,
                      145,
                      48,
                      227,
                      13,
                      3,
                      164,
                      200,
                      203,
                      31,
                      18,
                      203,
                      31,
                      203,
                      255,
                      16,
                      17,
                      18,
                      19,
                      2,
                      230,
                      208,
                      1,
                      208,
                      211,
                      3,
                      33,
                      113,
                      176,
                      146,
                      95,
                      4,
                      224,
                      34,
                      215,
                      73,
                      193,
                      32,
                      146,
                      95,
                      4,
                      224,
                      2,
                      211,
                      31,
                      33,
                      130,
                      16,
                      112,
                      108,
                      117,
                      103,
                      189,
                      34,
                      130,
                      16,
                      100,
                      115,
                      116,
                      114,
                      189,
                      176,
                      146,
                      95,
                      5,
                      224,
                      3,
                      250,
                      64,
                      48,
                      32,
                      250,
                      68,
                      1,
                      200,
                      202,
                      7,
                      203,
                      255,
                      201,
                      208,
                      237,
                      68,
                      208,
                      129,
                      1,
                      64,
                      215,
                      33,
                      244,
                      4,
                      48,
                      92,
                      129,
                      1,
                      8,
                      244,
                      10,
                      111,
                      161,
                      49,
                      179,
                      146,
                      95,
                      7,
                      224,
                      5,
                      211,
                      63,
                      200,
                      37,
                      130,
                      16,
                      112,
                      108,
                      117,
                      103,
                      186,
                      146,
                      56,
                      48,
                      227,
                      13,
                      3,
                      130,
                      16,
                      100,
                      115,
                      116,
                      114,
                      186,
                      146,
                      95,
                      6,
                      227,
                      13,
                      6,
                      7,
                      2,
                      1,
                      32,
                      8,
                      9,
                      0,
                      120,
                      1,
                      250,
                      0,
                      244,
                      4,
                      48,
                      248,
                      39,
                      111,
                      34,
                      48,
                      80,
                      10,
                      161,
                      33,
                      190,
                      242,
                      224,
                      80,
                      130,
                      16,
                      112,
                      108,
                      117,
                      103,
                      131,
                      30,
                      177,
                      112,
                      128,
                      24,
                      80,
                      4,
                      203,
                      5,
                      38,
                      207,
                      22,
                      88,
                      250,
                      2,
                      25,
                      244,
                      0,
                      203,
                      105,
                      23,
                      203,
                      31,
                      82,
                      96,
                      203,
                      63,
                      32,
                      201,
                      128,
                      64,
                      251,
                      0,
                      6,
                      0,
                      138,
                      80,
                      4,
                      129,
                      1,
                      8,
                      244,
                      89,
                      48,
                      237,
                      68,
                      208,
                      129,
                      1,
                      64,
                      215,
                      32,
                      200,
                      1,
                      207,
                      22,
                      244,
                      0,
                      201,
                      237,
                      84,
                      1,
                      114,
                      176,
                      142,
                      35,
                      130,
                      16,
                      100,
                      115,
                      116,
                      114,
                      131,
                      30,
                      177,
                      112,
                      128,
                      24,
                      80,
                      5,
                      203,
                      5,
                      80,
                      3,
                      207,
                      22,
                      35,
                      250,
                      2,
                      19,
                      203,
                      106,
                      203,
                      31,
                      203,
                      63,
                      201,
                      128,
                      64,
                      251,
                      0,
                      146,
                      95,
                      3,
                      226,
                      2,
                      1,
                      32,
                      10,
                      11,
                      0,
                      89,
                      189,
                      36,
                      43,
                      111,
                      106,
                      38,
                      132,
                      8,
                      10,
                      6,
                      185,
                      15,
                      160,
                      33,
                      132,
                      112,
                      212,
                      8,
                      8,
                      71,
                      164,
                      147,
                      125,
                      41,
                      145,
                      12,
                      230,
                      144,
                      62,
                      159,
                      249,
                      131,
                      120,
                      18,
                      128,
                      27,
                      120,
                      16,
                      20,
                      137,
                      135,
                      21,
                      159,
                      49,
                      132,
                      2,
                      1,
                      88,
                      12,
                      13,
                      0,
                      17,
                      184,
                      201,
                      126,
                      212,
                      77,
                      13,
                      112,
                      177,
                      248,
                      0,
                      61,
                      178,
                      157,
                      251,
                      81,
                      52,
                      32,
                      64,
                      80,
                      53,
                      200,
                      125,
                      1,
                      12,
                      0,
                      178,
                      50,
                      129,
                      242,
                      255,
                      242,
                      116,
                      0,
                      96,
                      64,
                      66,
                      61,
                      2,
                      155,
                      232,
                      76,
                      96,
                      2,
                      1,
                      32,
                      14,
                      15,
                      0,
                      25,
                      173,
                      206,
                      118,
                      162,
                      104,
                      64,
                      32,
                      107,
                      144,
                      235,
                      133,
                      255,
                      192,
                      0,
                      25,
                      175,
                      29,
                      246,
                      162,
                      104,
                      64,
                      16,
                      107,
                      144,
                      235,
                      133,
                      143,
                      192,
                      0,
                      110,
                      210,
                      7,
                      250,
                      0,
                      212,
                      212,
                      34,
                      249,
                      0,
                      5,
                      200,
                      202,
                      7,
                      21,
                      203,
                      255,
                      201,
                      208,
                      119,
                      116,
                      128,
                      24,
                      200,
                      203,
                      5,
                      203,
                      2,
                      34,
                      207,
                      22,
                      80,
                      5,
                      250,
                      2,
                      20,
                      203,
                      107,
                      18,
                      204,
                      204,
                      201,
                      115,
                      251,
                      0,
                      200,
                      64,
                      20,
                      129,
                      1,
                      8,
                      244,
                      81,
                      242,
                      167,
                      2,
                      0,
                      112,
                      129,
                      1,
                      8,
                      215,
                      24,
                      250,
                      0,
                      211,
                      63,
                      200,
                      84,
                      32,
                      71,
                      129,
                      1,
                      8,
                      244,
                      81,
                      242,
                      167,
                      130,
                      16,
                      110,
                      111,
                      116,
                      101,
                      112,
                      116,
                      128,
                      24,
                      200,
                      203,
                      5,
                      203,
                      2,
                      80,
                      6,
                      207,
                      22,
                      80,
                      4,
                      250,
                      2,
                      20,
                      203,
                      106,
                      18,
                      203,
                      31,
                      203,
                      63,
                      201,
                      115,
                      251,
                      0,
                      2,
                      0,
                      108,
                      129,
                      1,
                      8,
                      215,
                      24,
                      250,
                      0,
                      211,
                      63,
                      48,
                      82,
                      36,
                      129,
                      1,
                      8,
                      244,
                      89,
                      242,
                      167,
                      130,
                      16,
                      100,
                      115,
                      116,
                      114,
                      112,
                      116,
                      128,
                      24,
                      200,
                      203,
                      5,
                      203,
                      2,
                      80,
                      5,
                      207,
                      22,
                      80,
                      3,
                      250,
                      2,
                      19,
                      203,
                      106,
                      203,
                      31,
                      18,
                      203,
                      63,
                      201,
                      115,
                      251,
                      0,
                      0,
                      10,
                      244,
                      0,
                      201,
                      237,
                      84,
                    ],
                    "type": "Buffer",
                  },
                  "_length": 4,
                  "_offset": 160,
                  Symbol(nodejs.util.inspect.custom): [Function],
                },
                "depth": [Function],
                "equals": [Function],
                "hash": [Function],
                "level": [Function],
                "mask": LevelMask {
                  "_hashCount": 1,
                  "_hashIndex": 0,
                  "_mask": 0,
                },
                "refs": [
                  Cell {
                    "_depths": [
                      1,
                      1,
                      1,
                      1,
                    ],
                    "_hashes": [
                      {
                        "data": [
                          172,
                          235,
                          134,
                          40,
                          93,
                          101,
                          152,
                          242,
                          156,
                          46,
                          217,
                          159,
                          44,
                          226,
                          66,
                          40,
                          203,
                          117,
                          42,
                          10,
                          195,
                          165,
                          138,
                          228,
                          213,
                          25,
                          28,
                          95,
                          203,
                          152,
                          156,
                          145,
                        ],
                        "type": "Buffer",
                      },
                      {
                        "data": [
                          172,
                          235,
                          134,
                          40,
                          93,
                          101,
                          152,
                          242,
                          156,
                          46,
                          217,
                          159,
                          44,
                          226,
                          66,
                          40,
                          203,
                          117,
                          42,
                          10,
                          195,
                          165,
                          138,
                          228,
                          213,
                          25,
                          28,
                          95,
                          203,
                          152,
                          156,
                          145,
                        ],
                        "type": "Buffer",
                      },
                      {
                        "data": [
                          172,
                          235,
                          134,
                          40,
                          93,
                          101,
                          152,
                          242,
                          156,
                          46,
                          217,
                          159,
                          44,
                          226,
                          66,
                          40,
                          203,
                          117,
                          42,
                          10,
                          195,
                          165,
                          138,
                          228,
                          213,
                          25,
                          28,
                          95,
                          203,
                          152,
                          156,
                          145,
                        ],
                        "type": "Buffer",
                      },
                      {
                        "data": [
                          172,
                          235,
                          134,
                          40,
                          93,
                          101,
                          152,
                          242,
                          156,
                          46,
                          217,
                          159,
                          44,
                          226,
                          66,
                          40,
                          203,
                          117,
                          42,
                          10,
                          195,
                          165,
                          138,
                          228,
                          213,
                          25,
                          28,
                          95,
                          203,
                          152,
                          156,
                          145,
                        ],
                        "type": "Buffer",
                      },
                    ],
                    "beginParse": [Function],
                    "bits": BitString {
                      "_data": {
                        "data": [
                          1,
                          20,
                          255,
                          0,
                          244,
                          164,
                          19,
                          244,
                          188,
                          242,
                          200,
                          11,
                          1,
                          2,
                          1,
                          32,
                          2,
                          3,
                          2,
                          1,
                          72,
                          4,
                          5,
                          4,
                          248,
                          242,
                          131,
                          8,
                          215,
                          24,
                          32,
                          211,
                          31,
                          211,
                          31,
                          211,
                          31,
                          2,
                          248,
                          35,
                          187,
                          242,
                          100,
                          237,
                          68,
                          208,
                          211,
                          31,
                          211,
                          31,
                          211,
                          255,
                          244,
                          4,
                          209,
                          81,
                          67,
                          186,
                          242,
                          161,
                          81,
                          81,
                          186,
                          242,
                          162,
                          5,
                          249,
                          1,
                          84,
                          16,
                          100,
                          249,
                          16,
                          242,
                          163,
                          248,
                          0,
                          36,
                          164,
                          200,
                          203,
                          31,
                          82,
                          64,
                          203,
                          31,
                          82,
                          48,
                          203,
                          255,
                          82,
                          16,
                          244,
                          0,
                          201,
                          237,
                          84,
                          248,
                          15,
                          1,
                          211,
                          7,
                          33,
                          192,
                          0,
                          159,
                          108,
                          81,
                          147,
                          32,
                          215,
                          74,
                          150,
                          211,
                          7,
                          212,
                          2,
                          251,
                          0,
                          232,
                          48,
                          224,
                          33,
                          192,
                          1,
                          227,
                          0,
                          33,
                          192,
                          2,
                          227,
                          0,
                          1,
                          192,
                          3,
                          145,
                          48,
                          227,
                          13,
                          3,
                          164,
                          200,
                          203,
                          31,
                          18,
                          203,
                          31,
                          203,
                          255,
                          16,
                          17,
                          18,
                          19,
                          2,
                          230,
                          208,
                          1,
                          208,
                          211,
                          3,
                          33,
                          113,
                          176,
                          146,
                          95,
                          4,
                          224,
                          34,
                          215,
                          73,
                          193,
                          32,
                          146,
                          95,
                          4,
                          224,
                          2,
                          211,
                          31,
                          33,
                          130,
                          16,
                          112,
                          108,
                          117,
                          103,
                          189,
                          34,
                          130,
                          16,
                          100,
                          115,
                          116,
                          114,
                          189,
                          176,
                          146,
                          95,
                          5,
                          224,
                          3,
                          250,
                          64,
                          48,
                          32,
                          250,
                          68,
                          1,
                          200,
                          202,
                          7,
                          203,
                          255,
                          201,
                          208,
                          237,
                          68,
                          208,
                          129,
                          1,
                          64,
                          215,
                          33,
                          244,
                          4,
                          48,
                          92,
                          129,
                          1,
                          8,
                          244,
                          10,
                          111,
                          161,
                          49,
                          179,
                          146,
                          95,
                          7,
                          224,
                          5,
                          211,
                          63,
                          200,
                          37,
                          130,
                          16,
                          112,
                          108,
                          117,
                          103,
                          186,
                          146,
                          56,
                          48,
                          227,
                          13,
                          3,
                          130,
                          16,
                          100,
                          115,
                          116,
                          114,
                          186,
                          146,
                          95,
                          6,
                          227,
                          13,
                          6,
                          7,
                          2,
                          1,
                          32,
                          8,
                          9,
                          0,
                          120,
                          1,
                          250,
                          0,
                          244,
                          4,
                          48,
                          248,
                          39,
                          111,
                          34,
                          48,
                          80,
                          10,
                          161,
                          33,
                          190,
                          242,
                          224,
                          80,
                          130,
                          16,
                          112,
                          108,
                          117,
                          103,
                          131,
                          30,
                          177,
                          112,
                          128,
                          24,
                          80,
                          4,
                          203,
                          5,
                          38,
                          207,
                          22,
                          88,
                          250,
                          2,
                          25,
                          244,
                          0,
                          203,
                          105,
                          23,
                          203,
                          31,
                          82,
                          96,
                          203,
                          63,
                          32,
                          201,
                          128,
                          64,
                          251,
                          0,
                          6,
                          0,
                          138,
                          80,
                          4,
                          129,
                          1,
                          8,
                          244,
                          89,
                          48,
                          237,
                          68,
                          208,
                          129,
                          1,
                          64,
                          215,
                          32,
                          200,
                          1,
                          207,
                          22,
                          244,
                          0,
                          201,
                          237,
                          84,
                          1,
                          114,
                          176,
                          142,
                          35,
                          130,
                          16,
                          100,
                          115,
                          116,
                          114,
                          131,
                          30,
                          177,
                          112,
                          128,
                          24,
                          80,
                          5,
                          203,
                          5,
                          80,
                          3,
                          207,
                          22,
                          35,
                          250,
                          2,
                          19,
                          203,
                          106,
                          203,
                          31,
                          203,
                          63,
                          201,
                          128,
                          64,
                          251,
                          0,
                          146,
                          95,
                          3,
                          226,
                          2,
                          1,
                          32,
                          10,
                          11,
                          0,
                          89,
                          189,
                          36,
                          43,
                          111,
                          106,
                          38,
                          132,
                          8,
                          10,
                          6,
                          185,
                          15,
                          160,
                          33,
                          132,
                          112,
                          212,
                          8,
                          8,
                          71,
                          164,
                          147,
                          125,
                          41,
                          145,
                          12,
                          230,
                          144,
                          62,
                          159,
                          249,
                          131,
                          120,
                          18,
                          128,
                          27,
                          120,
                          16,
                          20,
                          137,
                          135,
                          21,
                          159,
                          49,
                          132,
                          2,
                          1,
                          88,
                          12,
                          13,
                          0,
                          17,
                          184,
                          201,
                          126,
                          212,
                          77,
                          13,
                          112,
                          177,
                          248,
                          0,
                          61,
                          178,
                          157,
                          251,
                          81,
                          52,
                          32,
                          64,
                          80,
                          53,
                          200,
                          125,
                          1,
                          12,
                          0,
                          178,
                          50,
                          129,
                          242,
                          255,
                          242,
                          116,
                          0,
                          96,
                          64,
                          66,
                          61,
                          2,
                          155,
                          232,
                          76,
                          96,
                          2,
                          1,
                          32,
                          14,
                          15,
                          0,
                          25,
                          173,
                          206,
                          118,
                          162,
                          104,
                          64,
                          32,
                          107,
                          144,
                          235,
                          133,
                          255,
                          192,
                          0,
                          25,
                          175,
                          29,
                          246,
                          162,
                          104,
                          64,
                          16,
                          107,
                          144,
                          235,
                          133,
                          143,
                          192,
                          0,
                          110,
                          210,
                          7,
                          250,
                          0,
                          212,
                          212,
                          34,
                          249,
                          0,
                          5,
                          200,
                          202,
                          7,
                          21,
                          203,
                          255,
                          201,
                          208,
                          119,
                          116,
                          128,
                          24,
                          200,
                          203,
                          5,
                          203,
                          2,
                          34,
                          207,
                          22,
                          80,
                          5,
                          250,
                          2,
                          20,
                          203,
                          107,
                          18,
                          204,
                          204,
                          201,
                          115,
                          251,
                          0,
                          200,
                          64,
                          20,
                          129,
                          1,
                          8,
                          244,
                          81,
                          242,
                          167,
                          2,
                          0,
                          112,
                          129,
                          1,
                          8,
                          215,
                          24,
                          250,
                          0,
                          211,
                          63,
                          200,
                          84,
                          32,
                          71,
                          129,
                          1,
                          8,
                          244,
                          81,
                          242,
                          167,
                          130,
                          16,
                          110,
                          111,
                          116,
                          101,
                          112,
                          116,
                          128,
                          24,
                          200,
                          203,
                          5,
                          203,
                          2,
                          80,
                          6,
                          207,
                          22,
                          80,
                          4,
                          250,
                          2,
                          20,
                          203,
                          106,
                          18,
                          203,
                          31,
                          203,
                          63,
                          201,
                          115,
                          251,
                          0,
                          2,
                          0,
                          108,
                          129,
                          1,
                          8,
                          215,
                          24,
                          250,
                          0,
                          211,
                          63,
                          48,
                          82,
                          36,
                          129,
                          1,
                          8,
                          244,
                          89,
                          242,
                          167,
                          130,
                          16,
                          100,
                          115,
                          116,
                          114,
                          112,
                          116,
                          128,
                          24,
                          200,
                          203,
                          5,
                          203,
                          2,
                          80,
                          5,
                          207,
                          22,
                          80,
                          3,
                          250,
                          2,
                          19,
                          203,
                          106,
                          203,
                          31,
                          18,
                          203,
                          63,
                          201,
                          115,
                          251,
                          0,
                          0,
                          10,
                          244,
                          0,
                          201,
                          237,
                          84,
                        ],
                        "type": "Buffer",
                      },
                      "_length": 920,
                      "_offset": 1240,
                      Symbol(nodejs.util.inspect.custom): [Function],
                    },
                    "depth": [Function],
                    "equals": [Function],
                    "hash": [Function],
                    "level": [Function],
                    "mask": LevelMask {
                      "_hashCount": 1,
                      "_hashIndex": 0,
                      "_mask": 0,
                    },
                    "refs": [
                      Cell {
                        "_depths": [
                          0,
                          0,
                          0,
                          0,
                        ],
                        "_hashes": [
                          {
                            "data": [
                              137,
                              166,
                              225,
                              122,
                              110,
                              6,
                              19,
                              24,
                              253,
                              145,
                              208,
                              73,
                              59,
                              156,
                              231,
                              132,
                              15,
                              84,
                              12,
                              243,
                              124,
                              7,
                              218,
                              232,
                              39,
                              164,
                              2,
                              169,
                              126,
                              146,
                              77,
                              41,
                            ],
                            "type": "Buffer",
                          },
                          {
                            "data": [
                              137,
                              166,
                              225,
                              122,
                              110,
                              6,
                              19,
                              24,
                              253,
                              145,
                              208,
                              73,
                              59,
                              156,
                              231,
                              132,
                              15,
                              84,
                              12,
                              243,
                              124,
                              7,
                              218,
                              232,
                              39,
                              164,
                              2,
                              169,
                              126,
                              146,
                              77,
                              41,
                            ],
                            "type": "Buffer",
                          },
                          {
                            "data": [
                              137,
                              166,
                              225,
                              122,
                              110,
                              6,
                              19,
                              24,
                              253,
                              145,
                              208,
                              73,
                              59,
                              156,
                              231,
                              132,
                              15,
                              84,
                              12,
                              243,
                              124,
                              7,
                              218,
                              232,
                              39,
                              164,
                              2,
                              169,
                              126,
                              146,
                              77,
                              41,
                            ],
                            "type": "Buffer",
                          },
                          {
                            "data": [
                              137,
                              166,
                              225,
                              122,
                              110,
                              6,
                              19,
                              24,
                              253,
                              145,
                              208,
                              73,
                              59,
                              156,
                              231,
                              132,
                              15,
                              84,
                              12,
                              243,
                              124,
                              7,
                              218,
                              232,
                              39,
                              164,
                              2,
                              169,
                              126,
                              146,
                              77,
                              41,
                            ],
                            "type": "Buffer",
                          },
                        ],
                        "beginParse": [Function],
                        "bits": BitString {
                          "_data": {
                            "data": [
                              1,
                              20,
                              255,
                              0,
                              244,
                              164,
                              19,
                              244,
                              188,
                              242,
                              200,
                              11,
                              1,
                              2,
                              1,
                              32,
                              2,
                              3,
                              2,
                              1,
                              72,
                              4,
                              5,
                              4,
                              248,
                              242,
                              131,
                              8,
                              215,
                              24,
                              32,
                              211,
                              31,
                              211,
                              31,
                              211,
                              31,
                              2,
                              248,
                              35,
                              187,
                              242,
                              100,
                              237,
                              68,
                              208,
                              211,
                              31,
                              211,
                              31,
                              211,
                              255,
                              244,
                              4,
                              209,
                              81,
                              67,
                              186,
                              242,
                              161,
                              81,
                              81,
                              186,
                              242,
                              162,
                              5,
                              249,
                              1,
                              84,
                              16,
                              100,
                              249,
                              16,
                              242,
                              163,
                              248,
                              0,
                              36,
                              164,
                              200,
                              203,
                              31,
                              82,
                              64,
                              203,
                              31,
                              82,
                              48,
                              203,
                              255,
                              82,
                              16,
                              244,
                              0,
                              201,
                              237,
                              84,
                              248,
                              15,
                              1,
                              211,
                              7,
                              33,
                              192,
                              0,
                              159,
                              108,
                              81,
                              147,
                              32,
                              215,
                              74,
                              150,
                              211,
                              7,
                              212,
                              2,
                              251,
                              0,
                              232,
                              48,
                              224,
                              33,
                              192,
                              1,
                              227,
                              0,
                              33,
                              192,
                              2,
                              227,
                              0,
                              1,
                              192,
                              3,
                              145,
                              48,
                              227,
                              13,
                              3,
                              164,
                              200,
                              203,
                              31,
                              18,
                              203,
                              31,
                              203,
                              255,
                              16,
                              17,
                              18,
                              19,
                              2,
                              230,
                              208,
                              1,
                              208,
                              211,
                              3,
                              33,
                              113,
                              176,
                              146,
                              95,
                              4,
                              224,
                              34,
                              215,
                              73,
                              193,
                              32,
                              146,
                              95,
                              4,
                              224,
                              2,
                              211,
                              31,
                              33,
                              130,
                              16,
                              112,
                              108,
                              117,
                              103,
                              189,
                              34,
                              130,
                              16,
                              100,
                              115,
                              116,
                              114,
                              189,
                              176,
                              146,
                              95,
                              5,
                              224,
                              3,
                              250,
                              64,
                              48,
                              32,
                              250,
                              68,
                              1,
                              200,
                              202,
                              7,
                              203,
                              255,
                              201,
                              208,
                              237,
                              68,
                              208,
                              129,
                              1,
                              64,
                              215,
                              33,
                              244,
                              4,
                              48,
                              92,
                              129,
                              1,
                              8,
                              244,
                              10,
                              111,
                              161,
                              49,
                              179,
                              146,
                              95,
                              7,
                              224,
                              5,
                              211,
                              63,
                              200,
                              37,
                              130,
                              16,
                              112,
                              108,
                              117,
                              103,
                              186,
                              146,
                              56,
                              48,
                              227,
                              13,
                              3,
                              130,
                              16,
                              100,
                              115,
                              116,
                              114,
                              186,
                              146,
                              95,
                              6,
                              227,
                              13,
                              6,
                              7,
                              2,
                              1,
                              32,
                              8,
                              9,
                              0,
                              120,
                              1,
                              250,
                              0,
                              244,
                              4,
                              48,
                              248,
                              39,
                              111,
                              34,
                              48,
                              80,
                              10,
                              161,
                              33,
                              190,
                              242,
                              224,
                              80,
                              130,
                              16,
                              112,
                              108,
                              117,
                              103,
                              131,
                              30,
                              177,
                              112,
                              128,
                              24,
                              80,
                              4,
                              203,
                              5,
                              38,
                              207,
                              22,
                              88,
                              250,
                              2,
                              25,
                              244,
                              0,
                              203,
                              105,
                              23,
                              203,
                              31,
                              82,
                              96,
                              203,
                              63,
                              32,
                              201,
                              128,
                              64,
                              251,
                              0,
                              6,
                              0,
                              138,
                              80,
                              4,
                              129,
                              1,
                              8,
                              244,
                              89,
                              48,
                              237,
                              68,
                              208,
                              129,
                              1,
                              64,
                              215,
                              32,
                              200,
                              1,
                              207,
                              22,
                              244,
                              0,
                              201,
                              237,
                              84,
                              1,
                              114,
                              176,
                              142,
                              35,
                              130,
                              16,
                              100,
                              115,
                              116,
                              114,
                              131,
                              30,
                              177,
                              112,
                              128,
                              24,
                              80,
                              5,
                              203,
                              5,
                              80,
                              3,
                              207,
                              22,
                              35,
                              250,
                              2,
                              19,
                              203,
                              106,
                              203,
                              31,
                              203,
                              63,
                              201,
                              128,
                              64,
                              251,
                              0,
                              146,
                              95,
                              3,
                              226,
                              2,
                              1,
                              32,
                              10,
                              11,
                              0,
                              89,
                              189,
                              36,
                              43,
                              111,
                              106,
                              38,
                              132,
                              8,
                              10,
                              6,
                              185,
                              15,
                              160,
                              33,
                              132,
                              112,
                              212,
                              8,
                              8,
                              71,
                              164,
                              147,
                              125,
                              41,
                              145,
                              12,
                              230,
                              144,
                              62,
                              159,
                              249,
                              131,
                              120,
                              18,
                              128,
                              27,
                              120,
                              16,
                              20,
                              137,
                              135,
                              21,
                              159,
                              49,
                              132,
                              2,
                              1,
                              88,
                              12,
                              13,
                              0,
                              17,
                              184,
                              201,
                              126,
                              212,
                              77,
                              13,
                              112,
                              177,
                              248,
                              0,
                              61,
                              178,
                              157,
                              251,
                              81,
                              52,
                              32,
                              64,
                              80,
                              53,
                              200,
                              125,
                              1,
                              12,
                              0,
                              178,
                              50,
                              129,
                              242,
                              255,
                              242,
                              116,
                              0,
                              96,
                              64,
                              66,
                              61,
                              2,
                              155,
                              232,
                              76,
                              96,
                              2,
                              1,
                              32,
                              14,
                              15,
                              0,
                              25,
                              173,
                              206,
                              118,
                              162,
                              104,
                              64,
                              32,
                              107,
                              144,
                              235,
                              133,
                              255,
                              192,
                              0,
                              25,
                              175,
                              29,
                              246,
                              162,
                              104,
                              64,
                              16,
                              107,
                              144,
                              235,
                              133,
                              143,
                              192,
                              0,
                              110,
                              210,
                              7,
                              250,
                              0,
                              212,
                              212,
                              34,
                              249,
                              0,
                              5,
                              200,
                              202,
                              7,
                              21,
                              203,
                              255,
                              201,
                              208,
                              119,
                              116,
                              128,
                              24,
                              200,
                              203,
                              5,
                              203,
                              2,
                              34,
                              207,
                              22,
                              80,
                              5,
                              250,
                              2,
                              20,
                              203,
                              107,
                              18,
                              204,
                              204,
                              201,
                              115,
                              251,
                              0,
                              200,
                              64,
                              20,
                              129,
                              1,
                              8,
                              244,
                              81,
                              242,
                              167,
                              2,
                              0,
                              112,
                              129,
                              1,
                              8,
                              215,
                              24,
                              250,
                              0,
                              211,
                              63,
                              200,
                              84,
                              32,
                              71,
                              129,
                              1,
                              8,
                              244,
                              81,
                              242,
                              167,
                              130,
                              16,
                              110,
                              111,
                              116,
                              101,
                              112,
                              116,
                              128,
                              24,
                              200,
                              203,
                              5,
                              203,
                              2,
                              80,
                              6,
                              207,
                              22,
                              80,
                              4,
                              250,
                              2,
                              20,
                              203,
                              106,
                              18,
                              203,
                              31,
                              203,
                              63,
                              201,
                              115,
                              251,
                              0,
                              2,
                              0,
                              108,
                              129,
                              1,
                              8,
                              215,
                              24,
                              250,
                              0,
                              211,
                              63,
                              48,
                              82,
                              36,
                              129,
                              1,
                              8,
                              244,
                              89,
                              242,
                              167,
                              130,
                              16,
                              100,
                              115,
                              116,
                              114,
                              112,
                              116,
                              128,
                              24,
                              200,
                              203,
                              5,
                              203,
                              2,
                              80,
                              5,
                              207,
                              22,
                              80,
                              3,
                              250,
                              2,
                              19,
                              203,
                              106,
                              203,
                              31,
                              18,
                              203,
                              63,
                              201,
                              115,
                              251,
                              0,
                              0,
                              10,
                              244,
                              0,
                              201,
                              237,
                              84,
                            ],
                            "type": "Buffer",
                          },
                          "_length": 480,
                          "_offset": 2232,
                          Symbol(nodejs.util.inspect.custom): [Function],
                        },
                        "depth": [Function],
                        "equals": [Function],
                        "hash": [Function],
                        "level": [Function],
                        "mask": LevelMask {
                          "_hashCount": 1,
                          "_hashIndex": 0,
                          "_mask": 0,
                        },
                        "refs": [],
                        "type": -1,
                        Symbol(nodejs.util.inspect.custom): [Function],
                      },
                      Cell {
                        "_depths": [
                          0,
                          0,
                          0,
                          0,
                        ],
                        "_hashes": [
                          {
                            "data": [
                              72,
                              201,
                              41,
                              17,
                              121,
                              18,
                              81,
                              26,
                              113,
                              140,
                              128,
                              113,
                              144,
                              57,
                              76,
                              131,
                              91,
                              224,
                              205,
                              234,
                              246,
                              22,
                              4,
                              144,
                              225,
                              193,
                              248,
                              120,
                              118,
                              173,
                              186,
                              218,
                            ],
                            "type": "Buffer",
                          },
                          {
                            "data": [
                              72,
                              201,
                              41,
                              17,
                              121,
                              18,
                              81,
                              26,
                              113,
                              140,
                              128,
                              113,
                              144,
                              57,
                              76,
                              131,
                              91,
                              224,
                              205,
                              234,
                              246,
                              22,
                              4,
                              144,
                              225,
                              193,
                              248,
                              120,
                              118,
                              173,
                              186,
                              218,
                            ],
                            "type": "Buffer",
                          },
                          {
                            "data": [
                              72,
                              201,
                              41,
                              17,
                              121,
                              18,
                              81,
                              26,
                              113,
                              140,
                              128,
                              113,
                              144,
                              57,
                              76,
                              131,
                              91,
                              224,
                              205,
                              234,
                              246,
                              22,
                              4,
                              144,
                              225,
                              193,
                              248,
                              120,
                              118,
                              173,
                              186,
                              218,
                            ],
                            "type": "Buffer",
                          },
                          {
                            "data": [
                              72,
                              201,
                              41,
                              17,
                              121,
                              18,
                              81,
                              26,
                              113,
                              140,
                              128,
                              113,
                              144,
                              57,
                              76,
                              131,
                              91,
                              224,
                              205,
                              234,
                              246,
                              22,
                              4,
                              144,
                              225,
                              193,
                              248,
                              120,
                              118,
                              173,
                              186,
                              218,
                            ],
                            "type": "Buffer",
                          },
                        ],
                        "beginParse": [Function],
                        "bits": BitString {
                          "_data": {
                            "data": [
                              1,
                              20,
                              255,
                              0,
                              244,
                              164,
                              19,
                              244,
                              188,
                              242,
                              200,
                              11,
                              1,
                              2,
                              1,
                              32,
                              2,
                              3,
                              2,
                              1,
                              72,
                              4,
                              5,
                              4,
                              248,
                              242,
                              131,
                              8,
                              215,
                              24,
                              32,
                              211,
                              31,
                              211,
                              31,
                              211,
                              31,
                              2,
                              248,
                              35,
                              187,
                              242,
                              100,
                              237,
                              68,
                              208,
                              211,
                              31,
                              211,
                              31,
                              211,
                              255,
                              244,
                              4,
                              209,
                              81,
                              67,
                              186,
                              242,
                              161,
                              81,
                              81,
                              186,
                              242,
                              162,
                              5,
                              249,
                              1,
                              84,
                              16,
                              100,
                              249,
                              16,
                              242,
                              163,
                              248,
                              0,
                              36,
                              164,
                              200,
                              203,
                              31,
                              82,
                              64,
                              203,
                              31,
                              82,
                              48,
                              203,
                              255,
                              82,
                              16,
                              244,
                              0,
                              201,
                              237,
                              84,
                              248,
                              15,
                              1,
                              211,
                              7,
                              33,
                              192,
                              0,
                              159,
                              108,
                              81,
                              147,
                              32,
                              215,
                              74,
                              150,
                              211,
                              7,
                              212,
                              2,
                              251,
                              0,
                              232,
                              48,
                              224,
                              33,
                              192,
                              1,
                              227,
                              0,
                              33,
                              192,
                              2,
                              227,
                              0,
                              1,
                              192,
                              3,
                              145,
                              48,
                              227,
                              13,
                              3,
                              164,
                              200,
                              203,
                              31,
                              18,
                              203,
                              31,
                              203,
                              255,
                              16,
                              17,
                              18,
                              19,
                              2,
                              230,
                              208,
                              1,
                              208,
                              211,
                              3,
                              33,
                              113,
                              176,
                              146,
                              95,
                              4,
                              224,
                              34,
                              215,
                              73,
                              193,
                              32,
                              146,
                              95,
                              4,
                              224,
                              2,
                              211,
                              31,
                              33,
                              130,
                              16,
                              112,
                              108,
                              117,
                              103,
                              189,
                              34,
                              130,
                              16,
                              100,
                              115,
                              116,
                              114,
                              189,
                              176,
                              146,
                              95,
                              5,
                              224,
                              3,
                              250,
                              64,
                              48,
                              32,
                              250,
                              68,
                              1,
                              200,
                              202,
                              7,
                              203,
                              255,
                              201,
                              208,
                              237,
                              68,
                              208,
                              129,
                              1,
                              64,
                              215,
                              33,
                              244,
                              4,
                              48,
                              92,
                              129,
                              1,
                              8,
                              244,
                              10,
                              111,
                              161,
                              49,
                              179,
                              146,
                              95,
                              7,
                              224,
                              5,
                              211,
                              63,
                              200,
                              37,
                              130,
                              16,
                              112,
                              108,
                              117,
                              103,
                              186,
                              146,
                              56,
                              48,
                              227,
                              13,
                              3,
                              130,
                              16,
                              100,
                              115,
                              116,
                              114,
                              186,
                              146,
                              95,
                              6,
                              227,
                              13,
                              6,
                              7,
                              2,
                              1,
                              32,
                              8,
                              9,
                              0,
                              120,
                              1,
                              250,
                              0,
                              244,
                              4,
                              48,
                              248,
                              39,
                              111,
                              34,
                              48,
                              80,
                              10,
                              161,
                              33,
                              190,
                              242,
                              224,
                              80,
                              130,
                              16,
                              112,
                              108,
                              117,
                              103,
                              131,
                              30,
                              177,
                              112,
                              128,
                              24,
                              80,
                              4,
                              203,
                              5,
                              38,
                              207,
                              22,
                              88,
                              250,
                              2,
                              25,
                              244,
                              0,
                              203,
                              105,
                              23,
                              203,
                              31,
                              82,
                              96,
                              203,
                              63,
                              32,
                              201,
                              128,
                              64,
                              251,
                              0,
                              6,
                              0,
                              138,
                              80,
                              4,
                              129,
                              1,
                              8,
                              244,
                              89,
                              48,
                              237,
                              68,
                              208,
                              129,
                              1,
                              64,
                              215,
                              32,
                              200,
                              1,
                              207,
                              22,
                              244,
                              0,
                              201,
                              237,
                              84,
                              1,
                              114,
                              176,
                              142,
                              35,
                              130,
                              16,
                              100,
                              115,
                              116,
                              114,
                              131,
                              30,
                              177,
                              112,
                              128,
                              24,
                              80,
                              5,
                              203,
                              5,
                              80,
                              3,
                              207,
                              22,
                              35,
                              250,
                              2,
                              19,
                              203,
                              106,
                              203,
                              31,
                              203,
                              63,
                              201,
                              128,
                              64,
                              251,
                              0,
                              146,
                              95,
                              3,
                              226,
                              2,
                              1,
                              32,
                              10,
                              11,
                              0,
                              89,
                              189,
                              36,
                              43,
                              111,
                              106,
                              38,
                              132,
                              8,
                              10,
                              6,
                              185,
                              15,
                              160,
                              33,
                              132,
                              112,
                              212,
                              8,
                              8,
                              71,
                              164,
                              147,
                              125,
                              41,
                              145,
                              12,
                              230,
                              144,
                              62,
                              159,
                              249,
                              131,
                              120,
                              18,
                              128,
                              27,
                              120,
                              16,
                              20,
                              137,
                              135,
                              21,
                              159,
                              49,
                              132,
                              2,
                              1,
                              88,
                              12,
                              13,
                              0,
                              17,
                              184,
                              201,
                              126,
                              212,
                              77,
                              13,
                              112,
                              177,
                              248,
                              0,
                              61,
                              178,
                              157,
                              251,
                              81,
                              52,
                              32,
                              64,
                              80,
                              53,
                              200,
                              125,
                              1,
                              12,
                              0,
                              178,
                              50,
                              129,
                              242,
                              255,
                              242,
                              116,
                              0,
                              96,
                              64,
                              66,
                              61,
                              2,
                              155,
                              232,
                              76,
                              96,
                              2,
                              1,
                              32,
                              14,
                              15,
                              0,
                              25,
                              173,
                              206,
                              118,
                              162,
                              104,
                              64,
                              32,
                              107,
                              144,
                              235,
                              133,
                              255,
                              192,
                              0,
                              25,
                              175,
                              29,
                              246,
                              162,
                              104,
                              64,
                              16,
                              107,
                              144,
                              235,
                              133,
                              143,
                              192,
                              0,
                              110,
                              210,
                              7,
                              250,
                              0,
                              212,
                              212,
                              34,
                              249,
                              0,
                              5,
                              200,
                              202,
                              7,
                              21,
                              203,
                              255,
                              201,
                              208,
                              119,
                              116,
                              128,
                              24,
                              200,
                              203,
                              5,
                              203,
                              2,
                              34,
                              207,
                              22,
                              80,
                              5,
                              250,
                              2,
                              20,
                              203,
                              107,
                              18,
                              204,
                              204,
                              201,
                              115,
                              251,
                              0,
                              200,
                              64,
                              20,
                              129,
                              1,
                              8,
                              244,
                              81,
                              242,
                              167,
                              2,
                              0,
                              112,
                              129,
                              1,
                              8,
                              215,
                              24,
                              250,
                              0,
                              211,
                              63,
                              200,
                              84,
                              32,
                              71,
                              129,
                              1,
                              8,
                              244,
                              81,
                              242,
                              167,
                              130,
                              16,
                              110,
                              111,
                              116,
                              101,
                              112,
                              116,
                              128,
                              24,
                              200,
                              203,
                              5,
                              203,
                              2,
                              80,
                              6,
                              207,
                              22,
                              80,
                              4,
                              250,
                              2,
                              20,
                              203,
                              106,
                              18,
                              203,
                              31,
                              203,
                              63,
                              201,
                              115,
                              251,
                              0,
                              2,
                              0,
                              108,
                              129,
                              1,
                              8,
                              215,
                              24,
                              250,
                              0,
                              211,
                              63,
                              48,
                              82,
                              36,
                              129,
                              1,
                              8,
                              244,
                              89,
                              242,
                              167,
                              130,
                              16,
                              100,
                              115,
                              116,
                              114,
                              112,
                              116,
                              128,
                              24,
                              200,
                              203,
                              5,
                              203,
                              2,
                              80,
                              5,
                              207,
                              22,
                              80,
                              3,
                              250,
                              2,
                              19,
                              203,
                              106,
                              203,
                              31,
                              18,
                              203,
                              63,
                              201,
                              115,
                              251,
                              0,
                              0,
                              10,
                              244,
                              0,
                              201,
                              237,
                              84,
                            ],
                            "type": "Buffer",
                          },
                          "_length": 552,
                          "_offset": 2728,
                          Symbol(nodejs.util.inspect.custom): [Function],
                        },
                        "depth": [Function],
                        "equals": [Function],
                        "hash": [Function],
                        "level": [Function],
                        "mask": LevelMask {
                          "_hashCount": 1,
                          "_hashIndex": 0,
                          "_mask": 0,
                        },
                        "refs": [],
                        "type": -1,
                        Symbol(nodejs.util.inspect.custom): [Function],
                      },
                    ],
                    "type": -1,
                    Symbol(nodejs.util.inspect.custom): [Function],
                  },
                  Cell {
                    "_depths": [
                      4,
                      4,
                      4,
                      4,
                    ],
                    "_hashes": [
                      {
                        "data": [
                          130,
                          121,
                          38,
                          110,
                          153,
                          221,
                          234,
                          185,
                          198,
                          175,
                          158,
                          124,
                          37,
                          79,
                          23,
                          51,
                          44,
                          122,
                          1,
                          138,
                          180,
                          38,
                          31,
                          138,
                          237,
                          132,
                          253,
                          171,
                          183,
                          208,
                          103,
                          255,
                        ],
                        "type": "Buffer",
                      },
                      {
                        "data": [
                          130,
                          121,
                          38,
                          110,
                          153,
                          221,
                          234,
                          185,
                          198,
                          175,
                          158,
                          124,
                          37,
                          79,
                          23,
                          51,
                          44,
                          122,
                          1,
                          138,
                          180,
                          38,
                          31,
                          138,
                          237,
                          132,
                          253,
                          171,
                          183,
                          208,
                          103,
                          255,
                        ],
                        "type": "Buffer",
                      },
                      {
                        "data": [
                          130,
                          121,
                          38,
                          110,
                          153,
                          221,
                          234,
                          185,
                          198,
                          175,
                          158,
                          124,
                          37,
                          79,
                          23,
                          51,
                          44,
                          122,
                          1,
                          138,
                          180,
                          38,
                          31,
                          138,
                          237,
                          132,
                          253,
                          171,
                          183,
                          208,
                          103,
                          255,
                        ],
                        "type": "Buffer",
                      },
                      {
                        "data": [
                          130,
                          121,
                          38,
                          110,
                          153,
                          221,
                          234,
                          185,
                          198,
                          175,
                          158,
                          124,
                          37,
                          79,
                          23,
                          51,
                          44,
                          122,
                          1,
                          138,
                          180,
                          38,
                          31,
                          138,
                          237,
                          132,
                          253,
                          171,
                          183,
                          208,
                          103,
                          255,
                        ],
                        "type": "Buffer",
                      },
                    ],
                    "beginParse": [Function],
                    "bits": BitString {
                      "_data": {
                        "data": [
                          1,
                          20,
                          255,
                          0,
                          244,
                          164,
                          19,
                          244,
                          188,
                          242,
                          200,
                          11,
                          1,
                          2,
                          1,
                          32,
                          2,
                          3,
                          2,
                          1,
                          72,
                          4,
                          5,
                          4,
                          248,
                          242,
                          131,
                          8,
                          215,
                          24,
                          32,
                          211,
                          31,
                          211,
                          31,
                          211,
                          31,
                          2,
                          248,
                          35,
                          187,
                          242,
                          100,
                          237,
                          68,
                          208,
                          211,
                          31,
                          211,
                          31,
                          211,
                          255,
                          244,
                          4,
                          209,
                          81,
                          67,
                          186,
                          242,
                          161,
                          81,
                          81,
                          186,
                          242,
                          162,
                          5,
                          249,
                          1,
                          84,
                          16,
                          100,
                          249,
                          16,
                          242,
                          163,
                          248,
                          0,
                          36,
                          164,
                          200,
                          203,
                          31,
                          82,
                          64,
                          203,
                          31,
                          82,
                          48,
                          203,
                          255,
                          82,
                          16,
                          244,
                          0,
                          201,
                          237,
                          84,
                          248,
                          15,
                          1,
                          211,
                          7,
                          33,
                          192,
                          0,
                          159,
                          108,
                          81,
                          147,
                          32,
                          215,
                          74,
                          150,
                          211,
                          7,
                          212,
                          2,
                          251,
                          0,
                          232,
                          48,
                          224,
                          33,
                          192,
                          1,
                          227,
                          0,
                          33,
                          192,
                          2,
                          227,
                          0,
                          1,
                          192,
                          3,
                          145,
                          48,
                          227,
                          13,
                          3,
                          164,
                          200,
                          203,
                          31,
                          18,
                          203,
                          31,
                          203,
                          255,
                          16,
                          17,
                          18,
                          19,
                          2,
                          230,
                          208,
                          1,
                          208,
                          211,
                          3,
                          33,
                          113,
                          176,
                          146,
                          95,
                          4,
                          224,
                          34,
                          215,
                          73,
                          193,
                          32,
                          146,
                          95,
                          4,
                          224,
                          2,
                          211,
                          31,
                          33,
                          130,
                          16,
                          112,
                          108,
                          117,
                          103,
                          189,
                          34,
                          130,
                          16,
                          100,
                          115,
                          116,
                          114,
                          189,
                          176,
                          146,
                          95,
                          5,
                          224,
                          3,
                          250,
                          64,
                          48,
                          32,
                          250,
                          68,
                          1,
                          200,
                          202,
                          7,
                          203,
                          255,
                          201,
                          208,
                          237,
                          68,
                          208,
                          129,
                          1,
                          64,
                          215,
                          33,
                          244,
                          4,
                          48,
                          92,
                          129,
                          1,
                          8,
                          244,
                          10,
                          111,
                          161,
                          49,
                          179,
                          146,
                          95,
                          7,
                          224,
                          5,
                          211,
                          63,
                          200,
                          37,
                          130,
                          16,
                          112,
                          108,
                          117,
                          103,
                          186,
                          146,
                          56,
                          48,
                          227,
                          13,
                          3,
                          130,
                          16,
                          100,
                          115,
                          116,
                          114,
                          186,
                          146,
                          95,
                          6,
                          227,
                          13,
                          6,
                          7,
                          2,
                          1,
                          32,
                          8,
                          9,
                          0,
                          120,
                          1,
                          250,
                          0,
                          244,
                          4,
                          48,
                          248,
                          39,
                          111,
                          34,
                          48,
                          80,
                          10,
                          161,
                          33,
                          190,
                          242,
                          224,
                          80,
                          130,
                          16,
                          112,
                          108,
                          117,
                          103,
                          131,
                          30,
                          177,
                          112,
                          128,
                          24,
                          80,
                          4,
                          203,
                          5,
                          38,
                          207,
                          22,
                          88,
                          250,
                          2,
                          25,
                          244,
                          0,
                          203,
                          105,
                          23,
                          203,
                          31,
                          82,
                          96,
                          203,
                          63,
                          32,
                          201,
                          128,
                          64,
                          251,
                          0,
                          6,
                          0,
                          138,
                          80,
                          4,
                          129,
                          1,
                          8,
                          244,
                          89,
                          48,
                          237,
                          68,
                          208,
                          129,
                          1,
                          64,
                          215,
                          32,
                          200,
                          1,
                          207,
                          22,
                          244,
                          0,
                          201,
                          237,
                          84,
                          1,
                          114,
                          176,
                          142,
                          35,
                          130,
                          16,
                          100,
                          115,
                          116,
                          114,
                          131,
                          30,
                          177,
                          112,
                          128,
                          24,
                          80,
                          5,
                          203,
                          5,
                          80,
                          3,
                          207,
                          22,
                          35,
                          250,
                          2,
                          19,
                          203,
                          106,
                          203,
                          31,
                          203,
                          63,
                          201,
                          128,
                          64,
                          251,
                          0,
                          146,
                          95,
                          3,
                          226,
                          2,
                          1,
                          32,
                          10,
                          11,
                          0,
                          89,
                          189,
                          36,
                          43,
                          111,
                          106,
                          38,
                          132,
                          8,
                          10,
                          6,
                          185,
                          15,
                          160,
                          33,
                          132,
                          112,
                          212,
                          8,
                          8,
                          71,
                          164,
                          147,
                          125,
                          41,
                          145,
                          12,
                          230,
                          144,
                          62,
                          159,
                          249,
                          131,
                          120,
                          18,
                          128,
                          27,
                          120,
                          16,
                          20,
                          137,
                          135,
                          21,
                          159,
                          49,
                          132,
                          2,
                          1,
                          88,
                          12,
                          13,
                          0,
                          17,
                          184,
                          201,
                          126,
                          212,
                          77,
                          13,
                          112,
                          177,
                          248,
                          0,
                          61,
                          178,
                          157,
                          251,
                          81,
                          52,
                          32,
                          64,
                          80,
                          53,
                          200,
                          125,
                          1,
                          12,
                          0,
                          178,
                          50,
                          129,
                          242,
                          255,
                          242,
                          116,
                          0,
                          96,
                          64,
                          66,
                          61,
                          2,
                          155,
                          232,
                          76,
                          96,
                          2,
                          1,
                          32,
                          14,
                          15,
                          0,
                          25,
                          173,
                          206,
                          118,
                          162,
                          104,
                          64,
                          32,
                          107,
                          144,
                          235,
                          133,
                          255,
                          192,
                          0,
                          25,
                          175,
                          29,
                          246,
                          162,
                          104,
                          64,
                          16,
                          107,
                          144,
                          235,
                          133,
                          143,
                          192,
                          0,
                          110,
                          210,
                          7,
                          250,
                          0,
                          212,
                          212,
                          34,
                          249,
                          0,
                          5,
                          200,
                          202,
                          7,
                          21,
                          203,
                          255,
                          201,
                          208,
                          119,
                          116,
                          128,
                          24,
                          200,
                          203,
                          5,
                          203,
                          2,
                          34,
                          207,
                          22,
                          80,
                          5,
                          250,
                          2,
                          20,
                          203,
                          107,
                          18,
                          204,
                          204,
                          201,
                          115,
                          251,
                          0,
                          200,
                          64,
                          20,
                          129,
                          1,
                          8,
                          244,
                          81,
                          242,
                          167,
                          2,
                          0,
                          112,
                          129,
                          1,
                          8,
                          215,
                          24,
                          250,
                          0,
                          211,
                          63,
                          200,
                          84,
                          32,
                          71,
                          129,
                          1,
                          8,
                          244,
                          81,
                          242,
                          167,
                          130,
                          16,
                          110,
                          111,
                          116,
                          101,
                          112,
                          116,
                          128,
                          24,
                          200,
                          203,
                          5,
                          203,
                          2,
                          80,
                          6,
                          207,
                          22,
                          80,
                          4,
                          250,
                          2,
                          20,
                          203,
                          106,
                          18,
                          203,
                          31,
                          203,
                          63,
                          201,
                          115,
                          251,
                          0,
                          2,
                          0,
                          108,
                          129,
                          1,
                          8,
                          215,
                          24,
                          250,
                          0,
                          211,
                          63,
                          48,
                          82,
                          36,
                          129,
                          1,
                          8,
                          244,
                          89,
                          242,
                          167,
                          130,
                          16,
                          100,
                          115,
                          116,
                          114,
                          112,
                          116,
                          128,
                          24,
                          200,
                          203,
                          5,
                          203,
                          2,
                          80,
                          5,
                          207,
                          22,
                          80,
                          3,
                          250,
                          2,
                          19,
                          203,
                          106,
                          203,
                          31,
                          18,
                          203,
                          63,
                          201,
                          115,
                          251,
                          0,
                          0,
                          10,
                          244,
                          0,
                          201,
                          237,
                          84,
                        ],
                        "type": "Buffer",
                      },
                      "_length": 2,
                      "_offset": 2192,
                      Symbol(nodejs.util.inspect.custom): [Function],
                    },
                    "depth": [Function],
                    "equals": [Function],
                    "hash": [Function],
                    "level": [Function],
                    "mask": LevelMask {
                      "_hashCount": 1,
                      "_hashIndex": 0,
                      "_mask": 0,
                    },
                    "refs": [
                      Cell {
                        "_depths": [
                          3,
                          3,
                          3,
                          3,
                        ],
                        "_hashes": [
                          {
                            "data": [
                              253,
                              253,
                              83,
                              132,
                              48,
                              22,
                              73,
                              188,
                              28,
                              55,
                              83,
                              228,
                              81,
                              130,
                              113,
                              146,
                              167,
                              182,
                              74,
                              168,
                              92,
                              131,
                              218,
                              126,
                              99,
                              16,
                              30,
                              83,
                              194,
                              40,
                              13,
                              201,
                            ],
                            "type": "Buffer",
                          },
                          {
                            "data": [
                              253,
                              253,
                              83,
                              132,
                              48,
                              22,
                              73,
                              188,
                              28,
                              55,
                              83,
                              228,
                              81,
                              130,
                              113,
                              146,
                              167,
                              182,
                              74,
                              168,
                              92,
                              131,
                              218,
                              126,
                              99,
                              16,
                              30,
                              83,
                              194,
                              40,
                              13,
                              201,
                            ],
                            "type": "Buffer",
                          },
                          {
                            "data": [
                              253,
                              253,
                              83,
                              132,
                              48,
                              22,
                              73,
                              188,
                              28,
                              55,
                              83,
                              228,
                              81,
                              130,
                              113,
                              146,
                              167,
                              182,
                              74,
                              168,
                              92,
                              131,
                              218,
                              126,
                              99,
                              16,
                              30,
                              83,
                              194,
                              40,
                              13,
                              201,
                            ],
                            "type": "Buffer",
                          },
                          {
                            "data": [
                              253,
                              253,
                              83,
                              132,
                              48,
                              22,
                              73,
                              188,
                              28,
                              55,
                              83,
                              228,
                              81,
                              130,
                              113,
                              146,
                              167,
                              182,
                              74,
                              168,
                              92,
                              131,
                              218,
                              126,
                              99,
                              16,
                              30,
                              83,
                              194,
                              40,
                              13,
                              201,
                            ],
                            "type": "Buffer",
                          },
                        ],
                        "beginParse": [Function],
                        "bits": BitString {
                          "_data": {
                            "data": [
                              1,
                              20,
                              255,
                              0,
                              244,
                              164,
                              19,
                              244,
                              188,
                              242,
                              200,
                              11,
                              1,
                              2,
                              1,
                              32,
                              2,
                              3,
                              2,
                              1,
                              72,
                              4,
                              5,
                              4,
                              248,
                              242,
                              131,
                              8,
                              215,
                              24,
                              32,
                              211,
                              31,
                              211,
                              31,
                              211,
                              31,
                              2,
                              248,
                              35,
                              187,
                              242,
                              100,
                              237,
                              68,
                              208,
                              211,
                              31,
                              211,
                              31,
                              211,
                              255,
                              244,
                              4,
                              209,
                              81,
                              67,
                              186,
                              242,
                              161,
                              81,
                              81,
                              186,
                              242,
                              162,
                              5,
                              249,
                              1,
                              84,
                              16,
                              100,
                              249,
                              16,
                              242,
                              163,
                              248,
                              0,
                              36,
                              164,
                              200,
                              203,
                              31,
                              82,
                              64,
                              203,
                              31,
                              82,
                              48,
                              203,
                              255,
                              82,
                              16,
                              244,
                              0,
                              201,
                              237,
                              84,
                              248,
                              15,
                              1,
                              211,
                              7,
                              33,
                              192,
                              0,
                              159,
                              108,
                              81,
                              147,
                              32,
                              215,
                              74,
                              150,
                              211,
                              7,
                              212,
                              2,
                              251,
                              0,
                              232,
                              48,
                              224,
                              33,
                              192,
                              1,
                              227,
                              0,
                              33,
                              192,
                              2,
                              227,
                              0,
                              1,
                              192,
                              3,
                              145,
                              48,
                              227,
                              13,
                              3,
                              164,
                              200,
                              203,
                              31,
                              18,
                              203,
                              31,
                              203,
                              255,
                              16,
                              17,
                              18,
                              19,
                              2,
                              230,
                              208,
                              1,
                              208,
                              211,
                              3,
                              33,
                              113,
                              176,
                              146,
                              95,
                              4,
                              224,
                              34,
                              215,
                              73,
                              193,
                              32,
                              146,
                              95,
                              4,
                              224,
                              2,
                              211,
                              31,
                              33,
                              130,
                              16,
                              112,
                              108,
                              117,
                              103,
                              189,
                              34,
                              130,
                              16,
                              100,
                              115,
                              116,
                              114,
                              189,
                              176,
                              146,
                              95,
                              5,
                              224,
                              3,
                              250,
                              64,
                              48,
                              32,
                              250,
                              68,
                              1,
                              200,
                              202,
                              7,
                              203,
                              255,
                              201,
                              208,
                              237,
                              68,
                              208,
                              129,
                              1,
                              64,
                              215,
                              33,
                              244,
                              4,
                              48,
                              92,
                              129,
                              1,
                              8,
                              244,
                              10,
                              111,
                              161,
                              49,
                              179,
                              146,
                              95,
                              7,
                              224,
                              5,
                              211,
                              63,
                              200,
                              37,
                              130,
                              16,
                              112,
                              108,
                              117,
                              103,
                              186,
                              146,
                              56,
                              48,
                              227,
                              13,
                              3,
                              130,
                              16,
                              100,
                              115,
                              116,
                              114,
                              186,
                              146,
                              95,
                              6,
                              227,
                              13,
                              6,
                              7,
                              2,
                              1,
                              32,
                              8,
                              9,
                              0,
                              120,
                              1,
                              250,
                              0,
                              244,
                              4,
                              48,
                              248,
                              39,
                              111,
                              34,
                              48,
                              80,
                              10,
                              161,
                              33,
                              190,
                              242,
                              224,
                              80,
                              130,
                              16,
                              112,
                              108,
                              117,
                              103,
                              131,
                              30,
                              177,
                              112,
                              128,
                              24,
                              80,
                              4,
                              203,
                              5,
                              38,
                              207,
                              22,
                              88,
                              250,
                              2,
                              25,
                              244,
                              0,
                              203,
                              105,
                              23,
                              203,
                              31,
                              82,
                              96,
                              203,
                              63,
                              32,
                              201,
                              128,
                              64,
                              251,
                              0,
                              6,
                              0,
                              138,
                              80,
                              4,
                              129,
                              1,
                              8,
                              244,
                              89,
                              48,
                              237,
                              68,
                              208,
                              129,
                              1,
                              64,
                              215,
                              32,
                              200,
                              1,
                              207,
                              22,
                              244,
                              0,
                              201,
                              237,
                              84,
                              1,
                              114,
                              176,
                              142,
                              35,
                              130,
                              16,
                              100,
                              115,
                              116,
                              114,
                              131,
                              30,
                              177,
                              112,
                              128,
                              24,
                              80,
                              5,
                              203,
                              5,
                              80,
                              3,
                              207,
                              22,
                              35,
                              250,
                              2,
                              19,
                              203,
                              106,
                              203,
                              31,
                              203,
                              63,
                              201,
                              128,
                              64,
                              251,
                              0,
                              146,
                              95,
                              3,
                              226,
                              2,
                              1,
                              32,
                              10,
                              11,
                              0,
                              89,
                              189,
                              36,
                              43,
                              111,
                              106,
                              38,
                              132,
                              8,
                              10,
                              6,
                              185,
                              15,
                              160,
                              33,
                              132,
                              112,
                              212,
                              8,
                              8,
                              71,
                              164,
                              147,
                              125,
                              41,
                              145,
                              12,
                              230,
                              144,
                              62,
                              159,
                              249,
                              131,
                              120,
                              18,
                              128,
                              27,
                              120,
                              16,
                              20,
                              137,
                              135,
                              21,
                              159,
                              49,
                              132,
                              2,
                              1,
                              88,
                              12,
                              13,
                              0,
                              17,
                              184,
                              201,
                              126,
                              212,
                              77,
                              13,
                              112,
                              177,
                              248,
                              0,
                              61,
                              178,
                              157,
                              251,
                              81,
                              52,
                              32,
                              64,
                              80,
                              53,
                              200,
                              125,
                              1,
                              12,
                              0,
                              178,
                              50,
                              129,
                              242,
                              255,
                              242,
                              116,
                              0,
                              96,
                              64,
                              66,
                              61,
                              2,
                              155,
                              232,
                              76,
                              96,
                              2,
                              1,
                              32,
                              14,
                              15,
                              0,
                              25,
                              173,
                              206,
                              118,
                              162,
                              104,
                              64,
                              32,
                              107,
                              144,
                              235,
                              133,
                              255,
                              192,
                              0,
                              25,
                              175,
                              29,
                              246,
                              162,
                              104,
                              64,
                              16,
                              107,
                              144,
                              235,
                              133,
                              143,
                              192,
                              0,
                              110,
                              210,
                              7,
                              250,
                              0,
                              212,
                              212,
                              34,
                              249,
                              0,
                              5,
                              200,
                              202,
                              7,
                              21,
                              203,
                              255,
                              201,
                              208,
                              119,
                              116,
                              128,
                              24,
                              200,
                              203,
                              5,
                              203,
                              2,
                              34,
                              207,
                              22,
                              80,
                              5,
                              250,
                              2,
                              20,
                              203,
                              107,
                              18,
                              204,
                              204,
                              201,
                              115,
                              251,
                              0,
                              200,
                              64,
                              20,
                              129,
                              1,
                              8,
                              244,
                              81,
                              242,
                              167,
                              2,
                              0,
                              112,
                              129,
                              1,
                              8,
                              215,
                              24,
                              250,
                              0,
                              211,
                              63,
                              200,
                              84,
                              32,
                              71,
                              129,
                              1,
                              8,
                              244,
                              81,
                              242,
                              167,
                              130,
                              16,
                              110,
                              111,
                              116,
                              101,
                              112,
                              116,
                              128,
                              24,
                              200,
                              203,
                              5,
                              203,
                              2,
                              80,
                              6,
                              207,
                              22,
                              80,
                              4,
                              250,
                              2,
                              20,
                              203,
                              106,
                              18,
                              203,
                              31,
                              203,
                              63,
                              201,
                              115,
                              251,
                              0,
                              2,
                              0,
                              108,
                              129,
                              1,
                              8,
                              215,
                              24,
                              250,
                              0,
                              211,
                              63,
                              48,
                              82,
                              36,
                              129,
                              1,
                              8,
                              244,
                              89,
                              242,
                              167,
                              130,
                              16,
                              100,
                              115,
                              116,
                              114,
                              112,
                              116,
                              128,
                              24,
                              200,
                              203,
                              5,
                              203,
                              2,
                              80,
                              5,
                              207,
                              22,
                              80,
                              3,
                              250,
                              2,
                              19,
                              203,
                              106,
                              203,
                              31,
                              18,
                              203,
                              63,
                              201,
                              115,
                              251,
                              0,
                              0,
                              10,
                              244,
                              0,
                              201,
                              237,
                              84,
                            ],
                            "type": "Buffer",
                          },
                          "_length": 2,
                          "_offset": 3296,
                          Symbol(nodejs.util.inspect.custom): [Function],
                        },
                        "depth": [Function],
                        "equals": [Function],
                        "hash": [Function],
                        "level": [Function],
                        "mask": LevelMask {
                          "_hashCount": 1,
                          "_hashIndex": 0,
                          "_mask": 0,
                        },
                        "refs": [
                          Cell {
                            "_depths": [
                              2,
                              2,
                              2,
                              2,
                            ],
                            "_hashes": [
                              {
                                "data": [
                                  5,
                                  15,
                                  247,
                                  107,
                                  220,
                                  161,
                                  133,
                                  208,
                                  220,
                                  226,
                                  120,
                                  31,
                                  241,
                                  59,
                                  254,
                                  53,
                                  42,
                                  62,
                                  252,
                                  26,
                                  142,
                                  18,
                                  118,
                                  166,
                                  172,
                                  91,
                                  195,
                                  139,
                                  164,
                                  179,
                                  214,
                                  126,
                                ],
                                "type": "Buffer",
                              },
                              {
                                "data": [
                                  5,
                                  15,
                                  247,
                                  107,
                                  220,
                                  161,
                                  133,
                                  208,
                                  220,
                                  226,
                                  120,
                                  31,
                                  241,
                                  59,
                                  254,
                                  53,
                                  42,
                                  62,
                                  252,
                                  26,
                                  142,
                                  18,
                                  118,
                                  166,
                                  172,
                                  91,
                                  195,
                                  139,
                                  164,
                                  179,
                                  214,
                                  126,
                                ],
                                "type": "Buffer",
                              },
                              {
                                "data": [
                                  5,
                                  15,
                                  247,
                                  107,
                                  220,
                                  161,
                                  133,
                                  208,
                                  220,
                                  226,
                                  120,
                                  31,
                                  241,
                                  59,
                                  254,
                                  53,
                                  42,
                                  62,
                                  252,
                                  26,
                                  142,
                                  18,
                                  118,
                                  166,
                                  172,
                                  91,
                                  195,
                                  139,
                                  164,
                                  179,
                                  214,
                                  126,
                                ],
                                "type": "Buffer",
                              },
                              {
                                "data": [
                                  5,
                                  15,
                                  247,
                                  107,
                                  220,
                                  161,
                                  133,
                                  208,
                                  220,
                                  226,
                                  120,
                                  31,
                                  241,
                                  59,
                                  254,
                                  53,
                                  42,
                                  62,
                                  252,
                                  26,
                                  142,
                                  18,
                                  118,
                                  166,
                                  172,
                                  91,
                                  195,
                                  139,
                                  164,
                                  179,
                                  214,
                                  126,
                                ],
                                "type": "Buffer",
                              },
                            ],
                            "beginParse": [Function],
                            "bits": BitString {
                              "_data": {
                                "data": [
                                  1,
                                  20,
                                  255,
                                  0,
                                  244,
                                  164,
                                  19,
                                  244,
                                  188,
                                  242,
                                  200,
                                  11,
                                  1,
                                  2,
                                  1,
                                  32,
                                  2,
                                  3,
                                  2,
                                  1,
                                  72,
                                  4,
                                  5,
                                  4,
                                  248,
                                  242,
                                  131,
                                  8,
                                  215,
                                  24,
                                  32,
                                  211,
                                  31,
                                  211,
                                  31,
                                  211,
                                  31,
                                  2,
                                  248,
                                  35,
                                  187,
                                  242,
                                  100,
                                  237,
                                  68,
                                  208,
                                  211,
                                  31,
                                  211,
                                  31,
                                  211,
                                  255,
                                  244,
                                  4,
                                  209,
                                  81,
                                  67,
                                  186,
                                  242,
                                  161,
                                  81,
                                  81,
                                  186,
                                  242,
                                  162,
                                  5,
                                  249,
                                  1,
                                  84,
                                  16,
                                  100,
                                  249,
                                  16,
                                  242,
                                  163,
                                  248,
                                  0,
                                  36,
                                  164,
                                  200,
                                  203,
                                  31,
                                  82,
                                  64,
                                  203,
                                  31,
                                  82,
                                  48,
                                  203,
                                  255,
                                  82,
                                  16,
                                  244,
                                  0,
                                  201,
                                  237,
                                  84,
                                  248,
                                  15,
                                  1,
                                  211,
                                  7,
                                  33,
                                  192,
                                  0,
                                  159,
                                  108,
                                  81,
                                  147,
                                  32,
                                  215,
                                  74,
                                  150,
                                  211,
                                  7,
                                  212,
                                  2,
                                  251,
                                  0,
                                  232,
                                  48,
                                  224,
                                  33,
                                  192,
                                  1,
                                  227,
                                  0,
                                  33,
                                  192,
                                  2,
                                  227,
                                  0,
                                  1,
                                  192,
                                  3,
                                  145,
                                  48,
                                  227,
                                  13,
                                  3,
                                  164,
                                  200,
                                  203,
                                  31,
                                  18,
                                  203,
                                  31,
                                  203,
                                  255,
                                  16,
                                  17,
                                  18,
                                  19,
                                  2,
                                  230,
                                  208,
                                  1,
                                  208,
                                  211,
                                  3,
                                  33,
                                  113,
                                  176,
                                  146,
                                  95,
                                  4,
                                  224,
                                  34,
                                  215,
                                  73,
                                  193,
                                  32,
                                  146,
                                  95,
                                  4,
                                  224,
                                  2,
                                  211,
                                  31,
                                  33,
                                  130,
                                  16,
                                  112,
                                  108,
                                  117,
                                  103,
                                  189,
                                  34,
                                  130,
                                  16,
                                  100,
                                  115,
                                  116,
                                  114,
                                  189,
                                  176,
                                  146,
                                  95,
                                  5,
                                  224,
                                  3,
                                  250,
                                  64,
                                  48,
                                  32,
                                  250,
                                  68,
                                  1,
                                  200,
                                  202,
                                  7,
                                  203,
                                  255,
                                  201,
                                  208,
                                  237,
                                  68,
                                  208,
                                  129,
                                  1,
                                  64,
                                  215,
                                  33,
                                  244,
                                  4,
                                  48,
                                  92,
                                  129,
                                  1,
                                  8,
                                  244,
                                  10,
                                  111,
                                  161,
                                  49,
                                  179,
                                  146,
                                  95,
                                  7,
                                  224,
                                  5,
                                  211,
                                  63,
                                  200,
                                  37,
                                  130,
                                  16,
                                  112,
                                  108,
                                  117,
                                  103,
                                  186,
                                  146,
                                  56,
                                  48,
                                  227,
                                  13,
                                  3,
                                  130,
                                  16,
                                  100,
                                  115,
                                  116,
                                  114,
                                  186,
                                  146,
                                  95,
                                  6,
                                  227,
                                  13,
                                  6,
                                  7,
                                  2,
                                  1,
                                  32,
                                  8,
                                  9,
                                  0,
                                  120,
                                  1,
                                  250,
                                  0,
                                  244,
                                  4,
                                  48,
                                  248,
                                  39,
                                  111,
                                  34,
                                  48,
                                  80,
                                  10,
                                  161,
                                  33,
                                  190,
                                  242,
                                  224,
                                  80,
                                  130,
                                  16,
                                  112,
                                  108,
                                  117,
                                  103,
                                  131,
                                  30,
                                  177,
                                  112,
                                  128,
                                  24,
                                  80,
                                  4,
                                  203,
                                  5,
                                  38,
                                  207,
                                  22,
                                  88,
                                  250,
                                  2,
                                  25,
                                  244,
                                  0,
                                  203,
                                  105,
                                  23,
                                  203,
                                  31,
                                  82,
                                  96,
                                  203,
                                  63,
                                  32,
                                  201,
                                  128,
                                  64,
                                  251,
                                  0,
                                  6,
                                  0,
                                  138,
                                  80,
                                  4,
                                  129,
                                  1,
                                  8,
                                  244,
                                  89,
                                  48,
                                  237,
                                  68,
                                  208,
                                  129,
                                  1,
                                  64,
                                  215,
                                  32,
                                  200,
                                  1,
                                  207,
                                  22,
                                  244,
                                  0,
                                  201,
                                  237,
                                  84,
                                  1,
                                  114,
                                  176,
                                  142,
                                  35,
                                  130,
                                  16,
                                  100,
                                  115,
                                  116,
                                  114,
                                  131,
                                  30,
                                  177,
                                  112,
                                  128,
                                  24,
                                  80,
                                  5,
                                  203,
                                  5,
                                  80,
                                  3,
                                  207,
                                  22,
                                  35,
                                  250,
                                  2,
                                  19,
                                  203,
                                  106,
                                  203,
                                  31,
                                  203,
                                  63,
                                  201,
                                  128,
                                  64,
                                  251,
                                  0,
                                  146,
                                  95,
                                  3,
                                  226,
                                  2,
                                  1,
                                  32,
                                  10,
                                  11,
                                  0,
                                  89,
                                  189,
                                  36,
                                  43,
                                  111,
                                  106,
                                  38,
                                  132,
                                  8,
                                  10,
                                  6,
                                  185,
                                  15,
                                  160,
                                  33,
                                  132,
                                  112,
                                  212,
                                  8,
                                  8,
                                  71,
                                  164,
                                  147,
                                  125,
                                  41,
                                  145,
                                  12,
                                  230,
                                  144,
                                  62,
                                  159,
                                  249,
                                  131,
                                  120,
                                  18,
                                  128,
                                  27,
                                  120,
                                  16,
                                  20,
                                  137,
                                  135,
                                  21,
                                  159,
                                  49,
                                  132,
                                  2,
                                  1,
                                  88,
                                  12,
                                  13,
                                  0,
                                  17,
                                  184,
                                  201,
                                  126,
                                  212,
                                  77,
                                  13,
                                  112,
                                  177,
                                  248,
                                  0,
                                  61,
                                  178,
                                  157,
                                  251,
                                  81,
                                  52,
                                  32,
                                  64,
                                  80,
                                  53,
                                  200,
                                  125,
                                  1,
                                  12,
                                  0,
                                  178,
                                  50,
                                  129,
                                  242,
                                  255,
                                  242,
                                  116,
                                  0,
                                  96,
                                  64,
                                  66,
                                  61,
                                  2,
                                  155,
                                  232,
                                  76,
                                  96,
                                  2,
                                  1,
                                  32,
                                  14,
                                  15,
                                  0,
                                  25,
                                  173,
                                  206,
                                  118,
                                  162,
                                  104,
                                  64,
                                  32,
                                  107,
                                  144,
                                  235,
                                  133,
                                  255,
                                  192,
                                  0,
                                  25,
                                  175,
                                  29,
                                  246,
                                  162,
                                  104,
                                  64,
                                  16,
                                  107,
                                  144,
                                  235,
                                  133,
                                  143,
                                  192,
                                  0,
                                  110,
                                  210,
                                  7,
                                  250,
                                  0,
                                  212,
                                  212,
                                  34,
                                  249,
                                  0,
                                  5,
                                  200,
                                  202,
                                  7,
                                  21,
                                  203,
                                  255,
                                  201,
                                  208,
                                  119,
                                  116,
                                  128,
                                  24,
                                  200,
                                  203,
                                  5,
                                  203,
                                  2,
                                  34,
                                  207,
                                  22,
                                  80,
                                  5,
                                  250,
                                  2,
                                  20,
                                  203,
                                  107,
                                  18,
                                  204,
                                  204,
                                  201,
                                  115,
                                  251,
                                  0,
                                  200,
                                  64,
                                  20,
                                  129,
                                  1,
                                  8,
                                  244,
                                  81,
                                  242,
                                  167,
                                  2,
                                  0,
                                  112,
                                  129,
                                  1,
                                  8,
                                  215,
                                  24,
                                  250,
                                  0,
                                  211,
                                  63,
                                  200,
                                  84,
                                  32,
                                  71,
                                  129,
                                  1,
                                  8,
                                  244,
                                  81,
                                  242,
                                  167,
                                  130,
                                  16,
                                  110,
                                  111,
                                  116,
                                  101,
                                  112,
                                  116,
                                  128,
                                  24,
                                  200,
                                  203,
                                  5,
                                  203,
                                  2,
                                  80,
                                  6,
                                  207,
                                  22,
                                  80,
                                  4,
                                  250,
                                  2,
                                  20,
                                  203,
                                  106,
                                  18,
                                  203,
                                  31,
                                  203,
                                  63,
                                  201,
                                  115,
                                  251,
                                  0,
                                  2,
                                  0,
                                  108,
                                  129,
                                  1,
                                  8,
                                  215,
                                  24,
                                  250,
                                  0,
                                  211,
                                  63,
                                  48,
                                  82,
                                  36,
                                  129,
                                  1,
                                  8,
                                  244,
                                  89,
                                  242,
                                  167,
                                  130,
                                  16,
                                  100,
                                  115,
                                  116,
                                  114,
                                  112,
                                  116,
                                  128,
                                  24,
                                  200,
                                  203,
                                  5,
                                  203,
                                  2,
                                  80,
                                  5,
                                  207,
                                  22,
                                  80,
                                  3,
                                  250,
                                  2,
                                  19,
                                  203,
                                  106,
                                  203,
                                  31,
                                  18,
                                  203,
                                  63,
                                  201,
                                  115,
                                  251,
                                  0,
                                  0,
                                  10,
                                  244,
                                  0,
                                  201,
                                  237,
                                  84,
                                ],
                                "type": "Buffer",
                              },
                              "_length": 4,
                              "_offset": 3712,
                              Symbol(nodejs.util.inspect.custom): [Function],
                            },
                            "depth": [Function],
                            "equals": [Function],
                            "hash": [Function],
                            "level": [Function],
                            "mask": LevelMask {
                              "_hashCount": 1,
                              "_hashIndex": 0,
                              "_mask": 0,
                            },
                            "refs": [
                              Cell {
                                "_depths": [
                                  0,
                                  0,
                                  0,
                                  0,
                                ],
                                "_hashes": [
                                  {
                                    "data": [
                                      97,
                                      104,
                                      30,
                                      109,
                                      8,
                                      56,
                                      73,
                                      226,
                                      189,
                                      83,
                                      100,
                                      183,
                                      196,
                                      247,
                                      182,
                                      22,
                                      255,
                                      75,
                                      196,
                                      42,
                                      205,
                                      248,
                                      142,
                                      48,
                                      113,
                                      78,
                                      231,
                                      47,
                                      71,
                                      116,
                                      156,
                                      234,
                                    ],
                                    "type": "Buffer",
                                  },
                                  {
                                    "data": [
                                      97,
                                      104,
                                      30,
                                      109,
                                      8,
                                      56,
                                      73,
                                      226,
                                      189,
                                      83,
                                      100,
                                      183,
                                      196,
                                      247,
                                      182,
                                      22,
                                      255,
                                      75,
                                      196,
                                      42,
                                      205,
                                      248,
                                      142,
                                      48,
                                      113,
                                      78,
                                      231,
                                      47,
                                      71,
                                      116,
                                      156,
                                      234,
                                    ],
                                    "type": "Buffer",
                                  },
                                  {
                                    "data": [
                                      97,
                                      104,
                                      30,
                                      109,
                                      8,
                                      56,
                                      73,
                                      226,
                                      189,
                                      83,
                                      100,
                                      183,
                                      196,
                                      247,
                                      182,
                                      22,
                                      255,
                                      75,
                                      196,
                                      42,
                                      205,
                                      248,
                                      142,
                                      48,
                                      113,
                                      78,
                                      231,
                                      47,
                                      71,
                                      116,
                                      156,
                                      234,
                                    ],
                                    "type": "Buffer",
                                  },
                                  {
                                    "data": [
                                      97,
                                      104,
                                      30,
                                      109,
                                      8,
                                      56,
                                      73,
                                      226,
                                      189,
                                      83,
                                      100,
                                      183,
                                      196,
                                      247,
                                      182,
                                      22,
                                      255,
                                      75,
                                      196,
                                      42,
                                      205,
                                      248,
                                      142,
                                      48,
                                      113,
                                      78,
                                      231,
                                      47,
                                      71,
                                      116,
                                      156,
                                      234,
                                    ],
                                    "type": "Buffer",
                                  },
                                ],
                                "beginParse": [Function],
                                "bits": BitString {
                                  "_data": {
                                    "data": [
                                      1,
                                      20,
                                      255,
                                      0,
                                      244,
                                      164,
                                      19,
                                      244,
                                      188,
                                      242,
                                      200,
                                      11,
                                      1,
                                      2,
                                      1,
                                      32,
                                      2,
                                      3,
                                      2,
                                      1,
                                      72,
                                      4,
                                      5,
                                      4,
                                      248,
                                      242,
                                      131,
                                      8,
                                      215,
                                      24,
                                      32,
                                      211,
                                      31,
                                      211,
                                      31,
                                      211,
                                      31,
                                      2,
                                      248,
                                      35,
                                      187,
                                      242,
                                      100,
                                      237,
                                      68,
                                      208,
                                      211,
                                      31,
                                      211,
                                      31,
                                      211,
                                      255,
                                      244,
                                      4,
                                      209,
                                      81,
                                      67,
                                      186,
                                      242,
                                      161,
                                      81,
                                      81,
                                      186,
                                      242,
                                      162,
                                      5,
                                      249,
                                      1,
                                      84,
                                      16,
                                      100,
                                      249,
                                      16,
                                      242,
                                      163,
                                      248,
                                      0,
                                      36,
                                      164,
                                      200,
                                      203,
                                      31,
                                      82,
                                      64,
                                      203,
                                      31,
                                      82,
                                      48,
                                      203,
                                      255,
                                      82,
                                      16,
                                      244,
                                      0,
                                      201,
                                      237,
                                      84,
                                      248,
                                      15,
                                      1,
                                      211,
                                      7,
                                      33,
                                      192,
                                      0,
                                      159,
                                      108,
                                      81,
                                      147,
                                      32,
                                      215,
                                      74,
                                      150,
                                      211,
                                      7,
                                      212,
                                      2,
                                      251,
                                      0,
                                      232,
                                      48,
                                      224,
                                      33,
                                      192,
                                      1,
                                      227,
                                      0,
                                      33,
                                      192,
                                      2,
                                      227,
                                      0,
                                      1,
                                      192,
                                      3,
                                      145,
                                      48,
                                      227,
                                      13,
                                      3,
                                      164,
                                      200,
                                      203,
                                      31,
                                      18,
                                      203,
                                      31,
                                      203,
                                      255,
                                      16,
                                      17,
                                      18,
                                      19,
                                      2,
                                      230,
                                      208,
                                      1,
                                      208,
                                      211,
                                      3,
                                      33,
                                      113,
                                      176,
                                      146,
                                      95,
                                      4,
                                      224,
                                      34,
                                      215,
                                      73,
                                      193,
                                      32,
                                      146,
                                      95,
                                      4,
                                      224,
                                      2,
                                      211,
                                      31,
                                      33,
                                      130,
                                      16,
                                      112,
                                      108,
                                      117,
                                      103,
                                      189,
                                      34,
                                      130,
                                      16,
                                      100,
                                      115,
                                      116,
                                      114,
                                      189,
                                      176,
                                      146,
                                      95,
                                      5,
                                      224,
                                      3,
                                      250,
                                      64,
                                      48,
                                      32,
                                      250,
                                      68,
                                      1,
                                      200,
                                      202,
                                      7,
                                      203,
                                      255,
                                      201,
                                      208,
                                      237,
                                      68,
                                      208,
                                      129,
                                      1,
                                      64,
                                      215,
                                      33,
                                      244,
                                      4,
                                      48,
                                      92,
                                      129,
                                      1,
                                      8,
                                      244,
                                      10,
                                      111,
                                      161,
                                      49,
                                      179,
                                      146,
                                      95,
                                      7,
                                      224,
                                      5,
                                      211,
                                      63,
                                      200,
                                      37,
                                      130,
                                      16,
                                      112,
                                      108,
                                      117,
                                      103,
                                      186,
                                      146,
                                      56,
                                      48,
                                      227,
                                      13,
                                      3,
                                      130,
                                      16,
                                      100,
                                      115,
                                      116,
                                      114,
                                      186,
                                      146,
                                      95,
                                      6,
                                      227,
                                      13,
                                      6,
                                      7,
                                      2,
                                      1,
                                      32,
                                      8,
                                      9,
                                      0,
                                      120,
                                      1,
                                      250,
                                      0,
                                      244,
                                      4,
                                      48,
                                      248,
                                      39,
                                      111,
                                      34,
                                      48,
                                      80,
                                      10,
                                      161,
                                      33,
                                      190,
                                      242,
                                      224,
                                      80,
                                      130,
                                      16,
                                      112,
                                      108,
                                      117,
                                      103,
                                      131,
                                      30,
                                      177,
                                      112,
                                      128,
                                      24,
                                      80,
                                      4,
                                      203,
                                      5,
                                      38,
                                      207,
                                      22,
                                      88,
                                      250,
                                      2,
                                      25,
                                      244,
                                      0,
                                      203,
                                      105,
                                      23,
                                      203,
                                      31,
                                      82,
                                      96,
                                      203,
                                      63,
                                      32,
                                      201,
                                      128,
                                      64,
                                      251,
                                      0,
                                      6,
                                      0,
                                      138,
                                      80,
                                      4,
                                      129,
                                      1,
                                      8,
                                      244,
                                      89,
                                      48,
                                      237,
                                      68,
                                      208,
                                      129,
                                      1,
                                      64,
                                      215,
                                      32,
                                      200,
                                      1,
                                      207,
                                      22,
                                      244,
                                      0,
                                      201,
                                      237,
                                      84,
                                      1,
                                      114,
                                      176,
                                      142,
                                      35,
                                      130,
                                      16,
                                      100,
                                      115,
                                      116,
                                      114,
                                      131,
                                      30,
                                      177,
                                      112,
                                      128,
                                      24,
                                      80,
                                      5,
                                      203,
                                      5,
                                      80,
                                      3,
                                      207,
                                      22,
                                      35,
                                      250,
                                      2,
                                      19,
                                      203,
                                      106,
                                      203,
                                      31,
                                      203,
                                      63,
                                      201,
                                      128,
                                      64,
                                      251,
                                      0,
                                      146,
                                      95,
                                      3,
                                      226,
                                      2,
                                      1,
                                      32,
                                      10,
                                      11,
                                      0,
                                      89,
                                      189,
                                      36,
                                      43,
                                      111,
                                      106,
                                      38,
                                      132,
                                      8,
                                      10,
                                      6,
                                      185,
                                      15,
                                      160,
                                      33,
                                      132,
                                      112,
                                      212,
                                      8,
                                      8,
                                      71,
                                      164,
                                      147,
                                      125,
                                      41,
                                      145,
                                      12,
                                      230,
                                      144,
                                      62,
                                      159,
                                      249,
                                      131,
                                      120,
                                      18,
                                      128,
                                      27,
                                      120,
                                      16,
                                      20,
                                      137,
                                      135,
                                      21,
                                      159,
                                      49,
                                      132,
                                      2,
                                      1,
                                      88,
                                      12,
                                      13,
                                      0,
                                      17,
                                      184,
                                      201,
                                      126,
                                      212,
                                      77,
                                      13,
                                      112,
                                      177,
                                      248,
                                      0,
                                      61,
                                      178,
                                      157,
                                      251,
                                      81,
                                      52,
                                      32,
                                      64,
                                      80,
                                      53,
                                      200,
                                      125,
                                      1,
                                      12,
                                      0,
                                      178,
                                      50,
                                      129,
                                      242,
                                      255,
                                      242,
                                      116,
                                      0,
                                      96,
                                      64,
                                      66,
                                      61,
                                      2,
                                      155,
                                      232,
                                      76,
                                      96,
                                      2,
                                      1,
                                      32,
                                      14,
                                      15,
                                      0,
                                      25,
                                      173,
                                      206,
                                      118,
                                      162,
                                      104,
                                      64,
                                      32,
                                      107,
                                      144,
                                      235,
                                      133,
                                      255,
                                      192,
                                      0,
                                      25,
                                      175,
                                      29,
                                      246,
                                      162,
                                      104,
                                      64,
                                      16,
                                      107,
                                      144,
                                      235,
                                      133,
                                      143,
                                      192,
                                      0,
                                      110,
                                      210,
                                      7,
                                      250,
                                      0,
                                      212,
                                      212,
                                      34,
                                      249,
                                      0,
                                      5,
                                      200,
                                      202,
                                      7,
                                      21,
                                      203,
                                      255,
                                      201,
                                      208,
                                      119,
                                      116,
                                      128,
                                      24,
                                      200,
                                      203,
                                      5,
                                      203,
                                      2,
                                      34,
                                      207,
                                      22,
                                      80,
                                      5,
                                      250,
                                      2,
                                      20,
                                      203,
                                      107,
                                      18,
                                      204,
                                      204,
                                      201,
                                      115,
                                      251,
                                      0,
                                      200,
                                      64,
                                      20,
                                      129,
                                      1,
                                      8,
                                      244,
                                      81,
                                      242,
                                      167,
                                      2,
                                      0,
                                      112,
                                      129,
                                      1,
                                      8,
                                      215,
                                      24,
                                      250,
                                      0,
                                      211,
                                      63,
                                      200,
                                      84,
                                      32,
                                      71,
                                      129,
                                      1,
                                      8,
                                      244,
                                      81,
                                      242,
                                      167,
                                      130,
                                      16,
                                      110,
                                      111,
                                      116,
                                      101,
                                      112,
                                      116,
                                      128,
                                      24,
                                      200,
                                      203,
                                      5,
                                      203,
                                      2,
                                      80,
                                      6,
                                      207,
                                      22,
                                      80,
                                      4,
                                      250,
                                      2,
                                      20,
                                      203,
                                      106,
                                      18,
                                      203,
                                      31,
                                      203,
                                      63,
                                      201,
                                      115,
                                      251,
                                      0,
                                      2,
                                      0,
                                      108,
                                      129,
                                      1,
                                      8,
                                      215,
                                      24,
                                      250,
                                      0,
                                      211,
                                      63,
                                      48,
                                      82,
                                      36,
                                      129,
                                      1,
                                      8,
                                      244,
                                      89,
                                      242,
                                      167,
                                      130,
                                      16,
                                      100,
                                      115,
                                      116,
                                      114,
                                      112,
                                      116,
                                      128,
                                      24,
                                      200,
                                      203,
                                      5,
                                      203,
                                      2,
                                      80,
                                      5,
                                      207,
                                      22,
                                      80,
                                      3,
                                      250,
                                      2,
                                      19,
                                      203,
                                      106,
                                      203,
                                      31,
                                      18,
                                      203,
                                      63,
                                      201,
                                      115,
                                      251,
                                      0,
                                      0,
                                      10,
                                      244,
                                      0,
                                      201,
                                      237,
                                      84,
                                    ],
                                    "type": "Buffer",
                                  },
                                  "_length": 242,
                                  "_offset": 3840,
                                  Symbol(nodejs.util.inspect.custom): [Function],
                                },
                                "depth": [Function],
                                "equals": [Function],
                                "hash": [Function],
                                "level": [Function],
                                "mask": LevelMask {
                                  "_hashCount": 1,
                                  "_hashIndex": 0,
                                  "_mask": 0,
                                },
                                "refs": [],
                                "type": -1,
                                Symbol(nodejs.util.inspect.custom): [Function],
                              },
                              Cell {
                                "_depths": [
                                  1,
                                  1,
                                  1,
                                  1,
                                ],
                                "_hashes": [
                                  {
                                    "data": [
                                      231,
                                      10,
                                      11,
                                      184,
                                      220,
                                      27,
                                      110,
                                      99,
                                      105,
                                      107,
                                      219,
                                      201,
                                      30,
                                      90,
                                      179,
                                      230,
                                      147,
                                      15,
                                      166,
                                      222,
                                      223,
                                      213,
                                      15,
                                      237,
                                      57,
                                      179,
                                      224,
                                      172,
                                      213,
                                      90,
                                      238,
                                      107,
                                    ],
                                    "type": "Buffer",
                                  },
                                  {
                                    "data": [
                                      231,
                                      10,
                                      11,
                                      184,
                                      220,
                                      27,
                                      110,
                                      99,
                                      105,
                                      107,
                                      219,
                                      201,
                                      30,
                                      90,
                                      179,
                                      230,
                                      147,
                                      15,
                                      166,
                                      222,
                                      223,
                                      213,
                                      15,
                                      237,
                                      57,
                                      179,
                                      224,
                                      172,
                                      213,
                                      90,
                                      238,
                                      107,
                                    ],
                                    "type": "Buffer",
                                  },
                                  {
                                    "data": [
                                      231,
                                      10,
                                      11,
                                      184,
                                      220,
                                      27,
                                      110,
                                      99,
                                      105,
                                      107,
                                      219,
                                      201,
                                      30,
                                      90,
                                      179,
                                      230,
                                      147,
                                      15,
                                      166,
                                      222,
                                      223,
                                      213,
                                      15,
                                      237,
                                      57,
                                      179,
                                      224,
                                      172,
                                      213,
                                      90,
                                      238,
                                      107,
                                    ],
                                    "type": "Buffer",
                                  },
                                  {
                                    "data": [
                                      231,
                                      10,
                                      11,
                                      184,
                                      220,
                                      27,
                                      110,
                                      99,
                                      105,
                                      107,
                                      219,
                                      201,
                                      30,
                                      90,
                                      179,
                                      230,
                                      147,
                                      15,
                                      166,
                                      222,
                                      223,
                                      213,
                                      15,
                                      237,
                                      57,
                                      179,
                                      224,
                                      172,
                                      213,
                                      90,
                                      238,
                                      107,
                                    ],
                                    "type": "Buffer",
                                  },
                                ],
                                "beginParse": [Function],
                                "bits": BitString {
                                  "_data": {
                                    "data": [
                                      1,
                                      20,
                                      255,
                                      0,
                                      244,
                                      164,
                                      19,
                                      244,
                                      188,
                                      242,
                                      200,
                                      11,
                                      1,
                                      2,
                                      1,
                                      32,
                                      2,
                                      3,
                                      2,
                                      1,
                                      72,
                                      4,
                                      5,
                                      4,
                                      248,
                                      242,
                                      131,
                                      8,
                                      215,
                                      24,
                                      32,
                                      211,
                                      31,
                                      211,
                                      31,
                                      211,
                                      31,
                                      2,
                                      248,
                                      35,
                                      187,
                                      242,
                                      100,
                                      237,
                                      68,
                                      208,
                                      211,
                                      31,
                                      211,
                                      31,
                                      211,
                                      255,
                                      244,
                                      4,
                                      209,
                                      81,
                                      67,
                                      186,
                                      242,
                                      161,
                                      81,
                                      81,
                                      186,
                                      242,
                                      162,
                                      5,
                                      249,
                                      1,
                                      84,
                                      16,
                                      100,
                                      249,
                                      16,
                                      242,
                                      163,
                                      248,
                                      0,
                                      36,
                                      164,
                                      200,
                                      203,
                                      31,
                                      82,
                                      64,
                                      203,
                                      31,
                                      82,
                                      48,
                                      203,
                                      255,
                                      82,
                                      16,
                                      244,
                                      0,
                                      201,
                                      237,
                                      84,
                                      248,
                                      15,
                                      1,
                                      211,
                                      7,
                                      33,
                                      192,
                                      0,
                                      159,
                                      108,
                                      81,
                                      147,
                                      32,
                                      215,
                                      74,
                                      150,
                                      211,
                                      7,
                                      212,
                                      2,
                                      251,
                                      0,
                                      232,
                                      48,
                                      224,
                                      33,
                                      192,
                                      1,
                                      227,
                                      0,
                                      33,
                                      192,
                                      2,
                                      227,
                                      0,
                                      1,
                                      192,
                                      3,
                                      145,
                                      48,
                                      227,
                                      13,
                                      3,
                                      164,
                                      200,
                                      203,
                                      31,
                                      18,
                                      203,
                                      31,
                                      203,
                                      255,
                                      16,
                                      17,
                                      18,
                                      19,
                                      2,
                                      230,
                                      208,
                                      1,
                                      208,
                                      211,
                                      3,
                                      33,
                                      113,
                                      176,
                                      146,
                                      95,
                                      4,
                                      224,
                                      34,
                                      215,
                                      73,
                                      193,
                                      32,
                                      146,
                                      95,
                                      4,
                                      224,
                                      2,
                                      211,
                                      31,
                                      33,
                                      130,
                                      16,
                                      112,
                                      108,
                                      117,
                                      103,
                                      189,
                                      34,
                                      130,
                                      16,
                                      100,
                                      115,
                                      116,
                                      114,
                                      189,
                                      176,
                                      146,
                                      95,
                                      5,
                                      224,
                                      3,
                                      250,
                                      64,
                                      48,
                                      32,
                                      250,
                                      68,
                                      1,
                                      200,
                                      202,
                                      7,
                                      203,
                                      255,
                                      201,
                                      208,
                                      237,
                                      68,
                                      208,
                                      129,
                                      1,
                                      64,
                                      215,
                                      33,
                                      244,
                                      4,
                                      48,
                                      92,
                                      129,
                                      1,
                                      8,
                                      244,
                                      10,
                                      111,
                                      161,
                                      49,
                                      179,
                                      146,
                                      95,
                                      7,
                                      224,
                                      5,
                                      211,
                                      63,
                                      200,
                                      37,
                                      130,
                                      16,
                                      112,
                                      108,
                                      117,
                                      103,
                                      186,
                                      146,
                                      56,
                                      48,
                                      227,
                                      13,
                                      3,
                                      130,
                                      16,
                                      100,
                                      115,
                                      116,
                                      114,
                                      186,
                                      146,
                                      95,
                                      6,
                                      227,
                                      13,
                                      6,
                                      7,
                                      2,
                                      1,
                                      32,
                                      8,
                                      9,
                                      0,
                                      120,
                                      1,
                                      250,
                                      0,
                                      244,
                                      4,
                                      48,
                                      248,
                                      39,
                                      111,
                                      34,
                                      48,
                                      80,
                                      10,
                                      161,
                                      33,
                                      190,
                                      242,
                                      224,
                                      80,
                                      130,
                                      16,
                                      112,
                                      108,
                                      117,
                                      103,
                                      131,
                                      30,
                                      177,
                                      112,
                                      128,
                                      24,
                                      80,
                                      4,
                                      203,
                                      5,
                                      38,
                                      207,
                                      22,
                                      88,
                                      250,
                                      2,
                                      25,
                                      244,
                                      0,
                                      203,
                                      105,
                                      23,
                                      203,
                                      31,
                                      82,
                                      96,
                                      203,
                                      63,
                                      32,
                                      201,
                                      128,
                                      64,
                                      251,
                                      0,
                                      6,
                                      0,
                                      138,
                                      80,
                                      4,
                                      129,
                                      1,
                                      8,
                                      244,
                                      89,
                                      48,
                                      237,
                                      68,
                                      208,
                                      129,
                                      1,
                                      64,
                                      215,
                                      32,
                                      200,
                                      1,
                                      207,
                                      22,
                                      244,
                                      0,
                                      201,
                                      237,
                                      84,
                                      1,
                                      114,
                                      176,
                                      142,
                                      35,
                                      130,
                                      16,
                                      100,
                                      115,
                                      116,
                                      114,
                                      131,
                                      30,
                                      177,
                                      112,
                                      128,
                                      24,
                                      80,
                                      5,
                                      203,
                                      5,
                                      80,
                                      3,
                                      207,
                                      22,
                                      35,
                                      250,
                                      2,
                                      19,
                                      203,
                                      106,
                                      203,
                                      31,
                                      203,
                                      63,
                                      201,
                                      128,
                                      64,
                                      251,
                                      0,
                                      146,
                                      95,
                                      3,
                                      226,
                                      2,
                                      1,
                                      32,
                                      10,
                                      11,
                                      0,
                                      89,
                                      189,
                                      36,
                                      43,
                                      111,
                                      106,
                                      38,
                                      132,
                                      8,
                                      10,
                                      6,
                                      185,
                                      15,
                                      160,
                                      33,
                                      132,
                                      112,
                                      212,
                                      8,
                                      8,
                                      71,
                                      164,
                                      147,
                                      125,
                                      41,
                                      145,
                                      12,
                                      230,
                                      144,
                                      62,
                                      159,
                                      249,
                                      131,
                                      120,
                                      18,
                                      128,
                                      27,
                                      120,
                                      16,
                                      20,
                                      137,
                                      135,
                                      21,
                                      159,
                                      49,
                                      132,
                                      2,
                                      1,
                                      88,
                                      12,
                                      13,
                                      0,
                                      17,
                                      184,
                                      201,
                                      126,
                                      212,
                                      77,
                                      13,
                                      112,
                                      177,
                                      248,
                                      0,
                                      61,
                                      178,
                                      157,
                                      251,
                                      81,
                                      52,
                                      32,
                                      64,
                                      80,
                                      53,
                                      200,
                                      125,
                                      1,
                                      12,
                                      0,
                                      178,
                                      50,
                                      129,
                                      242,
                                      255,
                                      242,
                                      116,
                                      0,
                                      96,
                                      64,
                                      66,
                                      61,
                                      2,
                                      155,
                                      232,
                                      76,
                                      96,
                                      2,
                                      1,
                                      32,
                                      14,
                                      15,
                                      0,
                                      25,
                                      173,
                                      206,
                                      118,
                                      162,
                                      104,
                                      64,
                                      32,
                                      107,
                                      144,
                                      235,
                                      133,
                                      255,
                                      192,
                                      0,
                                      25,
                                      175,
                                      29,
                                      246,
                                      162,
                                      104,
                                      64,
                                      16,
                                      107,
                                      144,
                                      235,
                                      133,
                                      143,
                                      192,
                                      0,
                                      110,
                                      210,
                                      7,
                                      250,
                                      0,
                                      212,
                                      212,
                                      34,
                                      249,
                                      0,
                                      5,
                                      200,
                                      202,
                                      7,
                                      21,
                                      203,
                                      255,
                                      201,
                                      208,
                                      119,
                                      116,
                                      128,
                                      24,
                                      200,
                                      203,
                                      5,
                                      203,
                                      2,
                                      34,
                                      207,
                                      22,
                                      80,
                                      5,
                                      250,
                                      2,
                                      20,
                                      203,
                                      107,
                                      18,
                                      204,
                                      204,
                                      201,
                                      115,
                                      251,
                                      0,
                                      200,
                                      64,
                                      20,
                                      129,
                                      1,
                                      8,
                                      244,
                                      81,
                                      242,
                                      167,
                                      2,
                                      0,
                                      112,
                                      129,
                                      1,
                                      8,
                                      215,
                                      24,
                                      250,
                                      0,
                                      211,
                                      63,
                                      200,
                                      84,
                                      32,
                                      71,
                                      129,
                                      1,
                                      8,
                                      244,
                                      81,
                                      242,
                                      167,
                                      130,
                                      16,
                                      110,
                                      111,
                                      116,
                                      101,
                                      112,
                                      116,
                                      128,
                                      24,
                                      200,
                                      203,
                                      5,
                                      203,
                                      2,
                                      80,
                                      6,
                                      207,
                                      22,
                                      80,
                                      4,
                                      250,
                                      2,
                                      20,
                                      203,
                                      106,
                                      18,
                                      203,
                                      31,
                                      203,
                                      63,
                                      201,
                                      115,
                                      251,
                                      0,
                                      2,
                                      0,
                                      108,
                                      129,
                                      1,
                                      8,
                                      215,
                                      24,
                                      250,
                                      0,
                                      211,
                                      63,
                                      48,
                                      82,
                                      36,
                                      129,
                                      1,
                                      8,
                                      244,
                                      89,
                                      242,
                                      167,
                                      130,
                                      16,
                                      100,
                                      115,
                                      116,
                                      114,
                                      112,
                                      116,
                                      128,
                                      24,
                                      200,
                                      203,
                                      5,
                                      203,
                                      2,
                                      80,
                                      5,
                                      207,
                                      22,
                                      80,
                                      3,
                                      250,
                                      2,
                                      19,
                                      203,
                                      106,
                                      203,
                                      31,
                                      18,
                                      203,
                                      63,
                                      201,
                                      115,
                                      251,
                                      0,
                                      0,
                                      10,
                                      244,
                                      0,
                                      201,
                                      237,
                                      84,
                                    ],
                                    "type": "Buffer",
                                  },
                                  "_length": 2,
                                  "_offset": 4104,
                                  Symbol(nodejs.util.inspect.custom): [Function],
                                },
                                "depth": [Function],
                                "equals": [Function],
                                "hash": [Function],
                                "level": [Function],
                                "mask": LevelMask {
                                  "_hashCount": 1,
                                  "_hashIndex": 0,
                                  "_mask": 0,
                                },
                                "refs": [
                                  Cell {
                                    "_depths": [
                                      0,
                                      0,
                                      0,
                                      0,
                                    ],
                                    "_hashes": [
                                      {
                                        "data": [
                                          179,
                                          194,
                                          63,
                                          173,
                                          196,
                                          6,
                                          171,
                                          94,
                                          60,
                                          181,
                                          207,
                                          208,
                                          103,
                                          68,
                                          242,
                                          228,
                                          123,
                                          208,
                                          77,
                                          21,
                                          210,
                                          71,
                                          211,
                                          180,
                                          252,
                                          243,
                                          135,
                                          169,
                                          123,
                                          54,
                                          5,
                                          24,
                                        ],
                                        "type": "Buffer",
                                      },
                                      {
                                        "data": [
                                          179,
                                          194,
                                          63,
                                          173,
                                          196,
                                          6,
                                          171,
                                          94,
                                          60,
                                          181,
                                          207,
                                          208,
                                          103,
                                          68,
                                          242,
                                          228,
                                          123,
                                          208,
                                          77,
                                          21,
                                          210,
                                          71,
                                          211,
                                          180,
                                          252,
                                          243,
                                          135,
                                          169,
                                          123,
                                          54,
                                          5,
                                          24,
                                        ],
                                        "type": "Buffer",
                                      },
                                      {
                                        "data": [
                                          179,
                                          194,
                                          63,
                                          173,
                                          196,
                                          6,
                                          171,
                                          94,
                                          60,
                                          181,
                                          207,
                                          208,
                                          103,
                                          68,
                                          242,
                                          228,
                                          123,
                                          208,
                                          77,
                                          21,
                                          210,
                                          71,
                                          211,
                                          180,
                                          252,
                                          243,
                                          135,
                                          169,
                                          123,
                                          54,
                                          5,
                                          24,
                                        ],
                                        "type": "Buffer",
                                      },
                                      {
                                        "data": [
                                          179,
                                          194,
                                          63,
                                          173,
                                          196,
                                          6,
                                          171,
                                          94,
                                          60,
                                          181,
                                          207,
                                          208,
                                          103,
                                          68,
                                          242,
                                          228,
                                          123,
                                          208,
                                          77,
                                          21,
                                          210,
                                          71,
                                          211,
                                          180,
                                          252,
                                          243,
                                          135,
                                          169,
                                          123,
                                          54,
                                          5,
                                          24,
                                        ],
                                        "type": "Buffer",
                                      },
                                    ],
                                    "beginParse": [Function],
                                    "bits": BitString {
                                      "_data": {
                                        "data": [
                                          1,
                                          20,
                                          255,
                                          0,
                                          244,
                                          164,
                                          19,
                                          244,
                                          188,
                                          242,
                                          200,
                                          11,
                                          1,
                                          2,
                                          1,
                                          32,
                                          2,
                                          3,
                                          2,
                                          1,
                                          72,
                                          4,
                                          5,
                                          4,
                                          248,
                                          242,
                                          131,
                                          8,
                                          215,
                                          24,
                                          32,
                                          211,
                                          31,
                                          211,
                                          31,
                                          211,
                                          31,
                                          2,
                                          248,
                                          35,
                                          187,
                                          242,
                                          100,
                                          237,
                                          68,
                                          208,
                                          211,
                                          31,
                                          211,
                                          31,
                                          211,
                                          255,
                                          244,
                                          4,
                                          209,
                                          81,
                                          67,
                                          186,
                                          242,
                                          161,
                                          81,
                                          81,
                                          186,
                                          242,
                                          162,
                                          5,
                                          249,
                                          1,
                                          84,
                                          16,
                                          100,
                                          249,
                                          16,
                                          242,
                                          163,
                                          248,
                                          0,
                                          36,
                                          164,
                                          200,
                                          203,
                                          31,
                                          82,
                                          64,
                                          203,
                                          31,
                                          82,
                                          48,
                                          203,
                                          255,
                                          82,
                                          16,
                                          244,
                                          0,
                                          201,
                                          237,
                                          84,
                                          248,
                                          15,
                                          1,
                                          211,
                                          7,
                                          33,
                                          192,
                                          0,
                                          159,
                                          108,
                                          81,
                                          147,
                                          32,
                                          215,
                                          74,
                                          150,
                                          211,
                                          7,
                                          212,
                                          2,
                                          251,
                                          0,
                                          232,
                                          48,
                                          224,
                                          33,
                                          192,
                                          1,
                                          227,
                                          0,
                                          33,
                                          192,
                                          2,
                                          227,
                                          0,
                                          1,
                                          192,
                                          3,
                                          145,
                                          48,
                                          227,
                                          13,
                                          3,
                                          164,
                                          200,
                                          203,
                                          31,
                                          18,
                                          203,
                                          31,
                                          203,
                                          255,
                                          16,
                                          17,
                                          18,
                                          19,
                                          2,
                                          230,
                                          208,
                                          1,
                                          208,
                                          211,
                                          3,
                                          33,
                                          113,
                                          176,
                                          146,
                                          95,
                                          4,
                                          224,
                                          34,
                                          215,
                                          73,
                                          193,
                                          32,
                                          146,
                                          95,
                                          4,
                                          224,
                                          2,
                                          211,
                                          31,
                                          33,
                                          130,
                                          16,
                                          112,
                                          108,
                                          117,
                                          103,
                                          189,
                                          34,
                                          130,
                                          16,
                                          100,
                                          115,
                                          116,
                                          114,
                                          189,
                                          176,
                                          146,
                                          95,
                                          5,
                                          224,
                                          3,
                                          250,
                                          64,
                                          48,
                                          32,
                                          250,
                                          68,
                                          1,
                                          200,
                                          202,
                                          7,
                                          203,
                                          255,
                                          201,
                                          208,
                                          237,
                                          68,
                                          208,
                                          129,
                                          1,
                                          64,
                                          215,
                                          33,
                                          244,
                                          4,
                                          48,
                                          92,
                                          129,
                                          1,
                                          8,
                                          244,
                                          10,
                                          111,
                                          161,
                                          49,
                                          179,
                                          146,
                                          95,
                                          7,
                                          224,
                                          5,
                                          211,
                                          63,
                                          200,
                                          37,
                                          130,
                                          16,
                                          112,
                                          108,
                                          117,
                                          103,
                                          186,
                                          146,
                                          56,
                                          48,
                                          227,
                                          13,
                                          3,
                                          130,
                                          16,
                                          100,
                                          115,
                                          116,
                                          114,
                                          186,
                                          146,
                                          95,
                                          6,
                                          227,
                                          13,
                                          6,
                                          7,
                                          2,
                                          1,
                                          32,
                                          8,
                                          9,
                                          0,
                                          120,
                                          1,
                                          250,
                                          0,
                                          244,
                                          4,
                                          48,
                                          248,
                                          39,
                                          111,
                                          34,
                                          48,
                                          80,
                                          10,
                                          161,
                                          33,
                                          190,
                                          242,
                                          224,
                                          80,
                                          130,
                                          16,
                                          112,
                                          108,
                                          117,
                                          103,
                                          131,
                                          30,
                                          177,
                                          112,
                                          128,
                                          24,
                                          80,
                                          4,
                                          203,
                                          5,
                                          38,
                                          207,
                                          22,
                                          88,
                                          250,
                                          2,
                                          25,
                                          244,
                                          0,
                                          203,
                                          105,
                                          23,
                                          203,
                                          31,
                                          82,
                                          96,
                                          203,
                                          63,
                                          32,
                                          201,
                                          128,
                                          64,
                                          251,
                                          0,
                                          6,
                                          0,
                                          138,
                                          80,
                                          4,
                                          129,
                                          1,
                                          8,
                                          244,
                                          89,
                                          48,
                                          237,
                                          68,
                                          208,
                                          129,
                                          1,
                                          64,
                                          215,
                                          32,
                                          200,
                                          1,
                                          207,
                                          22,
                                          244,
                                          0,
                                          201,
                                          237,
                                          84,
                                          1,
                                          114,
                                          176,
                                          142,
                                          35,
                                          130,
                                          16,
                                          100,
                                          115,
                                          116,
                                          114,
                                          131,
                                          30,
                                          177,
                                          112,
                                          128,
                                          24,
                                          80,
                                          5,
                                          203,
                                          5,
                                          80,
                                          3,
                                          207,
                                          22,
                                          35,
                                          250,
                                          2,
                                          19,
                                          203,
                                          106,
                                          203,
                                          31,
                                          203,
                                          63,
                                          201,
                                          128,
                                          64,
                                          251,
                                          0,
                                          146,
                                          95,
                                          3,
                                          226,
                                          2,
                                          1,
                                          32,
                                          10,
                                          11,
                                          0,
                                          89,
                                          189,
                                          36,
                                          43,
                                          111,
                                          106,
                                          38,
                                          132,
                                          8,
                                          10,
                                          6,
                                          185,
                                          15,
                                          160,
                                          33,
                                          132,
                                          112,
                                          212,
                                          8,
                                          8,
                                          71,
                                          164,
                                          147,
                                          125,
                                          41,
                                          145,
                                          12,
                                          230,
                                          144,
                                          62,
                                          159,
                                          249,
                                          131,
                                          120,
                                          18,
                                          128,
                                          27,
                                          120,
                                          16,
                                          20,
                                          137,
                                          135,
                                          21,
                                          159,
                                          49,
                                          132,
                                          2,
                                          1,
                                          88,
                                          12,
                                          13,
                                          0,
                                          17,
                                          184,
                                          201,
                                          126,
                                          212,
                                          77,
                                          13,
                                          112,
                                          177,
                                          248,
                                          0,
                                          61,
                                          178,
                                          157,
                                          251,
                                          81,
                                          52,
                                          32,
                                          64,
                                          80,
                                          53,
                                          200,
                                          125,
                                          1,
                                          12,
                                          0,
                                          178,
                                          50,
                                          129,
                                          242,
                                          255,
                                          242,
                                          116,
                                          0,
                                          96,
                                          64,
                                          66,
                                          61,
                                          2,
                                          155,
                                          232,
                                          76,
                                          96,
                                          2,
                                          1,
                                          32,
                                          14,
                                          15,
                                          0,
                                          25,
                                          173,
                                          206,
                                          118,
                                          162,
                                          104,
                                          64,
                                          32,
                                          107,
                                          144,
                                          235,
                                          133,
                                          255,
                                          192,
                                          0,
                                          25,
                                          175,
                                          29,
                                          246,
                                          162,
                                          104,
                                          64,
                                          16,
                                          107,
                                          144,
                                          235,
                                          133,
                                          143,
                                          192,
                                          0,
                                          110,
                                          210,
                                          7,
                                          250,
                                          0,
                                          212,
                                          212,
                                          34,
                                          249,
                                          0,
                                          5,
                                          200,
                                          202,
                                          7,
                                          21,
                                          203,
                                          255,
                                          201,
                                          208,
                                          119,
                                          116,
                                          128,
                                          24,
                                          200,
                                          203,
                                          5,
                                          203,
                                          2,
                                          34,
                                          207,
                                          22,
                                          80,
                                          5,
                                          250,
                                          2,
                                          20,
                                          203,
                                          107,
                                          18,
                                          204,
                                          204,
                                          201,
                                          115,
                                          251,
                                          0,
                                          200,
                                          64,
                                          20,
                                          129,
                                          1,
                                          8,
                                          244,
                                          81,
                                          242,
                                          167,
                                          2,
                                          0,
                                          112,
                                          129,
                                          1,
                                          8,
                                          215,
                                          24,
                                          250,
                                          0,
                                          211,
                                          63,
                                          200,
                                          84,
                                          32,
                                          71,
                                          129,
                                          1,
                                          8,
                                          244,
                                          81,
                                          242,
                                          167,
                                          130,
                                          16,
                                          110,
                                          111,
                                          116,
                                          101,
                                          112,
                                          116,
                                          128,
                                          24,
                                          200,
                                          203,
                                          5,
                                          203,
                                          2,
                                          80,
                                          6,
                                          207,
                                          22,
                                          80,
                                          4,
                                          250,
                                          2,
                                          20,
                                          203,
                                          106,
                                          18,
                                          203,
                                          31,
                                          203,
                                          63,
                                          201,
                                          115,
                                          251,
                                          0,
                                          2,
                                          0,
                                          108,
                                          129,
                                          1,
                                          8,
                                          215,
                                          24,
                                          250,
                                          0,
                                          211,
                                          63,
                                          48,
                                          82,
                                          36,
                                          129,
                                          1,
                                          8,
                                          244,
                                          89,
                                          242,
                                          167,
                                          130,
                                          16,
                                          100,
                                          115,
                                          116,
                                          114,
                                          112,
                                          116,
                                          128,
                                          24,
                                          200,
                                          203,
                                          5,
                                          203,
                                          2,
                                          80,
                                          5,
                                          207,
                                          22,
                                          80,
                                          3,
                                          250,
                                          2,
                                          19,
                                          203,
                                          106,
                                          203,
                                          31,
                                          18,
                                          203,
                                          63,
                                          201,
                                          115,
                                          251,
                                          0,
                                          0,
                                          10,
                                          244,
                                          0,
                                          201,
                                          237,
                                          84,
                                        ],
                                        "type": "Buffer",
                                      },
                                      "_length": 97,
                                      "_offset": 4144,
                                      Symbol(nodejs.util.inspect.custom): [Function],
                                    },
                                    "depth": [Function],
                                    "equals": [Function],
                                    "hash": [Function],
                                    "level": [Function],
                                    "mask": LevelMask {
                                      "_hashCount": 1,
                                      "_hashIndex": 0,
                                      "_mask": 0,
                                    },
                                    "refs": [],
                                    "type": -1,
                                    Symbol(nodejs.util.inspect.custom): [Function],
                                  },
                                  Cell {
                                    "_depths": [
                                      0,
                                      0,
                                      0,
                                      0,
                                    ],
                                    "_hashes": [
                                      {
                                        "data": [
                                          83,
                                          121,
                                          111,
                                          212,
                                          50,
                                          192,
                                          2,
                                          217,
                                          237,
                                          236,
                                          23,
                                          234,
                                          203,
                                          42,
                                          126,
                                          36,
                                          2,
                                          136,
                                          181,
                                          26,
                                          87,
                                          55,
                                          174,
                                          199,
                                          150,
                                          46,
                                          62,
                                          112,
                                          79,
                                          241,
                                          29,
                                          118,
                                        ],
                                        "type": "Buffer",
                                      },
                                      {
                                        "data": [
                                          83,
                                          121,
                                          111,
                                          212,
                                          50,
                                          192,
                                          2,
                                          217,
                                          237,
                                          236,
                                          23,
                                          234,
                                          203,
                                          42,
                                          126,
                                          36,
                                          2,
                                          136,
                                          181,
                                          26,
                                          87,
                                          55,
                                          174,
                                          199,
                                          150,
                                          46,
                                          62,
                                          112,
                                          79,
                                          241,
                                          29,
                                          118,
                                        ],
                                        "type": "Buffer",
                                      },
                                      {
                                        "data": [
                                          83,
                                          121,
                                          111,
                                          212,
                                          50,
                                          192,
                                          2,
                                          217,
                                          237,
                                          236,
                                          23,
                                          234,
                                          203,
                                          42,
                                          126,
                                          36,
                                          2,
                                          136,
                                          181,
                                          26,
                                          87,
                                          55,
                                          174,
                                          199,
                                          150,
                                          46,
                                          62,
                                          112,
                                          79,
                                          241,
                                          29,
                                          118,
                                        ],
                                        "type": "Buffer",
                                      },
                                      {
                                        "data": [
                                          83,
                                          121,
                                          111,
                                          212,
                                          50,
                                          192,
                                          2,
                                          217,
                                          237,
                                          236,
                                          23,
                                          234,
                                          203,
                                          42,
                                          126,
                                          36,
                                          2,
                                          136,
                                          181,
                                          26,
                                          87,
                                          55,
                                          174,
                                          199,
                                          150,
                                          46,
                                          62,
                                          112,
                                          79,
                                          241,
                                          29,
                                          118,
                                        ],
                                        "type": "Buffer",
                                      },
                                    ],
                                    "beginParse": [Function],
                                    "bits": BitString {
                                      "_data": {
                                        "data": [
                                          1,
                                          20,
                                          255,
                                          0,
                                          244,
                                          164,
                                          19,
                                          244,
                                          188,
                                          242,
                                          200,
                                          11,
                                          1,
                                          2,
                                          1,
                                          32,
                                          2,
                                          3,
                                          2,
                                          1,
                                          72,
                                          4,
                                          5,
                                          4,
                                          248,
                                          242,
                                          131,
                                          8,
                                          215,
                                          24,
                                          32,
                                          211,
                                          31,
                                          211,
                                          31,
                                          211,
                                          31,
                                          2,
                                          248,
                                          35,
                                          187,
                                          242,
                                          100,
                                          237,
                                          68,
                                          208,
                                          211,
                                          31,
                                          211,
                                          31,
                                          211,
                                          255,
                                          244,
                                          4,
                                          209,
                                          81,
                                          67,
                                          186,
                                          242,
                                          161,
                                          81,
                                          81,
                                          186,
                                          242,
                                          162,
                                          5,
                                          249,
                                          1,
                                          84,
                                          16,
                                          100,
                                          249,
                                          16,
                                          242,
                                          163,
                                          248,
                                          0,
                                          36,
                                          164,
                                          200,
                                          203,
                                          31,
                                          82,
                                          64,
                                          203,
                                          31,
                                          82,
                                          48,
                                          203,
                                          255,
                                          82,
                                          16,
                                          244,
                                          0,
                                          201,
                                          237,
                                          84,
                                          248,
                                          15,
                                          1,
                                          211,
                                          7,
                                          33,
                                          192,
                                          0,
                                          159,
                                          108,
                                          81,
                                          147,
                                          32,
                                          215,
                                          74,
                                          150,
                                          211,
                                          7,
                                          212,
                                          2,
                                          251,
                                          0,
                                          232,
                                          48,
                                          224,
                                          33,
                                          192,
                                          1,
                                          227,
                                          0,
                                          33,
                                          192,
                                          2,
                                          227,
                                          0,
                                          1,
                                          192,
                                          3,
                                          145,
                                          48,
                                          227,
                                          13,
                                          3,
                                          164,
                                          200,
                                          203,
                                          31,
                                          18,
                                          203,
                                          31,
                                          203,
                                          255,
                                          16,
                                          17,
                                          18,
                                          19,
                                          2,
                                          230,
                                          208,
                                          1,
                                          208,
                                          211,
                                          3,
                                          33,
                                          113,
                                          176,
                                          146,
                                          95,
                                          4,
                                          224,
                                          34,
                                          215,
                                          73,
                                          193,
                                          32,
                                          146,
                                          95,
                                          4,
                                          224,
                                          2,
                                          211,
                                          31,
                                          33,
                                          130,
                                          16,
                                          112,
                                          108,
                                          117,
                                          103,
                                          189,
                                          34,
                                          130,
                                          16,
                                          100,
                                          115,
                                          116,
                                          114,
                                          189,
                                          176,
                                          146,
                                          95,
                                          5,
                                          224,
                                          3,
                                          250,
                                          64,
                                          48,
                                          32,
                                          250,
                                          68,
                                          1,
                                          200,
                                          202,
                                          7,
                                          203,
                                          255,
                                          201,
                                          208,
                                          237,
                                          68,
                                          208,
                                          129,
                                          1,
                                          64,
                                          215,
                                          33,
                                          244,
                                          4,
                                          48,
                                          92,
                                          129,
                                          1,
                                          8,
                                          244,
                                          10,
                                          111,
                                          161,
                                          49,
                                          179,
                                          146,
                                          95,
                                          7,
                                          224,
                                          5,
                                          211,
                                          63,
                                          200,
                                          37,
                                          130,
                                          16,
                                          112,
                                          108,
                                          117,
                                          103,
                                          186,
                                          146,
                                          56,
                                          48,
                                          227,
                                          13,
                                          3,
                                          130,
                                          16,
                                          100,
                                          115,
                                          116,
                                          114,
                                          186,
                                          146,
                                          95,
                                          6,
                                          227,
                                          13,
                                          6,
                                          7,
                                          2,
                                          1,
                                          32,
                                          8,
                                          9,
                                          0,
                                          120,
                                          1,
                                          250,
                                          0,
                                          244,
                                          4,
                                          48,
                                          248,
                                          39,
                                          111,
                                          34,
                                          48,
                                          80,
                                          10,
                                          161,
                                          33,
                                          190,
                                          242,
                                          224,
                                          80,
                                          130,
                                          16,
                                          112,
                                          108,
                                          117,
                                          103,
                                          131,
                                          30,
                                          177,
                                          112,
                                          128,
                                          24,
                                          80,
                                          4,
                                          203,
                                          5,
                                          38,
                                          207,
                                          22,
                                          88,
                                          250,
                                          2,
                                          25,
                                          244,
                                          0,
                                          203,
                                          105,
                                          23,
                                          203,
                                          31,
                                          82,
                                          96,
                                          203,
                                          63,
                                          32,
                                          201,
                                          128,
                                          64,
                                          251,
                                          0,
                                          6,
                                          0,
                                          138,
                                          80,
                                          4,
                                          129,
                                          1,
                                          8,
                                          244,
                                          89,
                                          48,
                                          237,
                                          68,
                                          208,
                                          129,
                                          1,
                                          64,
                                          215,
                                          32,
                                          200,
                                          1,
                                          207,
                                          22,
                                          244,
                                          0,
                                          201,
                                          237,
                                          84,
                                          1,
                                          114,
                                          176,
                                          142,
                                          35,
                                          130,
                                          16,
                                          100,
                                          115,
                                          116,
                                          114,
                                          131,
                                          30,
                                          177,
                                          112,
                                          128,
                                          24,
                                          80,
                                          5,
                                          203,
                                          5,
                                          80,
                                          3,
                                          207,
                                          22,
                                          35,
                                          250,
                                          2,
                                          19,
                                          203,
                                          106,
                                          203,
                                          31,
                                          203,
                                          63,
                                          201,
                                          128,
                                          64,
                                          251,
                                          0,
                                          146,
                                          95,
                                          3,
                                          226,
                                          2,
                                          1,
                                          32,
                                          10,
                                          11,
                                          0,
                                          89,
                                          189,
                                          36,
                                          43,
                                          111,
                                          106,
                                          38,
                                          132,
                                          8,
                                          10,
                                          6,
                                          185,
                                          15,
                                          160,
                                          33,
                                          132,
                                          112,
                                          212,
                                          8,
                                          8,
                                          71,
                                          164,
                                          147,
                                          125,
                                          41,
                                          145,
                                          12,
                                          230,
                                          144,
                                          62,
                                          159,
                                          249,
                                          131,
                                          120,
                                          18,
                                          128,
                                          27,
                                          120,
                                          16,
                                          20,
                                          137,
                                          135,
                                          21,
                                          159,
                                          49,
                                          132,
                                          2,
                                          1,
                                          88,
                                          12,
                                          13,
                                          0,
                                          17,
                                          184,
                                          201,
                                          126,
                                          212,
                                          77,
                                          13,
                                          112,
                                          177,
                                          248,
                                          0,
                                          61,
                                          178,
                                          157,
                                          251,
                                          81,
                                          52,
                                          32,
                                          64,
                                          80,
                                          53,
                                          200,
                                          125,
                                          1,
                                          12,
                                          0,
                                          178,
                                          50,
                                          129,
                                          242,
                                          255,
                                          242,
                                          116,
                                          0,
                                          96,
                                          64,
                                          66,
                                          61,
                                          2,
                                          155,
                                          232,
                                          76,
                                          96,
                                          2,
                                          1,
                                          32,
                                          14,
                                          15,
                                          0,
                                          25,
                                          173,
                                          206,
                                          118,
                                          162,
                                          104,
                                          64,
                                          32,
                                          107,
                                          144,
                                          235,
                                          133,
                                          255,
                                          192,
                                          0,
                                          25,
                                          175,
                                          29,
                                          246,
                                          162,
                                          104,
                                          64,
                                          16,
                                          107,
                                          144,
                                          235,
                                          133,
                                          143,
                                          192,
                                          0,
                                          110,
                                          210,
                                          7,
                                          250,
                                          0,
                                          212,
                                          212,
                                          34,
                                          249,
                                          0,
                                          5,
                                          200,
                                          202,
                                          7,
                                          21,
                                          203,
                                          255,
                                          201,
                                          208,
                                          119,
                                          116,
                                          128,
                                          24,
                                          200,
                                          203,
                                          5,
                                          203,
                                          2,
                                          34,
                                          207,
                                          22,
                                          80,
                                          5,
                                          250,
                                          2,
                                          20,
                                          203,
                                          107,
                                          18,
                                          204,
                                          204,
                                          201,
                                          115,
                                          251,
                                          0,
                                          200,
                                          64,
                                          20,
                                          129,
                                          1,
                                          8,
                                          244,
                                          81,
                                          242,
                                          167,
                                          2,
                                          0,
                                          112,
                                          129,
                                          1,
                                          8,
                                          215,
                                          24,
                                          250,
                                          0,
                                          211,
                                          63,
                                          200,
                                          84,
                                          32,
                                          71,
                                          129,
                                          1,
                                          8,
                                          244,
                                          81,
                                          242,
                                          167,
                                          130,
                                          16,
                                          110,
                                          111,
                                          116,
                                          101,
                                          112,
                                          116,
                                          128,
                                          24,
                                          200,
                                          203,
                                          5,
                                          203,
                                          2,
                                          80,
                                          6,
                                          207,
                                          22,
                                          80,
                                          4,
                                          250,
                                          2,
                                          20,
                                          203,
                                          106,
                                          18,
                                          203,
                                          31,
                                          203,
                                          63,
                                          201,
                                          115,
                                          251,
                                          0,
                                          2,
                                          0,
                                          108,
                                          129,
                                          1,
                                          8,
                                          215,
                                          24,
                                          250,
                                          0,
                                          211,
                                          63,
                                          48,
                                          82,
                                          36,
                                          129,
                                          1,
                                          8,
                                          244,
                                          89,
                                          242,
                                          167,
                                          130,
                                          16,
                                          100,
                                          115,
                                          116,
                                          114,
                                          112,
                                          116,
                                          128,
                                          24,
                                          200,
                                          203,
                                          5,
                                          203,
                                          2,
                                          80,
                                          5,
                                          207,
                                          22,
                                          80,
                                          3,
                                          250,
                                          2,
                                          19,
                                          203,
                                          106,
                                          203,
                                          31,
                                          18,
                                          203,
                                          63,
                                          201,
                                          115,
                                          251,
                                          0,
                                          0,
                                          10,
                                          244,
                                          0,
                                          201,
                                          237,
                                          84,
                                        ],
                                        "type": "Buffer",
                                      },
                                      "_length": 97,
                                      "_offset": 4264,
                                      Symbol(nodejs.util.inspect.custom): [Function],
                                    },
                                    "depth": [Function],
                                    "equals": [Function],
                                    "hash": [Function],
                                    "level": [Function],
                                    "mask": LevelMask {
                                      "_hashCount": 1,
                                      "_hashIndex": 0,
                                      "_mask": 0,
                                    },
                                    "refs": [],
                                    "type": -1,
                                    Symbol(nodejs.util.inspect.custom): [Function],
                                  },
                                ],
                                "type": -1,
                                Symbol(nodejs.util.inspect.custom): [Function],
                              },
                            ],
                            "type": -1,
                            Symbol(nodejs.util.inspect.custom): [Function],
                          },
                          Cell {
                            "_depths": [
                              0,
                              0,
                              0,
                              0,
                            ],
                            "_hashes": [
                              {
                                "data": [
                                  168,
                                  152,
                                  151,
                                  129,
                                  94,
                                  18,
                                  144,
                                  18,
                                  45,
                                  135,
                                  144,
                                  141,
                                  132,
                                  5,
                                  197,
                                  165,
                                  8,
                                  178,
                                  217,
                                  79,
                                  197,
                                  208,
                                  19,
                                  1,
                                  243,
                                  165,
                                  177,
                                  105,
                                  148,
                                  211,
                                  242,
                                  244,
                                ],
                                "type": "Buffer",
                              },
                              {
                                "data": [
                                  168,
                                  152,
                                  151,
                                  129,
                                  94,
                                  18,
                                  144,
                                  18,
                                  45,
                                  135,
                                  144,
                                  141,
                                  132,
                                  5,
                                  197,
                                  165,
                                  8,
                                  178,
                                  217,
                                  79,
                                  197,
                                  208,
                                  19,
                                  1,
                                  243,
                                  165,
                                  177,
                                  105,
                                  148,
                                  211,
                                  242,
                                  244,
                                ],
                                "type": "Buffer",
                              },
                              {
                                "data": [
                                  168,
                                  152,
                                  151,
                                  129,
                                  94,
                                  18,
                                  144,
                                  18,
                                  45,
                                  135,
                                  144,
                                  141,
                                  132,
                                  5,
                                  197,
                                  165,
                                  8,
                                  178,
                                  217,
                                  79,
                                  197,
                                  208,
                                  19,
                                  1,
                                  243,
                                  165,
                                  177,
                                  105,
                                  148,
                                  211,
                                  242,
                                  244,
                                ],
                                "type": "Buffer",
                              },
                              {
                                "data": [
                                  168,
                                  152,
                                  151,
                                  129,
                                  94,
                                  18,
                                  144,
                                  18,
                                  45,
                                  135,
                                  144,
                                  141,
                                  132,
                                  5,
                                  197,
                                  165,
                                  8,
                                  178,
                                  217,
                                  79,
                                  197,
                                  208,
                                  19,
                                  1,
                                  243,
                                  165,
                                  177,
                                  105,
                                  148,
                                  211,
                                  242,
                                  244,
                                ],
                                "type": "Buffer",
                              },
                            ],
                            "beginParse": [Function],
                            "bits": BitString {
                              "_data": {
                                "data": [
                                  1,
                                  20,
                                  255,
                                  0,
                                  244,
                                  164,
                                  19,
                                  244,
                                  188,
                                  242,
                                  200,
                                  11,
                                  1,
                                  2,
                                  1,
                                  32,
                                  2,
                                  3,
                                  2,
                                  1,
                                  72,
                                  4,
                                  5,
                                  4,
                                  248,
                                  242,
                                  131,
                                  8,
                                  215,
                                  24,
                                  32,
                                  211,
                                  31,
                                  211,
                                  31,
                                  211,
                                  31,
                                  2,
                                  248,
                                  35,
                                  187,
                                  242,
                                  100,
                                  237,
                                  68,
                                  208,
                                  211,
                                  31,
                                  211,
                                  31,
                                  211,
                                  255,
                                  244,
                                  4,
                                  209,
                                  81,
                                  67,
                                  186,
                                  242,
                                  161,
                                  81,
                                  81,
                                  186,
                                  242,
                                  162,
                                  5,
                                  249,
                                  1,
                                  84,
                                  16,
                                  100,
                                  249,
                                  16,
                                  242,
                                  163,
                                  248,
                                  0,
                                  36,
                                  164,
                                  200,
                                  203,
                                  31,
                                  82,
                                  64,
                                  203,
                                  31,
                                  82,
                                  48,
                                  203,
                                  255,
                                  82,
                                  16,
                                  244,
                                  0,
                                  201,
                                  237,
                                  84,
                                  248,
                                  15,
                                  1,
                                  211,
                                  7,
                                  33,
                                  192,
                                  0,
                                  159,
                                  108,
                                  81,
                                  147,
                                  32,
                                  215,
                                  74,
                                  150,
                                  211,
                                  7,
                                  212,
                                  2,
                                  251,
                                  0,
                                  232,
                                  48,
                                  224,
                                  33,
                                  192,
                                  1,
                                  227,
                                  0,
                                  33,
                                  192,
                                  2,
                                  227,
                                  0,
                                  1,
                                  192,
                                  3,
                                  145,
                                  48,
                                  227,
                                  13,
                                  3,
                                  164,
                                  200,
                                  203,
                                  31,
                                  18,
                                  203,
                                  31,
                                  203,
                                  255,
                                  16,
                                  17,
                                  18,
                                  19,
                                  2,
                                  230,
                                  208,
                                  1,
                                  208,
                                  211,
                                  3,
                                  33,
                                  113,
                                  176,
                                  146,
                                  95,
                                  4,
                                  224,
                                  34,
                                  215,
                                  73,
                                  193,
                                  32,
                                  146,
                                  95,
                                  4,
                                  224,
                                  2,
                                  211,
                                  31,
                                  33,
                                  130,
                                  16,
                                  112,
                                  108,
                                  117,
                                  103,
                                  189,
                                  34,
                                  130,
                                  16,
                                  100,
                                  115,
                                  116,
                                  114,
                                  189,
                                  176,
                                  146,
                                  95,
                                  5,
                                  224,
                                  3,
                                  250,
                                  64,
                                  48,
                                  32,
                                  250,
                                  68,
                                  1,
                                  200,
                                  202,
                                  7,
                                  203,
                                  255,
                                  201,
                                  208,
                                  237,
                                  68,
                                  208,
                                  129,
                                  1,
                                  64,
                                  215,
                                  33,
                                  244,
                                  4,
                                  48,
                                  92,
                                  129,
                                  1,
                                  8,
                                  244,
                                  10,
                                  111,
                                  161,
                                  49,
                                  179,
                                  146,
                                  95,
                                  7,
                                  224,
                                  5,
                                  211,
                                  63,
                                  200,
                                  37,
                                  130,
                                  16,
                                  112,
                                  108,
                                  117,
                                  103,
                                  186,
                                  146,
                                  56,
                                  48,
                                  227,
                                  13,
                                  3,
                                  130,
                                  16,
                                  100,
                                  115,
                                  116,
                                  114,
                                  186,
                                  146,
                                  95,
                                  6,
                                  227,
                                  13,
                                  6,
                                  7,
                                  2,
                                  1,
                                  32,
                                  8,
                                  9,
                                  0,
                                  120,
                                  1,
                                  250,
                                  0,
                                  244,
                                  4,
                                  48,
                                  248,
                                  39,
                                  111,
                                  34,
                                  48,
                                  80,
                                  10,
                                  161,
                                  33,
                                  190,
                                  242,
                                  224,
                                  80,
                                  130,
                                  16,
                                  112,
                                  108,
                                  117,
                                  103,
                                  131,
                                  30,
                                  177,
                                  112,
                                  128,
                                  24,
                                  80,
                                  4,
                                  203,
                                  5,
                                  38,
                                  207,
                                  22,
                                  88,
                                  250,
                                  2,
                                  25,
                                  244,
                                  0,
                                  203,
                                  105,
                                  23,
                                  203,
                                  31,
                                  82,
                                  96,
                                  203,
                                  63,
                                  32,
                                  201,
                                  128,
                                  64,
                                  251,
                                  0,
                                  6,
                                  0,
                                  138,
                                  80,
                                  4,
                                  129,
                                  1,
                                  8,
                                  244,
                                  89,
                                  48,
                                  237,
                                  68,
                                  208,
                                  129,
                                  1,
                                  64,
                                  215,
                                  32,
                                  200,
                                  1,
                                  207,
                                  22,
                                  244,
                                  0,
                                  201,
                                  237,
                                  84,
                                  1,
                                  114,
                                  176,
                                  142,
                                  35,
                                  130,
                                  16,
                                  100,
                                  115,
                                  116,
                                  114,
                                  131,
                                  30,
                                  177,
                                  112,
                                  128,
                                  24,
                                  80,
                                  5,
                                  203,
                                  5,
                                  80,
                                  3,
                                  207,
                                  22,
                                  35,
                                  250,
                                  2,
                                  19,
                                  203,
                                  106,
                                  203,
                                  31,
                                  203,
                                  63,
                                  201,
                                  128,
                                  64,
                                  251,
                                  0,
                                  146,
                                  95,
                                  3,
                                  226,
                                  2,
                                  1,
                                  32,
                                  10,
                                  11,
                                  0,
                                  89,
                                  189,
                                  36,
                                  43,
                                  111,
                                  106,
                                  38,
                                  132,
                                  8,
                                  10,
                                  6,
                                  185,
                                  15,
                                  160,
                                  33,
                                  132,
                                  112,
                                  212,
                                  8,
                                  8,
                                  71,
                                  164,
                                  147,
                                  125,
                                  41,
                                  145,
                                  12,
                                  230,
                                  144,
                                  62,
                                  159,
                                  249,
                                  131,
                                  120,
                                  18,
                                  128,
                                  27,
                                  120,
                                  16,
                                  20,
                                  137,
                                  135,
                                  21,
                                  159,
                                  49,
                                  132,
                                  2,
                                  1,
                                  88,
                                  12,
                                  13,
                                  0,
                                  17,
                                  184,
                                  201,
                                  126,
                                  212,
                                  77,
                                  13,
                                  112,
                                  177,
                                  248,
                                  0,
                                  61,
                                  178,
                                  157,
                                  251,
                                  81,
                                  52,
                                  32,
                                  64,
                                  80,
                                  53,
                                  200,
                                  125,
                                  1,
                                  12,
                                  0,
                                  178,
                                  50,
                                  129,
                                  242,
                                  255,
                                  242,
                                  116,
                                  0,
                                  96,
                                  64,
                                  66,
                                  61,
                                  2,
                                  155,
                                  232,
                                  76,
                                  96,
                                  2,
                                  1,
                                  32,
                                  14,
                                  15,
                                  0,
                                  25,
                                  173,
                                  206,
                                  118,
                                  162,
                                  104,
                                  64,
                                  32,
                                  107,
                                  144,
                                  235,
                                  133,
                                  255,
                                  192,
                                  0,
                                  25,
                                  175,
                                  29,
                                  246,
                                  162,
                                  104,
                                  64,
                                  16,
                                  107,
                                  144,
                                  235,
                                  133,
                                  143,
                                  192,
                                  0,
                                  110,
                                  210,
                                  7,
                                  250,
                                  0,
                                  212,
                                  212,
                                  34,
                                  249,
                                  0,
                                  5,
                                  200,
                                  202,
                                  7,
                                  21,
                                  203,
                                  255,
                                  201,
                                  208,
                                  119,
                                  116,
                                  128,
                                  24,
                                  200,
                                  203,
                                  5,
                                  203,
                                  2,
                                  34,
                                  207,
                                  22,
                                  80,
                                  5,
                                  250,
                                  2,
                                  20,
                                  203,
                                  107,
                                  18,
                                  204,
                                  204,
                                  201,
                                  115,
                                  251,
                                  0,
                                  200,
                                  64,
                                  20,
                                  129,
                                  1,
                                  8,
                                  244,
                                  81,
                                  242,
                                  167,
                                  2,
                                  0,
                                  112,
                                  129,
                                  1,
                                  8,
                                  215,
                                  24,
                                  250,
                                  0,
                                  211,
                                  63,
                                  200,
                                  84,
                                  32,
                                  71,
                                  129,
                                  1,
                                  8,
                                  244,
                                  81,
                                  242,
                                  167,
                                  130,
                                  16,
                                  110,
                                  111,
                                  116,
                                  101,
                                  112,
                                  116,
                                  128,
                                  24,
                                  200,
                                  203,
                                  5,
                                  203,
                                  2,
                                  80,
                                  6,
                                  207,
                                  22,
                                  80,
                                  4,
                                  250,
                                  2,
                                  20,
                                  203,
                                  106,
                                  18,
                                  203,
                                  31,
                                  203,
                                  63,
                                  201,
                                  115,
                                  251,
                                  0,
                                  2,
                                  0,
                                  108,
                                  129,
                                  1,
                                  8,
                                  215,
                                  24,
                                  250,
                                  0,
                                  211,
                                  63,
                                  48,
                                  82,
                                  36,
                                  129,
                                  1,
                                  8,
                                  244,
                                  89,
                                  242,
                                  167,
                                  130,
                                  16,
                                  100,
                                  115,
                                  116,
                                  114,
                                  112,
                                  116,
                                  128,
                                  24,
                                  200,
                                  203,
                                  5,
                                  203,
                                  2,
                                  80,
                                  5,
                                  207,
                                  22,
                                  80,
                                  3,
                                  250,
                                  2,
                                  19,
                                  203,
                                  106,
                                  203,
                                  31,
                                  18,
                                  203,
                                  63,
                                  201,
                                  115,
                                  251,
                                  0,
                                  0,
                                  10,
                                  244,
                                  0,
                                  201,
                                  237,
                                  84,
                                ],
                                "type": "Buffer",
                              },
                              "_length": 68,
                              "_offset": 3752,
                              Symbol(nodejs.util.inspect.custom): [Function],
                            },
                            "depth": [Function],
                            "equals": [Function],
                            "hash": [Function],
                            "level": [Function],
                            "mask": LevelMask {
                              "_hashCount": 1,
                              "_hashIndex": 0,
                              "_mask": 0,
                            },
                            "refs": [],
                            "type": -1,
                            Symbol(nodejs.util.inspect.custom): [Function],
                          },
                        ],
                        "type": -1,
                        Symbol(nodejs.util.inspect.custom): [Function],
                      },
                      Cell {
                        "_depths": [
                          0,
                          0,
                          0,
                          0,
                        ],
                        "_hashes": [
                          {
                            "data": [
                              81,
                              36,
                              189,
                              192,
                              244,
                              186,
                              47,
                              149,
                              98,
                              87,
                              40,
                              75,
                              91,
                              76,
                              176,
                              105,
                              247,
                              98,
                              78,
                              163,
                              24,
                              243,
                              84,
                              204,
                              206,
                              37,
                              169,
                              109,
                              149,
                              88,
                              201,
                              177,
                            ],
                            "type": "Buffer",
                          },
                          {
                            "data": [
                              81,
                              36,
                              189,
                              192,
                              244,
                              186,
                              47,
                              149,
                              98,
                              87,
                              40,
                              75,
                              91,
                              76,
                              176,
                              105,
                              247,
                              98,
                              78,
                              163,
                              24,
                              243,
                              84,
                              204,
                              206,
                              37,
                              169,
                              109,
                              149,
                              88,
                              201,
                              177,
                            ],
                            "type": "Buffer",
                          },
                          {
                            "data": [
                              81,
                              36,
                              189,
                              192,
                              244,
                              186,
                              47,
                              149,
                              98,
                              87,
                              40,
                              75,
                              91,
                              76,
                              176,
                              105,
                              247,
                              98,
                              78,
                              163,
                              24,
                              243,
                              84,
                              204,
                              206,
                              37,
                              169,
                              109,
                              149,
                              88,
                              201,
                              177,
                            ],
                            "type": "Buffer",
                          },
                          {
                            "data": [
                              81,
                              36,
                              189,
                              192,
                              244,
                              186,
                              47,
                              149,
                              98,
                              87,
                              40,
                              75,
                              91,
                              76,
                              176,
                              105,
                              247,
                              98,
                              78,
                              163,
                              24,
                              243,
                              84,
                              204,
                              206,
                              37,
                              169,
                              109,
                              149,
                              88,
                              201,
                              177,
                            ],
                            "type": "Buffer",
                          },
                        ],
                        "beginParse": [Function],
                        "bits": BitString {
                          "_data": {
                            "data": [
                              1,
                              20,
                              255,
                              0,
                              244,
                              164,
                              19,
                              244,
                              188,
                              242,
                              200,
                              11,
                              1,
                              2,
                              1,
                              32,
                              2,
                              3,
                              2,
                              1,
                              72,
                              4,
                              5,
                              4,
                              248,
                              242,
                              131,
                              8,
                              215,
                              24,
                              32,
                              211,
                              31,
                              211,
                              31,
                              211,
                              31,
                              2,
                              248,
                              35,
                              187,
                              242,
                              100,
                              237,
                              68,
                              208,
                              211,
                              31,
                              211,
                              31,
                              211,
                              255,
                              244,
                              4,
                              209,
                              81,
                              67,
                              186,
                              242,
                              161,
                              81,
                              81,
                              186,
                              242,
                              162,
                              5,
                              249,
                              1,
                              84,
                              16,
                              100,
                              249,
                              16,
                              242,
                              163,
                              248,
                              0,
                              36,
                              164,
                              200,
                              203,
                              31,
                              82,
                              64,
                              203,
                              31,
                              82,
                              48,
                              203,
                              255,
                              82,
                              16,
                              244,
                              0,
                              201,
                              237,
                              84,
                              248,
                              15,
                              1,
                              211,
                              7,
                              33,
                              192,
                              0,
                              159,
                              108,
                              81,
                              147,
                              32,
                              215,
                              74,
                              150,
                              211,
                              7,
                              212,
                              2,
                              251,
                              0,
                              232,
                              48,
                              224,
                              33,
                              192,
                              1,
                              227,
                              0,
                              33,
                              192,
                              2,
                              227,
                              0,
                              1,
                              192,
                              3,
                              145,
                              48,
                              227,
                              13,
                              3,
                              164,
                              200,
                              203,
                              31,
                              18,
                              203,
                              31,
                              203,
                              255,
                              16,
                              17,
                              18,
                              19,
                              2,
                              230,
                              208,
                              1,
                              208,
                              211,
                              3,
                              33,
                              113,
                              176,
                              146,
                              95,
                              4,
                              224,
                              34,
                              215,
                              73,
                              193,
                              32,
                              146,
                              95,
                              4,
                              224,
                              2,
                              211,
                              31,
                              33,
                              130,
                              16,
                              112,
                              108,
                              117,
                              103,
                              189,
                              34,
                              130,
                              16,
                              100,
                              115,
                              116,
                              114,
                              189,
                              176,
                              146,
                              95,
                              5,
                              224,
                              3,
                              250,
                              64,
                              48,
                              32,
                              250,
                              68,
                              1,
                              200,
                              202,
                              7,
                              203,
                              255,
                              201,
                              208,
                              237,
                              68,
                              208,
                              129,
                              1,
                              64,
                              215,
                              33,
                              244,
                              4,
                              48,
                              92,
                              129,
                              1,
                              8,
                              244,
                              10,
                              111,
                              161,
                              49,
                              179,
                              146,
                              95,
                              7,
                              224,
                              5,
                              211,
                              63,
                              200,
                              37,
                              130,
                              16,
                              112,
                              108,
                              117,
                              103,
                              186,
                              146,
                              56,
                              48,
                              227,
                              13,
                              3,
                              130,
                              16,
                              100,
                              115,
                              116,
                              114,
                              186,
                              146,
                              95,
                              6,
                              227,
                              13,
                              6,
                              7,
                              2,
                              1,
                              32,
                              8,
                              9,
                              0,
                              120,
                              1,
                              250,
                              0,
                              244,
                              4,
                              48,
                              248,
                              39,
                              111,
                              34,
                              48,
                              80,
                              10,
                              161,
                              33,
                              190,
                              242,
                              224,
                              80,
                              130,
                              16,
                              112,
                              108,
                              117,
                              103,
                              131,
                              30,
                              177,
                              112,
                              128,
                              24,
                              80,
                              4,
                              203,
                              5,
                              38,
                              207,
                              22,
                              88,
                              250,
                              2,
                              25,
                              244,
                              0,
                              203,
                              105,
                              23,
                              203,
                              31,
                              82,
                              96,
                              203,
                              63,
                              32,
                              201,
                              128,
                              64,
                              251,
                              0,
                              6,
                              0,
                              138,
                              80,
                              4,
                              129,
                              1,
                              8,
                              244,
                              89,
                              48,
                              237,
                              68,
                              208,
                              129,
                              1,
                              64,
                              215,
                              32,
                              200,
                              1,
                              207,
                              22,
                              244,
                              0,
                              201,
                              237,
                              84,
                              1,
                              114,
                              176,
                              142,
                              35,
                              130,
                              16,
                              100,
                              115,
                              116,
                              114,
                              131,
                              30,
                              177,
                              112,
                              128,
                              24,
                              80,
                              5,
                              203,
                              5,
                              80,
                              3,
                              207,
                              22,
                              35,
                              250,
                              2,
                              19,
                              203,
                              106,
                              203,
                              31,
                              203,
                              63,
                              201,
                              128,
                              64,
                              251,
                              0,
                              146,
                              95,
                              3,
                              226,
                              2,
                              1,
                              32,
                              10,
                              11,
                              0,
                              89,
                              189,
                              36,
                              43,
                              111,
                              106,
                              38,
                              132,
                              8,
                              10,
                              6,
                              185,
                              15,
                              160,
                              33,
                              132,
                              112,
                              212,
                              8,
                              8,
                              71,
                              164,
                              147,
                              125,
                              41,
                              145,
                              12,
                              230,
                              144,
                              62,
                              159,
                              249,
                              131,
                              120,
                              18,
                              128,
                              27,
                              120,
                              16,
                              20,
                              137,
                              135,
                              21,
                              159,
                              49,
                              132,
                              2,
                              1,
                              88,
                              12,
                              13,
                              0,
                              17,
                              184,
                              201,
                              126,
                              212,
                              77,
                              13,
                              112,
                              177,
                              248,
                              0,
                              61,
                              178,
                              157,
                              251,
                              81,
                              52,
                              32,
                              64,
                              80,
                              53,
                              200,
                              125,
                              1,
                              12,
                              0,
                              178,
                              50,
                              129,
                              242,
                              255,
                              242,
                              116,
                              0,
                              96,
                              64,
                              66,
                              61,
                              2,
                              155,
                              232,
                              76,
                              96,
                              2,
                              1,
                              32,
                              14,
                              15,
                              0,
                              25,
                              173,
                              206,
                              118,
                              162,
                              104,
                              64,
                              32,
                              107,
                              144,
                              235,
                              133,
                              255,
                              192,
                              0,
                              25,
                              175,
                              29,
                              246,
                              162,
                              104,
                              64,
                              16,
                              107,
                              144,
                              235,
                              133,
                              143,
                              192,
                              0,
                              110,
                              210,
                              7,
                              250,
                              0,
                              212,
                              212,
                              34,
                              249,
                              0,
                              5,
                              200,
                              202,
                              7,
                              21,
                              203,
                              255,
                              201,
                              208,
                              119,
                              116,
                              128,
                              24,
                              200,
                              203,
                              5,
                              203,
                              2,
                              34,
                              207,
                              22,
                              80,
                              5,
                              250,
                              2,
                              20,
                              203,
                              107,
                              18,
                              204,
                              204,
                              201,
                              115,
                              251,
                              0,
                              200,
                              64,
                              20,
                              129,
                              1,
                              8,
                              244,
                              81,
                              242,
                              167,
                              2,
                              0,
                              112,
                              129,
                              1,
                              8,
                              215,
                              24,
                              250,
                              0,
                              211,
                              63,
                              200,
                              84,
                              32,
                              71,
                              129,
                              1,
                              8,
                              244,
                              81,
                              242,
                              167,
                              130,
                              16,
                              110,
                              111,
                              116,
                              101,
                              112,
                              116,
                              128,
                              24,
                              200,
                              203,
                              5,
                              203,
                              2,
                              80,
                              6,
                              207,
                              22,
                              80,
                              4,
                              250,
                              2,
                              20,
                              203,
                              106,
                              18,
                              203,
                              31,
                              203,
                              63,
                              201,
                              115,
                              251,
                              0,
                              2,
                              0,
                              108,
                              129,
                              1,
                              8,
                              215,
                              24,
                              250,
                              0,
                              211,
                              63,
                              48,
                              82,
                              36,
                              129,
                              1,
                              8,
                              244,
                              89,
                              242,
                              167,
                              130,
                              16,
                              100,
                              115,
                              116,
                              114,
                              112,
                              116,
                              128,
                              24,
                              200,
                              203,
                              5,
                              203,
                              2,
                              80,
                              5,
                              207,
                              22,
                              80,
                              3,
                              250,
                              2,
                              19,
                              203,
                              106,
                              203,
                              31,
                              18,
                              203,
                              63,
                              201,
                              115,
                              251,
                              0,
                              0,
                              10,
                              244,
                              0,
                              201,
                              237,
                              84,
                            ],
                            "type": "Buffer",
                          },
                          "_length": 357,
                          "_offset": 3336,
                          Symbol(nodejs.util.inspect.custom): [Function],
                        },
                        "depth": [Function],
                        "equals": [Function],
                        "hash": [Function],
                        "level": [Function],
                        "mask": LevelMask {
                          "_hashCount": 1,
                          "_hashIndex": 0,
                          "_mask": 0,
                        },
                        "refs": [],
                        "type": -1,
                        Symbol(nodejs.util.inspect.custom): [Function],
                      },
                    ],
                    "type": -1,
                    Symbol(nodejs.util.inspect.custom): [Function],
                  },
                ],
                "type": -1,
                Symbol(nodejs.util.inspect.custom): [Function],
              },
              Cell {
                "_depths": [
                  1,
                  1,
                  1,
                  1,
                ],
                "_hashes": [
                  {
                    "data": [
                      95,
                      75,
                      190,
                      92,
                      172,
                      239,
                      235,
                      119,
                      105,
                      166,
                      130,
                      228,
                      60,
                      71,
                      240,
                      107,
                      153,
                      177,
                      62,
                      98,
                      125,
                      13,
                      179,
                      21,
                      94,
                      109,
                      68,
                      21,
                      34,
                      215,
                      235,
                      215,
                    ],
                    "type": "Buffer",
                  },
                  {
                    "data": [
                      95,
                      75,
                      190,
                      92,
                      172,
                      239,
                      235,
                      119,
                      105,
                      166,
                      130,
                      228,
                      60,
                      71,
                      240,
                      107,
                      153,
                      177,
                      62,
                      98,
                      125,
                      13,
                      179,
                      21,
                      94,
                      109,
                      68,
                      21,
                      34,
                      215,
                      235,
                      215,
                    ],
                    "type": "Buffer",
                  },
                  {
                    "data": [
                      95,
                      75,
                      190,
                      92,
                      172,
                      239,
                      235,
                      119,
                      105,
                      166,
                      130,
                      228,
                      60,
                      71,
                      240,
                      107,
                      153,
                      177,
                      62,
                      98,
                      125,
                      13,
                      179,
                      21,
                      94,
                      109,
                      68,
                      21,
                      34,
                      215,
                      235,
                      215,
                    ],
                    "type": "Buffer",
                  },
                  {
                    "data": [
                      95,
                      75,
                      190,
                      92,
                      172,
                      239,
                      235,
                      119,
                      105,
                      166,
                      130,
                      228,
                      60,
                      71,
                      240,
                      107,
                      153,
                      177,
                      62,
                      98,
                      125,
                      13,
                      179,
                      21,
                      94,
                      109,
                      68,
                      21,
                      34,
                      215,
                      235,
                      215,
                    ],
                    "type": "Buffer",
                  },
                ],
                "beginParse": [Function],
                "bits": BitString {
                  "_data": {
                    "data": [
                      1,
                      20,
                      255,
                      0,
                      244,
                      164,
                      19,
                      244,
                      188,
                      242,
                      200,
                      11,
                      1,
                      2,
                      1,
                      32,
                      2,
                      3,
                      2,
                      1,
                      72,
                      4,
                      5,
                      4,
                      248,
                      242,
                      131,
                      8,
                      215,
                      24,
                      32,
                      211,
                      31,
                      211,
                      31,
                      211,
                      31,
                      2,
                      248,
                      35,
                      187,
                      242,
                      100,
                      237,
                      68,
                      208,
                      211,
                      31,
                      211,
                      31,
                      211,
                      255,
                      244,
                      4,
                      209,
                      81,
                      67,
                      186,
                      242,
                      161,
                      81,
                      81,
                      186,
                      242,
                      162,
                      5,
                      249,
                      1,
                      84,
                      16,
                      100,
                      249,
                      16,
                      242,
                      163,
                      248,
                      0,
                      36,
                      164,
                      200,
                      203,
                      31,
                      82,
                      64,
                      203,
                      31,
                      82,
                      48,
                      203,
                      255,
                      82,
                      16,
                      244,
                      0,
                      201,
                      237,
                      84,
                      248,
                      15,
                      1,
                      211,
                      7,
                      33,
                      192,
                      0,
                      159,
                      108,
                      81,
                      147,
                      32,
                      215,
                      74,
                      150,
                      211,
                      7,
                      212,
                      2,
                      251,
                      0,
                      232,
                      48,
                      224,
                      33,
                      192,
                      1,
                      227,
                      0,
                      33,
                      192,
                      2,
                      227,
                      0,
                      1,
                      192,
                      3,
                      145,
                      48,
                      227,
                      13,
                      3,
                      164,
                      200,
                      203,
                      31,
                      18,
                      203,
                      31,
                      203,
                      255,
                      16,
                      17,
                      18,
                      19,
                      2,
                      230,
                      208,
                      1,
                      208,
                      211,
                      3,
                      33,
                      113,
                      176,
                      146,
                      95,
                      4,
                      224,
                      34,
                      215,
                      73,
                      193,
                      32,
                      146,
                      95,
                      4,
                      224,
                      2,
                      211,
                      31,
                      33,
                      130,
                      16,
                      112,
                      108,
                      117,
                      103,
                      189,
                      34,
                      130,
                      16,
                      100,
                      115,
                      116,
                      114,
                      189,
                      176,
                      146,
                      95,
                      5,
                      224,
                      3,
                      250,
                      64,
                      48,
                      32,
                      250,
                      68,
                      1,
                      200,
                      202,
                      7,
                      203,
                      255,
                      201,
                      208,
                      237,
                      68,
                      208,
                      129,
                      1,
                      64,
                      215,
                      33,
                      244,
                      4,
                      48,
                      92,
                      129,
                      1,
                      8,
                      244,
                      10,
                      111,
                      161,
                      49,
                      179,
                      146,
                      95,
                      7,
                      224,
                      5,
                      211,
                      63,
                      200,
                      37,
                      130,
                      16,
                      112,
                      108,
                      117,
                      103,
                      186,
                      146,
                      56,
                      48,
                      227,
                      13,
                      3,
                      130,
                      16,
                      100,
                      115,
                      116,
                      114,
                      186,
                      146,
                      95,
                      6,
                      227,
                      13,
                      6,
                      7,
                      2,
                      1,
                      32,
                      8,
                      9,
                      0,
                      120,
                      1,
                      250,
                      0,
                      244,
                      4,
                      48,
                      248,
                      39,
                      111,
                      34,
                      48,
                      80,
                      10,
                      161,
                      33,
                      190,
                      242,
                      224,
                      80,
                      130,
                      16,
                      112,
                      108,
                      117,
                      103,
                      131,
                      30,
                      177,
                      112,
                      128,
                      24,
                      80,
                      4,
                      203,
                      5,
                      38,
                      207,
                      22,
                      88,
                      250,
                      2,
                      25,
                      244,
                      0,
                      203,
                      105,
                      23,
                      203,
                      31,
                      82,
                      96,
                      203,
                      63,
                      32,
                      201,
                      128,
                      64,
                      251,
                      0,
                      6,
                      0,
                      138,
                      80,
                      4,
                      129,
                      1,
                      8,
                      244,
                      89,
                      48,
                      237,
                      68,
                      208,
                      129,
                      1,
                      64,
                      215,
                      32,
                      200,
                      1,
                      207,
                      22,
                      244,
                      0,
                      201,
                      237,
                      84,
                      1,
                      114,
                      176,
                      142,
                      35,
                      130,
                      16,
                      100,
                      115,
                      116,
                      114,
                      131,
                      30,
                      177,
                      112,
                      128,
                      24,
                      80,
                      5,
                      203,
                      5,
                      80,
                      3,
                      207,
                      22,
                      35,
                      250,
                      2,
                      19,
                      203,
                      106,
                      203,
                      31,
                      203,
                      63,
                      201,
                      128,
                      64,
                      251,
                      0,
                      146,
                      95,
                      3,
                      226,
                      2,
                      1,
                      32,
                      10,
                      11,
                      0,
                      89,
                      189,
                      36,
                      43,
                      111,
                      106,
                      38,
                      132,
                      8,
                      10,
                      6,
                      185,
                      15,
                      160,
                      33,
                      132,
                      112,
                      212,
                      8,
                      8,
                      71,
                      164,
                      147,
                      125,
                      41,
                      145,
                      12,
                      230,
                      144,
                      62,
                      159,
                      249,
                      131,
                      120,
                      18,
                      128,
                      27,
                      120,
                      16,
                      20,
                      137,
                      135,
                      21,
                      159,
                      49,
                      132,
                      2,
                      1,
                      88,
                      12,
                      13,
                      0,
                      17,
                      184,
                      201,
                      126,
                      212,
                      77,
                      13,
                      112,
                      177,
                      248,
                      0,
                      61,
                      178,
                      157,
                      251,
                      81,
                      52,
                      32,
                      64,
                      80,
                      53,
                      200,
                      125,
                      1,
                      12,
                      0,
                      178,
                      50,
                      129,
                      242,
                      255,
                      242,
                      116,
                      0,
                      96,
                      64,
                      66,
                      61,
                      2,
                      155,
                      232,
                      76,
                      96,
                      2,
                      1,
                      32,
                      14,
                      15,
                      0,
                      25,
                      173,
                      206,
                      118,
                      162,
                      104,
                      64,
                      32,
                      107,
                      144,
                      235,
                      133,
                      255,
                      192,
                      0,
                      25,
                      175,
                      29,
                      246,
                      162,
                      104,
                      64,
                      16,
                      107,
                      144,
                      235,
                      133,
                      143,
                      192,
                      0,
                      110,
                      210,
                      7,
                      250,
                      0,
                      212,
                      212,
                      34,
                      249,
                      0,
                      5,
                      200,
                      202,
                      7,
                      21,
                      203,
                      255,
                      201,
                      208,
                      119,
                      116,
                      128,
                      24,
                      200,
                      203,
                      5,
                      203,
                      2,
                      34,
                      207,
                      22,
                      80,
                      5,
                      250,
                      2,
                      20,
                      203,
                      107,
                      18,
                      204,
                      204,
                      201,
                      115,
                      251,
                      0,
                      200,
                      64,
                      20,
                      129,
                      1,
                      8,
                      244,
                      81,
                      242,
                      167,
                      2,
                      0,
                      112,
                      129,
                      1,
                      8,
                      215,
                      24,
                      250,
                      0,
                      211,
                      63,
                      200,
                      84,
                      32,
                      71,
                      129,
                      1,
                      8,
                      244,
                      81,
                      242,
                      167,
                      130,
                      16,
                      110,
                      111,
                      116,
                      101,
                      112,
                      116,
                      128,
                      24,
                      200,
                      203,
                      5,
                      203,
                      2,
                      80,
                      6,
                      207,
                      22,
                      80,
                      4,
                      250,
                      2,
                      20,
                      203,
                      106,
                      18,
                      203,
                      31,
                      203,
                      63,
                      201,
                      115,
                      251,
                      0,
                      2,
                      0,
                      108,
                      129,
                      1,
                      8,
                      215,
                      24,
                      250,
                      0,
                      211,
                      63,
                      48,
                      82,
                      36,
                      129,
                      1,
                      8,
                      244,
                      89,
                      242,
                      167,
                      130,
                      16,
                      100,
                      115,
                      116,
                      114,
                      112,
                      116,
                      128,
                      24,
                      200,
                      203,
                      5,
                      203,
                      2,
                      80,
                      5,
                      207,
                      22,
                      80,
                      3,
                      250,
                      2,
                      19,
                      203,
                      106,
                      203,
                      31,
                      18,
                      203,
                      63,
                      201,
                      115,
                      251,
                      0,
                      0,
                      10,
                      244,
                      0,
                      201,
                      237,
                      84,
                    ],
                    "type": "Buffer",
                  },
                  "_length": 992,
                  "_offset": 200,
                  Symbol(nodejs.util.inspect.custom): [Function],
                },
                "depth": [Function],
                "equals": [Function],
                "hash": [Function],
                "level": [Function],
                "mask": LevelMask {
                  "_hashCount": 1,
                  "_hashIndex": 0,
                  "_mask": 0,
                },
                "refs": [
                  Cell {
                    "_depths": [
                      0,
                      0,
                      0,
                      0,
                    ],
                    "_hashes": [
                      {
                        "data": [
                          64,
                          108,
                          196,
                          33,
                          186,
                          39,
                          134,
                          53,
                          215,
                          114,
                          170,
                          102,
                          40,
                          215,
                          121,
                          92,
                          166,
                          32,
                          54,
                          173,
                          108,
                          105,
                          82,
                          151,
                          198,
                          62,
                          213,
                          228,
                          47,
                          215,
                          49,
                          171,
                        ],
                        "type": "Buffer",
                      },
                      {
                        "data": [
                          64,
                          108,
                          196,
                          33,
                          186,
                          39,
                          134,
                          53,
                          215,
                          114,
                          170,
                          102,
                          40,
                          215,
                          121,
                          92,
                          166,
                          32,
                          54,
                          173,
                          108,
                          105,
                          82,
                          151,
                          198,
                          62,
                          213,
                          228,
                          47,
                          215,
                          49,
                          171,
                        ],
                        "type": "Buffer",
                      },
                      {
                        "data": [
                          64,
                          108,
                          196,
                          33,
                          186,
                          39,
                          134,
                          53,
                          215,
                          114,
                          170,
                          102,
                          40,
                          215,
                          121,
                          92,
                          166,
                          32,
                          54,
                          173,
                          108,
                          105,
                          82,
                          151,
                          198,
                          62,
                          213,
                          228,
                          47,
                          215,
                          49,
                          171,
                        ],
                        "type": "Buffer",
                      },
                      {
                        "data": [
                          64,
                          108,
                          196,
                          33,
                          186,
                          39,
                          134,
                          53,
                          215,
                          114,
                          170,
                          102,
                          40,
                          215,
                          121,
                          92,
                          166,
                          32,
                          54,
                          173,
                          108,
                          105,
                          82,
                          151,
                          198,
                          62,
                          213,
                          228,
                          47,
                          215,
                          49,
                          171,
                        ],
                        "type": "Buffer",
                      },
                    ],
                    "beginParse": [Function],
                    "bits": BitString {
                      "_data": {
                        "data": [
                          1,
                          20,
                          255,
                          0,
                          244,
                          164,
                          19,
                          244,
                          188,
                          242,
                          200,
                          11,
                          1,
                          2,
                          1,
                          32,
                          2,
                          3,
                          2,
                          1,
                          72,
                          4,
                          5,
                          4,
                          248,
                          242,
                          131,
                          8,
                          215,
                          24,
                          32,
                          211,
                          31,
                          211,
                          31,
                          211,
                          31,
                          2,
                          248,
                          35,
                          187,
                          242,
                          100,
                          237,
                          68,
                          208,
                          211,
                          31,
                          211,
                          31,
                          211,
                          255,
                          244,
                          4,
                          209,
                          81,
                          67,
                          186,
                          242,
                          161,
                          81,
                          81,
                          186,
                          242,
                          162,
                          5,
                          249,
                          1,
                          84,
                          16,
                          100,
                          249,
                          16,
                          242,
                          163,
                          248,
                          0,
                          36,
                          164,
                          200,
                          203,
                          31,
                          82,
                          64,
                          203,
                          31,
                          82,
                          48,
                          203,
                          255,
                          82,
                          16,
                          244,
                          0,
                          201,
                          237,
                          84,
                          248,
                          15,
                          1,
                          211,
                          7,
                          33,
                          192,
                          0,
                          159,
                          108,
                          81,
                          147,
                          32,
                          215,
                          74,
                          150,
                          211,
                          7,
                          212,
                          2,
                          251,
                          0,
                          232,
                          48,
                          224,
                          33,
                          192,
                          1,
                          227,
                          0,
                          33,
                          192,
                          2,
                          227,
                          0,
                          1,
                          192,
                          3,
                          145,
                          48,
                          227,
                          13,
                          3,
                          164,
                          200,
                          203,
                          31,
                          18,
                          203,
                          31,
                          203,
                          255,
                          16,
                          17,
                          18,
                          19,
                          2,
                          230,
                          208,
                          1,
                          208,
                          211,
                          3,
                          33,
                          113,
                          176,
                          146,
                          95,
                          4,
                          224,
                          34,
                          215,
                          73,
                          193,
                          32,
                          146,
                          95,
                          4,
                          224,
                          2,
                          211,
                          31,
                          33,
                          130,
                          16,
                          112,
                          108,
                          117,
                          103,
                          189,
                          34,
                          130,
                          16,
                          100,
                          115,
                          116,
                          114,
                          189,
                          176,
                          146,
                          95,
                          5,
                          224,
                          3,
                          250,
                          64,
                          48,
                          32,
                          250,
                          68,
                          1,
                          200,
                          202,
                          7,
                          203,
                          255,
                          201,
                          208,
                          237,
                          68,
                          208,
                          129,
                          1,
                          64,
                          215,
                          33,
                          244,
                          4,
                          48,
                          92,
                          129,
                          1,
                          8,
                          244,
                          10,
                          111,
                          161,
                          49,
                          179,
                          146,
                          95,
                          7,
                          224,
                          5,
                          211,
                          63,
                          200,
                          37,
                          130,
                          16,
                          112,
                          108,
                          117,
                          103,
                          186,
                          146,
                          56,
                          48,
                          227,
                          13,
                          3,
                          130,
                          16,
                          100,
                          115,
                          116,
                          114,
                          186,
                          146,
                          95,
                          6,
                          227,
                          13,
                          6,
                          7,
                          2,
                          1,
                          32,
                          8,
                          9,
                          0,
                          120,
                          1,
                          250,
                          0,
                          244,
                          4,
                          48,
                          248,
                          39,
                          111,
                          34,
                          48,
                          80,
                          10,
                          161,
                          33,
                          190,
                          242,
                          224,
                          80,
                          130,
                          16,
                          112,
                          108,
                          117,
                          103,
                          131,
                          30,
                          177,
                          112,
                          128,
                          24,
                          80,
                          4,
                          203,
                          5,
                          38,
                          207,
                          22,
                          88,
                          250,
                          2,
                          25,
                          244,
                          0,
                          203,
                          105,
                          23,
                          203,
                          31,
                          82,
                          96,
                          203,
                          63,
                          32,
                          201,
                          128,
                          64,
                          251,
                          0,
                          6,
                          0,
                          138,
                          80,
                          4,
                          129,
                          1,
                          8,
                          244,
                          89,
                          48,
                          237,
                          68,
                          208,
                          129,
                          1,
                          64,
                          215,
                          32,
                          200,
                          1,
                          207,
                          22,
                          244,
                          0,
                          201,
                          237,
                          84,
                          1,
                          114,
                          176,
                          142,
                          35,
                          130,
                          16,
                          100,
                          115,
                          116,
                          114,
                          131,
                          30,
                          177,
                          112,
                          128,
                          24,
                          80,
                          5,
                          203,
                          5,
                          80,
                          3,
                          207,
                          22,
                          35,
                          250,
                          2,
                          19,
                          203,
                          106,
                          203,
                          31,
                          203,
                          63,
                          201,
                          128,
                          64,
                          251,
                          0,
                          146,
                          95,
                          3,
                          226,
                          2,
                          1,
                          32,
                          10,
                          11,
                          0,
                          89,
                          189,
                          36,
                          43,
                          111,
                          106,
                          38,
                          132,
                          8,
                          10,
                          6,
                          185,
                          15,
                          160,
                          33,
                          132,
                          112,
                          212,
                          8,
                          8,
                          71,
                          164,
                          147,
                          125,
                          41,
                          145,
                          12,
                          230,
                          144,
                          62,
                          159,
                          249,
                          131,
                          120,
                          18,
                          128,
                          27,
                          120,
                          16,
                          20,
                          137,
                          135,
                          21,
                          159,
                          49,
                          132,
                          2,
                          1,
                          88,
                          12,
                          13,
                          0,
                          17,
                          184,
                          201,
                          126,
                          212,
                          77,
                          13,
                          112,
                          177,
                          248,
                          0,
                          61,
                          178,
                          157,
                          251,
                          81,
                          52,
                          32,
                          64,
                          80,
                          53,
                          200,
                          125,
                          1,
                          12,
                          0,
                          178,
                          50,
                          129,
                          242,
                          255,
                          242,
                          116,
                          0,
                          96,
                          64,
                          66,
                          61,
                          2,
                          155,
                          232,
                          76,
                          96,
                          2,
                          1,
                          32,
                          14,
                          15,
                          0,
                          25,
                          173,
                          206,
                          118,
                          162,
                          104,
                          64,
                          32,
                          107,
                          144,
                          235,
                          133,
                          255,
                          192,
                          0,
                          25,
                          175,
                          29,
                          246,
                          162,
                          104,
                          64,
                          16,
                          107,
                          144,
                          235,
                          133,
                          143,
                          192,
                          0,
                          110,
                          210,
                          7,
                          250,
                          0,
                          212,
                          212,
                          34,
                          249,
                          0,
                          5,
                          200,
                          202,
                          7,
                          21,
                          203,
                          255,
                          201,
                          208,
                          119,
                          116,
                          128,
                          24,
                          200,
                          203,
                          5,
                          203,
                          2,
                          34,
                          207,
                          22,
                          80,
                          5,
                          250,
                          2,
                          20,
                          203,
                          107,
                          18,
                          204,
                          204,
                          201,
                          115,
                          251,
                          0,
                          200,
                          64,
                          20,
                          129,
                          1,
                          8,
                          244,
                          81,
                          242,
                          167,
                          2,
                          0,
                          112,
                          129,
                          1,
                          8,
                          215,
                          24,
                          250,
                          0,
                          211,
                          63,
                          200,
                          84,
                          32,
                          71,
                          129,
                          1,
                          8,
                          244,
                          81,
                          242,
                          167,
                          130,
                          16,
                          110,
                          111,
                          116,
                          101,
                          112,
                          116,
                          128,
                          24,
                          200,
                          203,
                          5,
                          203,
                          2,
                          80,
                          6,
                          207,
                          22,
                          80,
                          4,
                          250,
                          2,
                          20,
                          203,
                          106,
                          18,
                          203,
                          31,
                          203,
                          63,
                          201,
                          115,
                          251,
                          0,
                          2,
                          0,
                          108,
                          129,
                          1,
                          8,
                          215,
                          24,
                          250,
                          0,
                          211,
                          63,
                          48,
                          82,
                          36,
                          129,
                          1,
                          8,
                          244,
                          89,
                          242,
                          167,
                          130,
                          16,
                          100,
                          115,
                          116,
                          114,
                          112,
                          116,
                          128,
                          24,
                          200,
                          203,
                          5,
                          203,
                          2,
                          80,
                          5,
                          207,
                          22,
                          80,
                          3,
                          250,
                          2,
                          19,
                          203,
                          106,
                          203,
                          31,
                          18,
                          203,
                          63,
                          201,
                          115,
                          251,
                          0,
                          0,
                          10,
                          244,
                          0,
                          201,
                          237,
                          84,
                        ],
                        "type": "Buffer",
                      },
                      "_length": 440,
                      "_offset": 4384,
                      Symbol(nodejs.util.inspect.custom): [Function],
                    },
                    "depth": [Function],
                    "equals": [Function],
                    "hash": [Function],
                    "level": [Function],
                    "mask": LevelMask {
                      "_hashCount": 1,
                      "_hashIndex": 0,
                      "_mask": 0,
                    },
                    "refs": [],
                    "type": -1,
                    Symbol(nodejs.util.inspect.custom): [Function],
                  },
                  Cell {
                    "_depths": [
                      0,
                      0,
                      0,
                      0,
                    ],
                    "_hashes": [
                      {
                        "data": [
                          50,
                          30,
                          129,
                          215,
                          178,
                          196,
                          28,
                          61,
                          46,
                          52,
                          247,
                          221,
                          89,
                          87,
                          13,
                          42,
                          149,
                          172,
                          57,
                          72,
                          175,
                          25,
                          197,
                          168,
                          157,
                          28,
                          205,
                          88,
                          95,
                          137,
                          227,
                          132,
                        ],
                        "type": "Buffer",
                      },
                      {
                        "data": [
                          50,
                          30,
                          129,
                          215,
                          178,
                          196,
                          28,
                          61,
                          46,
                          52,
                          247,
                          221,
                          89,
                          87,
                          13,
                          42,
                          149,
                          172,
                          57,
                          72,
                          175,
                          25,
                          197,
                          168,
                          157,
                          28,
                          205,
                          88,
                          95,
                          137,
                          227,
                          132,
                        ],
                        "type": "Buffer",
                      },
                      {
                        "data": [
                          50,
                          30,
                          129,
                          215,
                          178,
                          196,
                          28,
                          61,
                          46,
                          52,
                          247,
                          221,
                          89,
                          87,
                          13,
                          42,
                          149,
                          172,
                          57,
                          72,
                          175,
                          25,
                          197,
                          168,
                          157,
                          28,
                          205,
                          88,
                          95,
                          137,
                          227,
                          132,
                        ],
                        "type": "Buffer",
                      },
                      {
                        "data": [
                          50,
                          30,
                          129,
                          215,
                          178,
                          196,
                          28,
                          61,
                          46,
                          52,
                          247,
                          221,
                          89,
                          87,
                          13,
                          42,
                          149,
                          172,
                          57,
                          72,
                          175,
                          25,
                          197,
                          168,
                          157,
                          28,
                          205,
                          88,
                          95,
                          137,
                          227,
                          132,
                        ],
                        "type": "Buffer",
                      },
                    ],
                    "beginParse": [Function],
                    "bits": BitString {
                      "_data": {
                        "data": [
                          1,
                          20,
                          255,
                          0,
                          244,
                          164,
                          19,
                          244,
                          188,
                          242,
                          200,
                          11,
                          1,
                          2,
                          1,
                          32,
                          2,
                          3,
                          2,
                          1,
                          72,
                          4,
                          5,
                          4,
                          248,
                          242,
                          131,
                          8,
                          215,
                          24,
                          32,
                          211,
                          31,
                          211,
                          31,
                          211,
                          31,
                          2,
                          248,
                          35,
                          187,
                          242,
                          100,
                          237,
                          68,
                          208,
                          211,
                          31,
                          211,
                          31,
                          211,
                          255,
                          244,
                          4,
                          209,
                          81,
                          67,
                          186,
                          242,
                          161,
                          81,
                          81,
                          186,
                          242,
                          162,
                          5,
                          249,
                          1,
                          84,
                          16,
                          100,
                          249,
                          16,
                          242,
                          163,
                          248,
                          0,
                          36,
                          164,
                          200,
                          203,
                          31,
                          82,
                          64,
                          203,
                          31,
                          82,
                          48,
                          203,
                          255,
                          82,
                          16,
                          244,
                          0,
                          201,
                          237,
                          84,
                          248,
                          15,
                          1,
                          211,
                          7,
                          33,
                          192,
                          0,
                          159,
                          108,
                          81,
                          147,
                          32,
                          215,
                          74,
                          150,
                          211,
                          7,
                          212,
                          2,
                          251,
                          0,
                          232,
                          48,
                          224,
                          33,
                          192,
                          1,
                          227,
                          0,
                          33,
                          192,
                          2,
                          227,
                          0,
                          1,
                          192,
                          3,
                          145,
                          48,
                          227,
                          13,
                          3,
                          164,
                          200,
                          203,
                          31,
                          18,
                          203,
                          31,
                          203,
                          255,
                          16,
                          17,
                          18,
                          19,
                          2,
                          230,
                          208,
                          1,
                          208,
                          211,
                          3,
                          33,
                          113,
                          176,
                          146,
                          95,
                          4,
                          224,
                          34,
                          215,
                          73,
                          193,
                          32,
                          146,
                          95,
                          4,
                          224,
                          2,
                          211,
                          31,
                          33,
                          130,
                          16,
                          112,
                          108,
                          117,
                          103,
                          189,
                          34,
                          130,
                          16,
                          100,
                          115,
                          116,
                          114,
                          189,
                          176,
                          146,
                          95,
                          5,
                          224,
                          3,
                          250,
                          64,
                          48,
                          32,
                          250,
                          68,
                          1,
                          200,
                          202,
                          7,
                          203,
                          255,
                          201,
                          208,
                          237,
                          68,
                          208,
                          129,
                          1,
                          64,
                          215,
                          33,
                          244,
                          4,
                          48,
                          92,
                          129,
                          1,
                          8,
                          244,
                          10,
                          111,
                          161,
                          49,
                          179,
                          146,
                          95,
                          7,
                          224,
                          5,
                          211,
                          63,
                          200,
                          37,
                          130,
                          16,
                          112,
                          108,
                          117,
                          103,
                          186,
                          146,
                          56,
                          48,
                          227,
                          13,
                          3,
                          130,
                          16,
                          100,
                          115,
                          116,
                          114,
                          186,
                          146,
                          95,
                          6,
                          227,
                          13,
                          6,
                          7,
                          2,
                          1,
                          32,
                          8,
                          9,
                          0,
                          120,
                          1,
                          250,
                          0,
                          244,
                          4,
                          48,
                          248,
                          39,
                          111,
                          34,
                          48,
                          80,
                          10,
                          161,
                          33,
                          190,
                          242,
                          224,
                          80,
                          130,
                          16,
                          112,
                          108,
                          117,
                          103,
                          131,
                          30,
                          177,
                          112,
                          128,
                          24,
                          80,
                          4,
                          203,
                          5,
                          38,
                          207,
                          22,
                          88,
                          250,
                          2,
                          25,
                          244,
                          0,
                          203,
                          105,
                          23,
                          203,
                          31,
                          82,
                          96,
                          203,
                          63,
                          32,
                          201,
                          128,
                          64,
                          251,
                          0,
                          6,
                          0,
                          138,
                          80,
                          4,
                          129,
                          1,
                          8,
                          244,
                          89,
                          48,
                          237,
                          68,
                          208,
                          129,
                          1,
                          64,
                          215,
                          32,
                          200,
                          1,
                          207,
                          22,
                          244,
                          0,
                          201,
                          237,
                          84,
                          1,
                          114,
                          176,
                          142,
                          35,
                          130,
                          16,
                          100,
                          115,
                          116,
                          114,
                          131,
                          30,
                          177,
                          112,
                          128,
                          24,
                          80,
                          5,
                          203,
                          5,
                          80,
                          3,
                          207,
                          22,
                          35,
                          250,
                          2,
                          19,
                          203,
                          106,
                          203,
                          31,
                          203,
                          63,
                          201,
                          128,
                          64,
                          251,
                          0,
                          146,
                          95,
                          3,
                          226,
                          2,
                          1,
                          32,
                          10,
                          11,
                          0,
                          89,
                          189,
                          36,
                          43,
                          111,
                          106,
                          38,
                          132,
                          8,
                          10,
                          6,
                          185,
                          15,
                          160,
                          33,
                          132,
                          112,
                          212,
                          8,
                          8,
                          71,
                          164,
                          147,
                          125,
                          41,
                          145,
                          12,
                          230,
                          144,
                          62,
                          159,
                          249,
                          131,
                          120,
                          18,
                          128,
                          27,
                          120,
                          16,
                          20,
                          137,
                          135,
                          21,
                          159,
                          49,
                          132,
                          2,
                          1,
                          88,
                          12,
                          13,
                          0,
                          17,
                          184,
                          201,
                          126,
                          212,
                          77,
                          13,
                          112,
                          177,
                          248,
                          0,
                          61,
                          178,
                          157,
                          251,
                          81,
                          52,
                          32,
                          64,
                          80,
                          53,
                          200,
                          125,
                          1,
                          12,
                          0,
                          178,
                          50,
                          129,
                          242,
                          255,
                          242,
                          116,
                          0,
                          96,
                          64,
                          66,
                          61,
                          2,
                          155,
                          232,
                          76,
                          96,
                          2,
                          1,
                          32,
                          14,
                          15,
                          0,
                          25,
                          173,
                          206,
                          118,
                          162,
                          104,
                          64,
                          32,
                          107,
                          144,
                          235,
                          133,
                          255,
                          192,
                          0,
                          25,
                          175,
                          29,
                          246,
                          162,
                          104,
                          64,
                          16,
                          107,
                          144,
                          235,
                          133,
                          143,
                          192,
                          0,
                          110,
                          210,
                          7,
                          250,
                          0,
                          212,
                          212,
                          34,
                          249,
                          0,
                          5,
                          200,
                          202,
                          7,
                          21,
                          203,
                          255,
                          201,
                          208,
                          119,
                          116,
                          128,
                          24,
                          200,
                          203,
                          5,
                          203,
                          2,
                          34,
                          207,
                          22,
                          80,
                          5,
                          250,
                          2,
                          20,
                          203,
                          107,
                          18,
                          204,
                          204,
                          201,
                          115,
                          251,
                          0,
                          200,
                          64,
                          20,
                          129,
                          1,
                          8,
                          244,
                          81,
                          242,
                          167,
                          2,
                          0,
                          112,
                          129,
                          1,
                          8,
                          215,
                          24,
                          250,
                          0,
                          211,
                          63,
                          200,
                          84,
                          32,
                          71,
                          129,
                          1,
                          8,
                          244,
                          81,
                          242,
                          167,
                          130,
                          16,
                          110,
                          111,
                          116,
                          101,
                          112,
                          116,
                          128,
                          24,
                          200,
                          203,
                          5,
                          203,
                          2,
                          80,
                          6,
                          207,
                          22,
                          80,
                          4,
                          250,
                          2,
                          20,
                          203,
                          106,
                          18,
                          203,
                          31,
                          203,
                          63,
                          201,
                          115,
                          251,
                          0,
                          2,
                          0,
                          108,
                          129,
                          1,
                          8,
                          215,
                          24,
                          250,
                          0,
                          211,
                          63,
                          48,
                          82,
                          36,
                          129,
                          1,
                          8,
                          244,
                          89,
                          242,
                          167,
                          130,
                          16,
                          100,
                          115,
                          116,
                          114,
                          112,
                          116,
                          128,
                          24,
                          200,
                          203,
                          5,
                          203,
                          2,
                          80,
                          5,
                          207,
                          22,
                          80,
                          3,
                          250,
                          2,
                          19,
                          203,
                          106,
                          203,
                          31,
                          18,
                          203,
                          63,
                          201,
                          115,
                          251,
                          0,
                          0,
                          10,
                          244,
                          0,
                          201,
                          237,
                          84,
                        ],
                        "type": "Buffer",
                      },
                      "_length": 448,
                      "_offset": 4840,
                      Symbol(nodejs.util.inspect.custom): [Function],
                    },
                    "depth": [Function],
                    "equals": [Function],
                    "hash": [Function],
                    "level": [Function],
                    "mask": LevelMask {
                      "_hashCount": 1,
                      "_hashIndex": 0,
                      "_mask": 0,
                    },
                    "refs": [],
                    "type": -1,
                    Symbol(nodejs.util.inspect.custom): [Function],
                  },
                  Cell {
                    "_depths": [
                      0,
                      0,
                      0,
                      0,
                    ],
                    "_hashes": [
                      {
                        "data": [
                          240,
                          241,
                          242,
                          59,
                          44,
                          211,
                          151,
                          247,
                          220,
                          33,
                          51,
                          62,
                          233,
                          171,
                          50,
                          47,
                          192,
                          64,
                          195,
                          1,
                          221,
                          230,
                          111,
                          185,
                          174,
                          220,
                          62,
                          71,
                          92,
                          241,
                          107,
                          150,
                        ],
                        "type": "Buffer",
                      },
                      {
                        "data": [
                          240,
                          241,
                          242,
                          59,
                          44,
                          211,
                          151,
                          247,
                          220,
                          33,
                          51,
                          62,
                          233,
                          171,
                          50,
                          47,
                          192,
                          64,
                          195,
                          1,
                          221,
                          230,
                          111,
                          185,
                          174,
                          220,
                          62,
                          71,
                          92,
                          241,
                          107,
                          150,
                        ],
                        "type": "Buffer",
                      },
                      {
                        "data": [
                          240,
                          241,
                          242,
                          59,
                          44,
                          211,
                          151,
                          247,
                          220,
                          33,
                          51,
                          62,
                          233,
                          171,
                          50,
                          47,
                          192,
                          64,
                          195,
                          1,
                          221,
                          230,
                          111,
                          185,
                          174,
                          220,
                          62,
                          71,
                          92,
                          241,
                          107,
                          150,
                        ],
                        "type": "Buffer",
                      },
                      {
                        "data": [
                          240,
                          241,
                          242,
                          59,
                          44,
                          211,
                          151,
                          247,
                          220,
                          33,
                          51,
                          62,
                          233,
                          171,
                          50,
                          47,
                          192,
                          64,
                          195,
                          1,
                          221,
                          230,
                          111,
                          185,
                          174,
                          220,
                          62,
                          71,
                          92,
                          241,
                          107,
                          150,
                        ],
                        "type": "Buffer",
                      },
                    ],
                    "beginParse": [Function],
                    "bits": BitString {
                      "_data": {
                        "data": [
                          1,
                          20,
                          255,
                          0,
                          244,
                          164,
                          19,
                          244,
                          188,
                          242,
                          200,
                          11,
                          1,
                          2,
                          1,
                          32,
                          2,
                          3,
                          2,
                          1,
                          72,
                          4,
                          5,
                          4,
                          248,
                          242,
                          131,
                          8,
                          215,
                          24,
                          32,
                          211,
                          31,
                          211,
                          31,
                          211,
                          31,
                          2,
                          248,
                          35,
                          187,
                          242,
                          100,
                          237,
                          68,
                          208,
                          211,
                          31,
                          211,
                          31,
                          211,
                          255,
                          244,
                          4,
                          209,
                          81,
                          67,
                          186,
                          242,
                          161,
                          81,
                          81,
                          186,
                          242,
                          162,
                          5,
                          249,
                          1,
                          84,
                          16,
                          100,
                          249,
                          16,
                          242,
                          163,
                          248,
                          0,
                          36,
                          164,
                          200,
                          203,
                          31,
                          82,
                          64,
                          203,
                          31,
                          82,
                          48,
                          203,
                          255,
                          82,
                          16,
                          244,
                          0,
                          201,
                          237,
                          84,
                          248,
                          15,
                          1,
                          211,
                          7,
                          33,
                          192,
                          0,
                          159,
                          108,
                          81,
                          147,
                          32,
                          215,
                          74,
                          150,
                          211,
                          7,
                          212,
                          2,
                          251,
                          0,
                          232,
                          48,
                          224,
                          33,
                          192,
                          1,
                          227,
                          0,
                          33,
                          192,
                          2,
                          227,
                          0,
                          1,
                          192,
                          3,
                          145,
                          48,
                          227,
                          13,
                          3,
                          164,
                          200,
                          203,
                          31,
                          18,
                          203,
                          31,
                          203,
                          255,
                          16,
                          17,
                          18,
                          19,
                          2,
                          230,
                          208,
                          1,
                          208,
                          211,
                          3,
                          33,
                          113,
                          176,
                          146,
                          95,
                          4,
                          224,
                          34,
                          215,
                          73,
                          193,
                          32,
                          146,
                          95,
                          4,
                          224,
                          2,
                          211,
                          31,
                          33,
                          130,
                          16,
                          112,
                          108,
                          117,
                          103,
                          189,
                          34,
                          130,
                          16,
                          100,
                          115,
                          116,
                          114,
                          189,
                          176,
                          146,
                          95,
                          5,
                          224,
                          3,
                          250,
                          64,
                          48,
                          32,
                          250,
                          68,
                          1,
                          200,
                          202,
                          7,
                          203,
                          255,
                          201,
                          208,
                          237,
                          68,
                          208,
                          129,
                          1,
                          64,
                          215,
                          33,
                          244,
                          4,
                          48,
                          92,
                          129,
                          1,
                          8,
                          244,
                          10,
                          111,
                          161,
                          49,
                          179,
                          146,
                          95,
                          7,
                          224,
                          5,
                          211,
                          63,
                          200,
                          37,
                          130,
                          16,
                          112,
                          108,
                          117,
                          103,
                          186,
                          146,
                          56,
                          48,
                          227,
                          13,
                          3,
                          130,
                          16,
                          100,
                          115,
                          116,
                          114,
                          186,
                          146,
                          95,
                          6,
                          227,
                          13,
                          6,
                          7,
                          2,
                          1,
                          32,
                          8,
                          9,
                          0,
                          120,
                          1,
                          250,
                          0,
                          244,
                          4,
                          48,
                          248,
                          39,
                          111,
                          34,
                          48,
                          80,
                          10,
                          161,
                          33,
                          190,
                          242,
                          224,
                          80,
                          130,
                          16,
                          112,
                          108,
                          117,
                          103,
                          131,
                          30,
                          177,
                          112,
                          128,
                          24,
                          80,
                          4,
                          203,
                          5,
                          38,
                          207,
                          22,
                          88,
                          250,
                          2,
                          25,
                          244,
                          0,
                          203,
                          105,
                          23,
                          203,
                          31,
                          82,
                          96,
                          203,
                          63,
                          32,
                          201,
                          128,
                          64,
                          251,
                          0,
                          6,
                          0,
                          138,
                          80,
                          4,
                          129,
                          1,
                          8,
                          244,
                          89,
                          48,
                          237,
                          68,
                          208,
                          129,
                          1,
                          64,
                          215,
                          32,
                          200,
                          1,
                          207,
                          22,
                          244,
                          0,
                          201,
                          237,
                          84,
                          1,
                          114,
                          176,
                          142,
                          35,
                          130,
                          16,
                          100,
                          115,
                          116,
                          114,
                          131,
                          30,
                          177,
                          112,
                          128,
                          24,
                          80,
                          5,
                          203,
                          5,
                          80,
                          3,
                          207,
                          22,
                          35,
                          250,
                          2,
                          19,
                          203,
                          106,
                          203,
                          31,
                          203,
                          63,
                          201,
                          128,
                          64,
                          251,
                          0,
                          146,
                          95,
                          3,
                          226,
                          2,
                          1,
                          32,
                          10,
                          11,
                          0,
                          89,
                          189,
                          36,
                          43,
                          111,
                          106,
                          38,
                          132,
                          8,
                          10,
                          6,
                          185,
                          15,
                          160,
                          33,
                          132,
                          112,
                          212,
                          8,
                          8,
                          71,
                          164,
                          147,
                          125,
                          41,
                          145,
                          12,
                          230,
                          144,
                          62,
                          159,
                          249,
                          131,
                          120,
                          18,
                          128,
                          27,
                          120,
                          16,
                          20,
                          137,
                          135,
                          21,
                          159,
                          49,
                          132,
                          2,
                          1,
                          88,
                          12,
                          13,
                          0,
                          17,
                          184,
                          201,
                          126,
                          212,
                          77,
                          13,
                          112,
                          177,
                          248,
                          0,
                          61,
                          178,
                          157,
                          251,
                          81,
                          52,
                          32,
                          64,
                          80,
                          53,
                          200,
                          125,
                          1,
                          12,
                          0,
                          178,
                          50,
                          129,
                          242,
                          255,
                          242,
                          116,
                          0,
                          96,
                          64,
                          66,
                          61,
                          2,
                          155,
                          232,
                          76,
                          96,
                          2,
                          1,
                          32,
                          14,
                          15,
                          0,
                          25,
                          173,
                          206,
                          118,
                          162,
                          104,
                          64,
                          32,
                          107,
                          144,
                          235,
                          133,
                          255,
                          192,
                          0,
                          25,
                          175,
                          29,
                          246,
                          162,
                          104,
                          64,
                          16,
                          107,
                          144,
                          235,
                          133,
                          143,
                          192,
                          0,
                          110,
                          210,
                          7,
                          250,
                          0,
                          212,
                          212,
                          34,
                          249,
                          0,
                          5,
                          200,
                          202,
                          7,
                          21,
                          203,
                          255,
                          201,
                          208,
                          119,
                          116,
                          128,
                          24,
                          200,
                          203,
                          5,
                          203,
                          2,
                          34,
                          207,
                          22,
                          80,
                          5,
                          250,
                          2,
                          20,
                          203,
                          107,
                          18,
                          204,
                          204,
                          201,
                          115,
                          251,
                          0,
                          200,
                          64,
                          20,
                          129,
                          1,
                          8,
                          244,
                          81,
                          242,
                          167,
                          2,
                          0,
                          112,
                          129,
                          1,
                          8,
                          215,
                          24,
                          250,
                          0,
                          211,
                          63,
                          200,
                          84,
                          32,
                          71,
                          129,
                          1,
                          8,
                          244,
                          81,
                          242,
                          167,
                          130,
                          16,
                          110,
                          111,
                          116,
                          101,
                          112,
                          116,
                          128,
                          24,
                          200,
                          203,
                          5,
                          203,
                          2,
                          80,
                          6,
                          207,
                          22,
                          80,
                          4,
                          250,
                          2,
                          20,
                          203,
                          106,
                          18,
                          203,
                          31,
                          203,
                          63,
                          201,
                          115,
                          251,
                          0,
                          2,
                          0,
                          108,
                          129,
                          1,
                          8,
                          215,
                          24,
                          250,
                          0,
                          211,
                          63,
                          48,
                          82,
                          36,
                          129,
                          1,
                          8,
                          244,
                          89,
                          242,
                          167,
                          130,
                          16,
                          100,
                          115,
                          116,
                          114,
                          112,
                          116,
                          128,
                          24,
                          200,
                          203,
                          5,
                          203,
                          2,
                          80,
                          5,
                          207,
                          22,
                          80,
                          3,
                          250,
                          2,
                          19,
                          203,
                          106,
                          203,
                          31,
                          18,
                          203,
                          63,
                          201,
                          115,
                          251,
                          0,
                          0,
                          10,
                          244,
                          0,
                          201,
                          237,
                          84,
                        ],
                        "type": "Buffer",
                      },
                      "_length": 432,
                      "_offset": 5304,
                      Symbol(nodejs.util.inspect.custom): [Function],
                    },
                    "depth": [Function],
                    "equals": [Function],
                    "hash": [Function],
                    "level": [Function],
                    "mask": LevelMask {
                      "_hashCount": 1,
                      "_hashIndex": 0,
                      "_mask": 0,
                    },
                    "refs": [],
                    "type": -1,
                    Symbol(nodejs.util.inspect.custom): [Function],
                  },
                  Cell {
                    "_depths": [
                      0,
                      0,
                      0,
                      0,
                    ],
                    "_hashes": [
                      {
                        "data": [
                          128,
                          183,
                          231,
                          18,
                          50,
                          12,
                          32,
                          160,
                          248,
                          71,
                          52,
                          120,
                          76,
                          100,
                          189,
                          59,
                          218,
                          47,
                          216,
                          71,
                          186,
                          141,
                          210,
                          14,
                          158,
                          54,
                          68,
                          203,
                          26,
                          191,
                          177,
                          193,
                        ],
                        "type": "Buffer",
                      },
                      {
                        "data": [
                          128,
                          183,
                          231,
                          18,
                          50,
                          12,
                          32,
                          160,
                          248,
                          71,
                          52,
                          120,
                          76,
                          100,
                          189,
                          59,
                          218,
                          47,
                          216,
                          71,
                          186,
                          141,
                          210,
                          14,
                          158,
                          54,
                          68,
                          203,
                          26,
                          191,
                          177,
                          193,
                        ],
                        "type": "Buffer",
                      },
                      {
                        "data": [
                          128,
                          183,
                          231,
                          18,
                          50,
                          12,
                          32,
                          160,
                          248,
                          71,
                          52,
                          120,
                          76,
                          100,
                          189,
                          59,
                          218,
                          47,
                          216,
                          71,
                          186,
                          141,
                          210,
                          14,
                          158,
                          54,
                          68,
                          203,
                          26,
                          191,
                          177,
                          193,
                        ],
                        "type": "Buffer",
                      },
                      {
                        "data": [
                          128,
                          183,
                          231,
                          18,
                          50,
                          12,
                          32,
                          160,
                          248,
                          71,
                          52,
                          120,
                          76,
                          100,
                          189,
                          59,
                          218,
                          47,
                          216,
                          71,
                          186,
                          141,
                          210,
                          14,
                          158,
                          54,
                          68,
                          203,
                          26,
                          191,
                          177,
                          193,
                        ],
                        "type": "Buffer",
                      },
                    ],
                    "beginParse": [Function],
                    "bits": BitString {
                      "_data": {
                        "data": [
                          1,
                          20,
                          255,
                          0,
                          244,
                          164,
                          19,
                          244,
                          188,
                          242,
                          200,
                          11,
                          1,
                          2,
                          1,
                          32,
                          2,
                          3,
                          2,
                          1,
                          72,
                          4,
                          5,
                          4,
                          248,
                          242,
                          131,
                          8,
                          215,
                          24,
                          32,
                          211,
                          31,
                          211,
                          31,
                          211,
                          31,
                          2,
                          248,
                          35,
                          187,
                          242,
                          100,
                          237,
                          68,
                          208,
                          211,
                          31,
                          211,
                          31,
                          211,
                          255,
                          244,
                          4,
                          209,
                          81,
                          67,
                          186,
                          242,
                          161,
                          81,
                          81,
                          186,
                          242,
                          162,
                          5,
                          249,
                          1,
                          84,
                          16,
                          100,
                          249,
                          16,
                          242,
                          163,
                          248,
                          0,
                          36,
                          164,
                          200,
                          203,
                          31,
                          82,
                          64,
                          203,
                          31,
                          82,
                          48,
                          203,
                          255,
                          82,
                          16,
                          244,
                          0,
                          201,
                          237,
                          84,
                          248,
                          15,
                          1,
                          211,
                          7,
                          33,
                          192,
                          0,
                          159,
                          108,
                          81,
                          147,
                          32,
                          215,
                          74,
                          150,
                          211,
                          7,
                          212,
                          2,
                          251,
                          0,
                          232,
                          48,
                          224,
                          33,
                          192,
                          1,
                          227,
                          0,
                          33,
                          192,
                          2,
                          227,
                          0,
                          1,
                          192,
                          3,
                          145,
                          48,
                          227,
                          13,
                          3,
                          164,
                          200,
                          203,
                          31,
                          18,
                          203,
                          31,
                          203,
                          255,
                          16,
                          17,
                          18,
                          19,
                          2,
                          230,
                          208,
                          1,
                          208,
                          211,
                          3,
                          33,
                          113,
                          176,
                          146,
                          95,
                          4,
                          224,
                          34,
                          215,
                          73,
                          193,
                          32,
                          146,
                          95,
                          4,
                          224,
                          2,
                          211,
                          31,
                          33,
                          130,
                          16,
                          112,
                          108,
                          117,
                          103,
                          189,
                          34,
                          130,
                          16,
                          100,
                          115,
                          116,
                          114,
                          189,
                          176,
                          146,
                          95,
                          5,
                          224,
                          3,
                          250,
                          64,
                          48,
                          32,
                          250,
                          68,
                          1,
                          200,
                          202,
                          7,
                          203,
                          255,
                          201,
                          208,
                          237,
                          68,
                          208,
                          129,
                          1,
                          64,
                          215,
                          33,
                          244,
                          4,
                          48,
                          92,
                          129,
                          1,
                          8,
                          244,
                          10,
                          111,
                          161,
                          49,
                          179,
                          146,
                          95,
                          7,
                          224,
                          5,
                          211,
                          63,
                          200,
                          37,
                          130,
                          16,
                          112,
                          108,
                          117,
                          103,
                          186,
                          146,
                          56,
                          48,
                          227,
                          13,
                          3,
                          130,
                          16,
                          100,
                          115,
                          116,
                          114,
                          186,
                          146,
                          95,
                          6,
                          227,
                          13,
                          6,
                          7,
                          2,
                          1,
                          32,
                          8,
                          9,
                          0,
                          120,
                          1,
                          250,
                          0,
                          244,
                          4,
                          48,
                          248,
                          39,
                          111,
                          34,
                          48,
                          80,
                          10,
                          161,
                          33,
                          190,
                          242,
                          224,
                          80,
                          130,
                          16,
                          112,
                          108,
                          117,
                          103,
                          131,
                          30,
                          177,
                          112,
                          128,
                          24,
                          80,
                          4,
                          203,
                          5,
                          38,
                          207,
                          22,
                          88,
                          250,
                          2,
                          25,
                          244,
                          0,
                          203,
                          105,
                          23,
                          203,
                          31,
                          82,
                          96,
                          203,
                          63,
                          32,
                          201,
                          128,
                          64,
                          251,
                          0,
                          6,
                          0,
                          138,
                          80,
                          4,
                          129,
                          1,
                          8,
                          244,
                          89,
                          48,
                          237,
                          68,
                          208,
                          129,
                          1,
                          64,
                          215,
                          32,
                          200,
                          1,
                          207,
                          22,
                          244,
                          0,
                          201,
                          237,
                          84,
                          1,
                          114,
                          176,
                          142,
                          35,
                          130,
                          16,
                          100,
                          115,
                          116,
                          114,
                          131,
                          30,
                          177,
                          112,
                          128,
                          24,
                          80,
                          5,
                          203,
                          5,
                          80,
                          3,
                          207,
                          22,
                          35,
                          250,
                          2,
                          19,
                          203,
                          106,
                          203,
                          31,
                          203,
                          63,
                          201,
                          128,
                          64,
                          251,
                          0,
                          146,
                          95,
                          3,
                          226,
                          2,
                          1,
                          32,
                          10,
                          11,
                          0,
                          89,
                          189,
                          36,
                          43,
                          111,
                          106,
                          38,
                          132,
                          8,
                          10,
                          6,
                          185,
                          15,
                          160,
                          33,
                          132,
                          112,
                          212,
                          8,
                          8,
                          71,
                          164,
                          147,
                          125,
                          41,
                          145,
                          12,
                          230,
                          144,
                          62,
                          159,
                          249,
                          131,
                          120,
                          18,
                          128,
                          27,
                          120,
                          16,
                          20,
                          137,
                          135,
                          21,
                          159,
                          49,
                          132,
                          2,
                          1,
                          88,
                          12,
                          13,
                          0,
                          17,
                          184,
                          201,
                          126,
                          212,
                          77,
                          13,
                          112,
                          177,
                          248,
                          0,
                          61,
                          178,
                          157,
                          251,
                          81,
                          52,
                          32,
                          64,
                          80,
                          53,
                          200,
                          125,
                          1,
                          12,
                          0,
                          178,
                          50,
                          129,
                          242,
                          255,
                          242,
                          116,
                          0,
                          96,
                          64,
                          66,
                          61,
                          2,
                          155,
                          232,
                          76,
                          96,
                          2,
                          1,
                          32,
                          14,
                          15,
                          0,
                          25,
                          173,
                          206,
                          118,
                          162,
                          104,
                          64,
                          32,
                          107,
                          144,
                          235,
                          133,
                          255,
                          192,
                          0,
                          25,
                          175,
                          29,
                          246,
                          162,
                          104,
                          64,
                          16,
                          107,
                          144,
                          235,
                          133,
                          143,
                          192,
                          0,
                          110,
                          210,
                          7,
                          250,
                          0,
                          212,
                          212,
                          34,
                          249,
                          0,
                          5,
                          200,
                          202,
                          7,
                          21,
                          203,
                          255,
                          201,
                          208,
                          119,
                          116,
                          128,
                          24,
                          200,
                          203,
                          5,
                          203,
                          2,
                          34,
                          207,
                          22,
                          80,
                          5,
                          250,
                          2,
                          20,
                          203,
                          107,
                          18,
                          204,
                          204,
                          201,
                          115,
                          251,
                          0,
                          200,
                          64,
                          20,
                          129,
                          1,
                          8,
                          244,
                          81,
                          242,
                          167,
                          2,
                          0,
                          112,
                          129,
                          1,
                          8,
                          215,
                          24,
                          250,
                          0,
                          211,
                          63,
                          200,
                          84,
                          32,
                          71,
                          129,
                          1,
                          8,
                          244,
                          81,
                          242,
                          167,
                          130,
                          16,
                          110,
                          111,
                          116,
                          101,
                          112,
                          116,
                          128,
                          24,
                          200,
                          203,
                          5,
                          203,
                          2,
                          80,
                          6,
                          207,
                          22,
                          80,
                          4,
                          250,
                          2,
                          20,
                          203,
                          106,
                          18,
                          203,
                          31,
                          203,
                          63,
                          201,
                          115,
                          251,
                          0,
                          2,
                          0,
                          108,
                          129,
                          1,
                          8,
                          215,
                          24,
                          250,
                          0,
                          211,
                          63,
                          48,
                          82,
                          36,
                          129,
                          1,
                          8,
                          244,
                          89,
                          242,
                          167,
                          130,
                          16,
                          100,
                          115,
                          116,
                          114,
                          112,
                          116,
                          128,
                          24,
                          200,
                          203,
                          5,
                          203,
                          2,
                          80,
                          5,
                          207,
                          22,
                          80,
                          3,
                          250,
                          2,
                          19,
                          203,
                          106,
                          203,
                          31,
                          18,
                          203,
                          63,
                          201,
                          115,
                          251,
                          0,
                          0,
                          10,
                          244,
                          0,
                          201,
                          237,
                          84,
                        ],
                        "type": "Buffer",
                      },
                      "_length": 40,
                      "_offset": 5752,
                      Symbol(nodejs.util.inspect.custom): [Function],
                    },
                    "depth": [Function],
                    "equals": [Function],
                    "hash": [Function],
                    "level": [Function],
                    "mask": LevelMask {
                      "_hashCount": 1,
                      "_hashIndex": 0,
                      "_mask": 0,
                    },
                    "refs": [],
                    "type": -1,
                    Symbol(nodejs.util.inspect.custom): [Function],
                  },
                ],
                "type": -1,
                Symbol(nodejs.util.inspect.custom): [Function],
              },
            ],
            "type": -1,
            Symbol(nodejs.util.inspect.custom): [Function],
          },
        },
        {
          "definition": {
            "display_hints": [],
            "max_value": 1023,
            "min_value": 0,
            "name": "n",
            "size": 10,
            "type": "uint",
          },
          "type": "numeric",
          "value": 19,
        },
      ],
    },
  },
  {
    "hash": "feb5ff6820e2ff0d9483e7e0d62c817d846789fb4ae580c878866d959dabd5c0",
    "length": 16,
    "offset": 40,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [],
          "prefix": "F4BC",
          "tlb": "#F4BC",
        },
        "control_flow": {
          "branches": [
            {
              "type": "variable",
              "var_name": "x",
            },
          ],
          "nobranch": false,
        },
        "doc": {
          "category": "dict_special",
          "description": "A variant of \`DICTIGETJMP\` that returns index \`i\` on failure.",
          "fift": "DICTIGETJMPZ",
          "fift_examples": [],
          "gas": "",
          "opcode": "F4BC",
          "stack": "i D n - i or nothing",
        },
        "mnemonic": "DICTIGETJMPZ",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
          },
          "outputs": {
            "registers": [],
          },
        },
      },
      "operands": [],
    },
  },
  {
    "hash": "feb5ff6820e2ff0d9483e7e0d62c817d846789fb4ae580c878866d959dabd5c0",
    "length": 24,
    "offset": 56,
    "op": {
      "definition": {
        "bytecode": {
          "operands": [
            {
              "display_hints": [],
              "max_value": 2047,
              "min_value": 0,
              "name": "n",
              "size": 11,
              "type": "uint",
            },
          ],
          "prefix": "F2CC_",
          "tlb": "#F2CC_ n:uint11",
        },
        "control_flow": {
          "branches": [],
          "nobranch": false,
        },
        "doc": {
          "category": "exceptions",
          "description": "Throws exception \`0 <= n <  2^11\` with parameter \`x\`, by copying \`x\` and \`n\` into the stack of \`c2\` and transferring control to \`c2\`.",
          "fift": "[n] THROWARG",
          "fift_examples": [],
          "gas": "84",
          "opcode": "F2CC_n",
          "stack": "x - x nn",
        },
        "mnemonic": "THROWARG",
        "since_version": 0,
        "value_flow": {
          "inputs": {
            "registers": [],
            "stack": [
              {
                "name": "x",
                "type": "simple",
              },
            ],
          },
          "outputs": {
            "registers": [],
            "stack": [],
          },
        },
      },
      "operands": [
        {
          "definition": {
            "display_hints": [],
            "max_value": 2047,
            "min_value": 0,
            "name": "n",
            "size": 11,
            "type": "uint",
          },
          "type": "numeric",
          "value": 11,
        },
      ],
    },
  },
]
`;
